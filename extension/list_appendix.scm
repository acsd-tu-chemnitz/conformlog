(display "loading list.scm extension")(newline)

;; Appendix
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;_____APPENDIX_____;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-var-name "xl" (py "alpha"))
(add-var-name "xls" (py "list alpha"))

(add-var-name "yl" (py "alpha1"))
(add-var-name "yls" (py "list alpha1"))


(set-goal "all xls,xls0(Zero<Lh xls -> (Zero thof xls) eqd (Zero thof (xls:+:xls0)))")
(ind)
(ng #t)
(assume "xls")
(use "Efq")
(ng #t)
(strip)
(use "InitEqD")
(save "ListZeroThofLeft")

(set-goal "all xls(Lh xls=Zero -> xls eqd(Nil alpha))")
(cases)
(assume "Useless")
(use "InitEqD")
(assume "xl" "xls")
(ng #t)
(use "Efq")
;; Proof finished.
(save "LhZeroToEqNil")

(set-goal "all xls,xls0( Zero<Lh xls->Zero<Lh xls0->
  ((Succ Zero thof (xls:+:xls0)) eqd (Succ Zero thof xls)) ori 
((Succ Zero thof (xls:+:xls0)) eqd (Zero thof xls0)))")
(ind)
(ng #t)
(assume "xls")
(use "Efq")
(assume "xl" "xls" "Ih")
(casedist (pt "Lh xls=Zero"))
(assume "case")
(assume "xls0")
(ng #t)
(assume "Useless")
(assume "Lhcond1")
(intro 1)
(simp (pf "xls eqd (Nil alpha)"))
(ng #t)
(use "InitEqD")
(use "LhZeroToEqNil")
(use "case")
(assume "case2")
    (assert "Zero<(ListLength alpha)xls")
    (use "NatNotLeToLt")
    (simp "NatLeToEq")
    (use "case2")
(assume "Case2Sw")
(assume "xls1")
(assume "Lhcond11")
(assume "Lhcond12")
(intro 0)
(ng #t)
(simp "<-" "ListZeroThofLeft")
(use "InitEqD")
(use "Case2Sw")
(save "ListSuccZeroThofCases")

(set-goal "all xls(Zero thof xls eqd Head xls) ")
(cases)
(use "InitEqD")
(assume "xl" "xls")
(ng #t)
(use "InitEqD")
(save "ListZeroThofEqHead")

(set-goal "all xls,xls0((Zero < Lh xls orb Zero < Lh xls0)->Zero < Lh ((xls):+:(xls0)))")
(ind)
(ind)
(ng #t)
(use "Efq")
(assume "xl" "xls" "IH")
(assume "Cond")
(ng #t)
(use "Truth")
(assume "xl" "xls" "IH" "xls0")
(assume "cond")
(ng #t)
(use "Truth")
(save "ListLhCasesToLhAppend")

(set-goal "all xls( Zero = Lh xls -> xls eqd (Nil alpha))")
(cases)
(assume 1)
(use "InitEqD")
(assume "xl" "xls")
(ng #t)
(use "Efq")
(save "ListLengthElim0")

(set-goal "all xls,xls0(Zero < Lh xls0 ->  Last (xls:+:xls0) eqd Last xls0)")
(ind)
(assume "xls0")
(ng #t)
(assume "eq")
(use "InitEqD")
(assume "xl" "xls" "IH" "xls0")
(assume "Ng")
(ng #t)
(assert "Zero < (ListLength alpha)xls+(ListLength alpha)xls0")
  (use "NatLtLeTrans" (pt "(ListLength alpha)xls0"))
  (use "Ng")
  (use "Truth")
(cases (pt "(ListLength alpha)xls+(ListLength alpha)xls0=Zero"))
(assume "case1")
(simp "case1")
(ng #t)
(use "Efq")
(assume "Case2")
(assume "Assert")
(ng #t)
(use "IH")
(use "Ng")
(save "ListLastAppendRight")

;; ListLengthPlusEqLengthAppend
(set-goal "all xls,xls0 (Lh xls + Lh xls0 = Lh (xls:+:xls0))")
(ind)
(ng #t)
(assume "xls")
(use "Truth")
(assume "xl" "xls" "IH" "xls0")
(ng #t)
(use "Truth")
(save "ListLengthPlusEqLengthAppend")

(set-goal "all xls,xls0(1 < Lh xls -> ((Succ Zero) thof xls:+:xls0) eqd ((Succ Zero) thof xls))")
(ind)
(ng #t)
(assume "xls0")
(use "Efq")
(assume "xl")
(ind)
(assume "IH")
(ng #t)
(assume "xls")
(use "Efq")
(assume "xl0" "xls" "IH1")
(assume "IH2" "xls0")
(ng #t)
(assume 1)
(use "InitEqD")
(save "ListSuccZeroTrans")

(set-goal "all xls,xls0(Zero < Lh xls -> Head(xls:+:xls0) eqd Head xls)")
(ind)
(assume "xls0")
(ng #t)
(use "Efq")
(assume "xl" "xls" "IH" "xls0" "length") 
(ng #t)
(use "InitEqD")
(save "ListHeadAppendLeft")

(set-goal "all n,xls,xls0(Zero < Lh xls -> n < Lh xls -> (n thof xls:+:xls0) eqd (n  thof xls))")
(ind)
(assume "xls" "xls0")
(ng #t)
(assume 1 1)
(simp "ListZeroThofEqHead")
(simp "ListHeadAppendLeft")
(simp "<-" "ListZeroThofEqHead")
(use "InitEqD")
(use 1)
(assume "n" "IH")
(ind)
(assume "xls0")
(ng #t)
(use "Efq")
(assume "xl" "xls" "IH11")
(assume "xls0")
(ng #t)
(assume 1 1)
(use "IH")
  (assert "all m,n (n<m -> Zero < m)")
  (ind)
  (assume "n1")
  (ng #t)
  (use "Efq")
  (assume "n1" "IH2")
  (ng #t)
  (assume "n2" 1)
  (use "Truth")
(assume "Assertion")
(use "Assertion" (pt "n"))
(use 4)
(use 4)
(save "ListThofAppendLeft")

(set-goal "all xls,xls0((Succ Zero) < Lh xls -> (Succ Zero) thof (xls:+:xls0) eqd (Succ Zero) thof xls)")
(cases)
(ng #t)
(assume "xls0")
(use "Efq")
(assume "xl")
(cases)
(assume "xls0")
(ng #t)
(use "Efq")
(assume "xl0" "xls1" "xls0")
(ng #t)
(assume 1)
(use "InitEqD")
(save "ListSuccZeroAppendLeft")

(set-goal "all n,xls,xls0( n < Lh xls -> n thof (xls:+:xls0) eqd n thof xls)")
(ind)
(ind)
(assume "xls0")
(ng #t)
(use "Efq")
(assume "xl" "xls" "IH")
(assume "xls0")
(ng #t)
(assume 1)
(use "InitEqD")
(assume "n" "IH")
(ind)
(assume "xls0")
(ng #t)
(use "Efq")
(assume "xl1" "xls" "IH1" "xls0")
(ng #t)
(assume 1)
(use "IH")
(use 3)
(save "ListThofAppend")

(set-goal "all xls,xls0 ( (Lh xls) thof (xls:+:xls0) eqd Zero thof xls0)")
(ind)
(ng #t)
(assume "xls")
(use "InitEqD")
(assume "xl" "xls" "IH" "xls0")
(ng #t)
(simp "IH")
(use "InitEqD")
(save "ListAppendEqHeadListR")

(set-goal "all xls,n,xl((Succ n) thof (xl::xls) eqd n thof xls)")
(ind)
(assume "n" "xl")
(ng #t)
(use "InitEqD")
(assume "xl" "xls" "IH" "n" "xl1")
(ng #t)
(use "InitEqD")
(save "ListSuccThofEqList")

(set-goal "all xls,n(Zero < Lh xls -> ( Succ n thof xls) eqd (n thof Tail xls) )")
(cases)
(assume "n")
(ng #t)
(use "Efq")
(assume "xl" "xls")
(cases)
(ng #t)
(assume 1)
(use "InitEqD")
(assume "n")
(ng #t)
(assume 1)
(use "InitEqD")
(save "ListSuccthofTothofTail")


(set-goal "all xls,xls0((Lh xls = Lh xls0) -> (Lh Tail xls) = (Lh Tail xls0))")
(cases)
(cases)
(ng #t)
(assume 1)
(use 1)
(assume "xl" "xls")
(ng #t)
(use "Efq")
(assume "xl1" "xls")
(cases)
(ng #t)
(use "Efq")
(assume "xl2" "xls0")
(ng #t)
(assume 1)
(use 1)
(save "ListLhEqLhTail")

(set-goal "all xls,n,xl(Zero < Lh xls -> Zero < n -> n thof (xl::xls) eqd (Pred n) thof xls)")
(cases)
(ng #t)
(assume "n" "xl")
(use "Efq")
(assume "xl" "xls")
(cases)
(assume "xl2")
(ng #t)
(assume 1)
(use "Efq")
(assume "n" "xl1" 1 1)
(ng #t)
(use "InitEqD")
(save "ListThofEqPredList")

(set-goal "all xls(Zero < Lh xls -> Lh Tail xls = Pred(Lh xls))")
(cases)
(ng #t)
(use "Efq")
(assume "xl" "xls")
(ng #t)
(assume 1)
(use 1)
(save "ListLhTailToPredList")

(set-goal "all n,xls,xls0 ( ((Lh xls)+n) thof (xls:+:xls0) eqd n thof xls0 )")
(ind)
(ng #t)
(assume "xls" "xls0")
(use "ListAppendEqHeadListR")
(assume "n" "IH")
(ind)
(assume "xls0")
(ng #t)
(use "InitEqD")
(assume "xl" "xls" "IH2" "xls0")
(ng #t)
(use "IH2")
(save "ListAppendEqListR")

(set-goal "all xls0,n,m,xls( n = Lh xls0 -> ((n+m) thof (xls0:+:xls)) eqd (m thof xls))")
(ind)
(ng #t)
(assume "n" "m" "xls")
(assume 1)
(simp 1)
(ng #t)
(use "InitEqD")
(assume "xl" "xls" "Ih" "n")
(assume "m" "xls0" "sim")
(inst-with "ListAppendEqListR" (pt "m") (pt "xl::xls") (pt "xls0"))
(simp "sim")
(use 3)
(save "ListAppendEqNatThofListR")

(set-goal "all xls,n,xls0(n = Lh xls -> n thof (xls:+:xls0) eqd Head xls0)")
(ind)
(assume "n" "xls0")
(ng #t)
(assume 1)
(simp 1)
(use "ListZeroThofEqHead")
(assume "xl" "xls" "IH" "n" "xls0")
(assume 1)
(simp 2)
(simp "<-" "ListZeroThofEqHead")
(inst-with "ListAppendEqListR" (pt "Zero") (pt "(xl::xls)") (pt "xls0"))
(use 3)
(save "ListAppenThofEqHeadListR")

(set-goal "all xls,n,xls0(Succ n = Lh xls -> n thof (xls:+:xls0) eqd Last xls)")
(ind)
(assume "n" "xls")
(ng #t)
(use "Efq")
(assume "xl" "xls" "IH" "n" "xls0")
(ng #t)
(cases (pt "Lh xls = Zero"))
(assume "case1")
(simp "case1")
(assume 1)
(simp 3)
(ng #t)
(use "InitEqD")
(assume "nCase1")
(ng #t)
(assume 1)
(simp "<-" "IH" (pt "Pred n") (pt "xls0"))
(inst-with "ListSuccThofEqList" (pt "(xls:+:xls0)") (pt "Pred n") (pt "xl"))
(simp "<-" 4)
(simp "NatSuccPredEqId")
(use "InitEqD")
(simp 3)
(simp "NatNotLeToLt")
(use "Truth")
(assume 1)
(use "nCase1")
(use 5)
(simp "NatSuccPredEqId")
(use 3)
(simp "NatNotLeToLt")
(use "Truth")
(simp 3)
(assume 1)
(use "nCase1")
(use 4)
(save "ListAppenThofEqLastListL")

(set-goal "all xls((Zero < Lh (xls) -> F)-> (xls) eqd (Nil alpha))")
(cases)
(ng #t)
(assume 1)
(use "InitEqD")
(assume "xl" "xls")
(ng #t)
(assume 1)
(use "Efq")
(use 1)
(use "Truth")
(save "ListLengthEqZeroToEmptyList")

(set-goal "all xl,xls(Zero < Lh xls -> Last(xl::xls) eqd Last xls)")
(assume "xl")
(cases)
(ng #t)
(use "Efq")
(assume "xl1" "xls")
(assume "xlsNZ")
(ng #t)
(use "InitEqD")
(save "ListLastTransConst")

(set-goal "all xls(Last xls eqd ((Pred Lh xls) thof xls))")
(ind)
(ng #t)
(use "InitEqD")
(assume "xl" "xls" "IH")
(ng #t)
(cases (pt "(ListLength alpha)xls=Zero"))
(assume "C1")
(ng #t)
(simp (pf "xls eqd (Nil alpha)"))
(ng #t)
(use "InitEqD")
(use "ListLengthEqZeroToEmptyList")
(use "NatLeToNotLt")
(use "C1")
(assume "nC1")
(ng #t)
(simp "ListThofEqPredList")
(ng #t)
(use "IH")
(use "NatNotLeToLt")
(use "nC1")
(use "NatNotLeToLt")
(use "nC1")
(save "ListLastEqPredThof")

(set-goal "all xls,n(Zero < Lh xls -> Zero < n -> (n thof xls) eqd ((Pred n) thof (Tail xls)))")
(ind)
(assume "n")
(ng #t)
(use "Efq")
(assume "xl" "xls" "IH")
(cases)
(ng #t)
(assume 1)
(use "Efq")
(assume "n")
(ng #t)
(assume 1 1)
(use "InitEqD")
(save "ListthofToPredTail")

(set-goal "all xls1,xls2,m(((Lh xls1+m) thof (xls1:+:xls2)) eqd (m thof xls2))")
(ind)
(assume "xls2" "m")
(ng #t)
(use "InitEqD")
(assume "xl" "xls1" "IH" "xls2" "m")
(ng #t)
(simp "IH")
(use "InitEqD")
(save "ListAppendThofToList")

(set-goal "all xls1,xls2,m(Lh xls1 <= m -> m <(Lh xls1+Lh xls2) ->(m thof (xls1:+:xls2)) eqd ((m -- Lh xls1) thof xls2))")
(ind)
(ng #t)
(assume "xls" "m")
(assume 1 1)
(use "InitEqD")
(assume "xl" "xls1" "IH")
(cases)
(cases)
(ng #t)
(use "Efq")
(assume "m")
(ng #t)
(assume "Lim" "Lim2")
(assert "m<Lh xls1 -> F")
(use "NatLeToNotLt")
(use "Lim")
(assume "A1")
(use "Efq")
(use "A1")
(use "Lim2")
(assume "xl0" "xls2" "m")
(ng #t)
(assume 1 1)
(inst-with "IH" (pt "(xl0::xls2)") (pt "Pred m"))
(ng 4)
(simphyp-with 4 (pf "Pred m--(ListLength alpha)xls1 = Pred(m--(ListLength alpha)xls1)"))
(simp "<-" 5)
(inst-with "ListSuccThofEqList" (pt "(xls1:+:(xl0::xls2))") (pt "Pred m") (pt "xl"))
(simphyp-with 6 (pf "Succ(Pred m) = m"))
(use 7)
(use "NatSuccPredEqId")
(use "NatLtLeTrans" (pt "Succ((ListLength alpha)xls1)"))
(use "Truth")
(use 2)
(use "NatLeSuccToPredLe")
(use 3)
(use "NatLeToSuccLe")
(simp "NatSuccPredEqId")
(use 2)
(use "NatLtLeTrans" (pt "Succ((ListLength alpha)xls1)"))
(use "Truth")
(use 2)
(simp "NatPredMinusDistL")
(use "Truth")
(save "ListAppendThofToListR")

(set-goal "all xls1,xls2,m( m < Lh xls1->(m thof (xls1:+:xls2)) eqd (m thof xls1))")
(ind)
(assume "xls2" "m")
(ng #t)
(use "Efq")
(assume "xl" "xls1" "IH")
(cases)
(assume "m")
(ng #t)
(cases (pt "m=Zero"))
(assume "C1")
(simp "C1")
(ng #t)
(assume 1)
(use "InitEqD")
(assume "nC1")
(assume "Lim1")
(inst-with "ListSuccThofEqList" (pt "(xls1:+:(Nil alpha))") (pt "Pred m") (pt "xl"))
(simphyp-with 4 (pf "Succ(Pred m) = m"))
(simp 5)
(inst-with "ListSuccThofEqList" (pt "xls1") (pt "Pred m") (pt "xl"))
(simphyp-with 6 (pf "Succ(Pred m)=m"))
(simp 7)
(use "IH")
(inst-with "NatLtSuccToPred" (pt "Pred m") (pt "Succ((ListLength alpha)xls1)"))
(simphyp-with 8 (pf "Succ(Pred m) = m"))
(ng 9)
(simp 9)
(use "Lim1")
(use "NatSuccPredEqId")
(use "NatNotLeToLt")
(use "nC1")
(use "NatSuccPredEqId")
(use "NatNotLeToLt")
(use "nC1")
(use "NatSuccPredEqId")
(use "NatNotLeToLt")
(use "nC1")
(assume "xl0" "xls2" "m")
(cases (pt "m = Zero"))
(assume "C1")
(simp "C1")
(ng #t)
(assume 1)
(use "InitEqD")
(assume "nC1")
(ng #t)
(assume "Lim1")
(inst-with "IH" (pt "(xl0::xls2)") (pt "m"))
(inst-with "ListSuccThofEqList" (pt "xls1") (pt "Pred m") (pt "xl"))
(simphyp-with 5 (pf "Succ(Pred m) = m"))
(simp 6)
(inst-with "ListSuccThofEqList" (pt "xls1:+:(xl0::xls2)") (pt "Pred m") (pt "xl"))
(simphyp-with 7 (pf "Succ(Pred m) = m"))
(simp 8)
(use "IH")
(use "NatLtLeTrans" (pt "m"))
(ng #t)
(use "NatNotLeToLt")
(use "nC1")
(use "Lim1")
(use "NatSuccPredEqId")
(use "NatNotLeToLt")
(use "nC1")
(use "NatSuccPredEqId")
(use "NatNotLeToLt")
(use "nC1")
(save "ListAppendThofToListL")

(set-goal "all xls(Zero < Lh xls -> Lh xls = Succ(Lh Tail xls))")
(cases)
(ng #t)
(use "Efq")
(assume "xl" "xls")
(ng #t)
(auto)
(save "ListLengthToSuccLengthTail")

;; __________ Term Trans Lib ____________
(add-var-name "ax" (py "alpha"))
(remove-var-name "xs")
(add-var-name "xs" (py "list alpha"))

(set-goal "all xs,xs1(Zero<Lh xs -> (Zero thof xs) eqd (Zero thof (xs:+:xs1)))")
  (ind)
  (ng #t)
  (assume "xs")
  (use "Efq")
  (ng #t)
  (strip)
  (use "InitEqD")
(save "ListZeroThofTrans")

(set-goal "all xs1,xs2(Zero < Lh xs2 ->  Last (xs1:+:xs2) eqd Last xs2)")
  (ind)
  (assume "xs2")
  (ng #t)
  (assume "eq")
  (use "InitEqD")
  (assume "alpha" "xs1" "IH" "xs2")
  (assume "Ng")
  (ng #t)
    (assert "Zero < (ListLength alpha)xs1+(ListLength alpha)xs2")
      (use "NatLtLeTrans" (pt "(ListLength alpha)xs2"))
      (use "Ng")
      (use "Truth")
      (cases (pt "(ListLength alpha)xs1+(ListLength alpha)xs2=Zero"))
    (assume "case1")
  (simp "case1")
  (ng #t)
  (use "Efq")
  (assume "Case2")
  (assume "Assert")
  (ng #t)
  (use "IH")
  (use "Ng")
(save "ListLastTrans")

(set-goal "all xs1,xs2((Succ Zero) <= Lh xs1 -> Head(xs1:+:xs2) eqd Head xs1)")
  (ind)
  (assume "xs2")
  (ng #t)
  (use "Efq")
  (assume "ax" "xs1" "IH" "xs2" "length") 
  (ng #t)
  (use "InitEqD")
(save "ListHeadTrans")

(set-goal "all n,xs1,xs2(1 <= Lh xs1 -> n < Lh xs1 -> (n thof xs1:+:xs2) eqd (n  thof xs1))")
  (ind)
  (assume "xs1" "xs2")
  (ng #t)
  (assume 1 1)
  (simp "ListZeroThofEqHead")
  (simp "ListHeadTrans")
  (simp "<-" "ListZeroThofEqHead")
  (use "InitEqD")
  (use 1)
  (assume "n" "IH")
  (ind)
  (assume "xs2")
  (ng #t)
  (use "Efq")
  (assume "ax" "xs1" "IH11")
  (assume "xs2")
  (ng #t)
  (assume 1 1)
  (use "IH")
    (assert "all n (Zero < n -> 1 <= n)")
      (ng #t)
      (ind)
      (ng #t)
      (use "Efq")
      (assume "n1" "IH1")
      (ng #t)
      (assume 1)
      (use 6)
    (assume "A1")
  (use "A1")
    (assert "all m,n (n<m -> Zero < m)")
      (ind)
      (assume "n1")
      (ng #t)
      (use "Efq")
      (assume "n1" "IH2")
      (ng #t)
      (assume "n2" 1)
      (use "Truth")
    (assume "A2")
  (use "A2" (pt "n"))
  (use 4)
  (use 4)
(save "ListThofAppendTransL")

(set-goal "all xs1,xs2((Succ Zero) < Lh xs1 -> (Succ Zero) thof (xs1:+:xs2) eqd (Succ Zero) thof xs1)")
  (cases)
  (ng #t)
  (assume "xs2")
  (use "Efq")
  (assume "ax1")
  (cases)
  (assume "xs2")
  (ng #t)
  (use "Efq")
  (assume "ax11" "xs11" "xs12")
  (ng #t)
  (assume 1)
  (use "InitEqD")
(save "ListSuccZeroThofTrans")

(set-goal "all n,xs1,xs2( n < Lh xs1 -> n thof (xs1:+:xs2) eqd n thof xs1)")
  (ind)
  (ind)
  (assume "xs2")
  (ng #t)
  (use "Efq")
  (assume "ax" "xs1" "IH")
  (assume "xs2")
  (ng #t)
  (assume 1)
  (use "InitEqD")
  (assume "n" "IH")
  (ind)
  (assume "xs2")
  (ng #t)
  (use "Efq")
  (assume "ax1" "xs1" "IH1" "xs2")
  (ng #t)
  (assume 1)
  (use "IH")
  (use 3)
(save "ListThofTrans")

(set-goal "all xs(Zero < Lh xs -> xs eqd (Head xs)::(Tail xs))")
  (ind)
  (ng #t)
  (use "Efq")
  (assume "alpha" "xs")
  (assume "IH")
  (assume "Taut")
  (ng #t)
  (use "InitEqD")
(save "ListExtLem")



(remove-token "__")

(add-program-constant "ListProjN" (py "list alpha => nat=> alpha"))


(define (make-term-proj-creator token)
(lambda (xls n)
   (mk-term-in-app-form
    (make-term-in-const-form
    (if (string-prefix? "list" (alg-form-to-name (term-to-type xls)))
     (let* (
       (typelist (term-to-type xls))
       (internal-name "ListProjN" )
       (const (pconst-name-to-pconst internal-name))
	    (tvars (const-to-tvars const))
	    (type (car (alg-form-to-types typelist)))
	    (subst (make-substitution tvars (list type))))
        (const-substitute const subst #f)) (pconst-name-to-pconst (token-and-type-to-name token (term-to-type xls)))
       ))
     xls n)))

(add-token "__" 'mul-op (make-term-proj-creator "__"))

(add-token-and-type-to-name "__" (py "list alpha") "ListProjN")
(add-token-and-types-to-name "__" (list (py "list alpha") (py "nat")) "ListProjN")
(add-display (py "alpha") (make-display-creator "ListProjN" "__" 'mul-op))

(add-computation-rules
 "(Nil alpha)__nat" "(Inhab alpha)"
 "(xl::xls1)__Zero" "xl"
 "(xl::xls1)__(Succ nat1)" "xls1__nat1")

;; For compatibility ListProjN is used for vectors
(set-totality-goal "ListProjN")
(assume "xls^" "Txls")
(elim "Txls")
(assume "n^" "Tn")
(elim "Tn")
(ng #t)
(use "InhabTotal")
(assume "n^1" "Tn1" "IHn1")
(use "InhabTotal")
(assume "xl^" "Txl" "xls^2" "Txls2" "IHxls2")
(use "AllTotalElim")
(ind)
(ng #t)
(use "Txl")
(assume "n" "Ih")
(ng #t)
(use "IHxls2")
(use "NatTotalVar")
;; Proof finished.
(save-totality)


(set-goal "all xls,n,xl((xl::xls)__(Succ n) eqd  xls__n)")
(ind)
(assume "n" "xl")
(ng #t)
(use "InitEqD")
(assume "xl" "xls" "IH" "n" "xl1")
(ng #t)
(use "InitEqD")
(save "ListSuccListProjNEqList")


(set-goal "all xls,n(Zero < Lh xls -> ( xls__(Succ n)) eqd (Tail xls)__(n) )")
(cases)
(assume "n")
(ng #t)
(use "Efq")
(assume "xl" "xls")
(cases)
(ng #t)
(assume 1)
(use "InitEqD")
(assume "n")
(ng #t)
(assume 1)
(use "InitEqD")
(save "ListSuccListProjNToTail")


(set-goal "all xls,xl(Zero<Lh xls->Head(xls++xl:) eqd Head(xls))")
(ind)
(strip)
(ng)
(use "EfEqD")
(use 1)
(ng)
(assume "xl" "xls")
(assume "Ih")
(strip)
(use "InitEqD")
(save "HeadListAppdRewRule")

(set-goal "all xs1 allnc xl^2,xs^2 xs1++xl^2: ++xs^2 eqd xs1++(xl^2::xs^2)")
(ind)
(assume "xl^2" "xs^2")
(use "InitEqD")
(assume "xl" "xs1" "IHxs1" "xl^2" "xs^2")
(ng)
(simp "IHxs1")
(use "InitEqD")
(save "ListAppdPropRewRule")

(set-goal "all xls,xls1(Zero < Lh xls1 -> Last(xls ++ xls1) eqd Last xls1)")
(ind)
(assume "xls1")
(ng)
(assume "0<Lh")
(use "InitEqD")
(assume "xl" "xls")
(assume "Ih")
(assume "xls0")
(assume "0<Lh")
(simp "ListAppd1CompRule")
(ng)
(casedist (pt "(ListLength alpha)xls+(ListLength alpha)xls0=Zero"))
(ng)
(assume "case")
(assert "((ListLength alpha)xls+(ListLength alpha)xls0=Zero)->F")
(use "NatPlusEqZeroFalse")
(intro 1)
(use "0<Lh")
(assume "Assertion")
(use "EfEqD")
(use "Assertion")
(use "case")
(ng)
(assume "case")
(simp "Ih")
(use "InitEqD")
(use "0<Lh")
(save "LastAppdRewRule")

(add-var-name "rls" (py "list rat"))

(set-goal "all rls(Head(rls)=rls__Zero)")
(ind)
(ng #t)
(auto)
(save "HeadEqFirst")

(set-goal "all rls(Last(rls)=rls__(Pred(Lh rls)))")
(ind)
(ng #t)
(auto)
(assume "a" "rls" "Ih")
(ng #t)
(cases (pt "(ListLength rat)rls=Zero"))
(assume "CaseLh")
(ng #t)
(simp "CaseLh")
(ng #t)
(auto)
(assume "CaseLh")
(ng #t)
(simp (pf "(ListLength rat)rls=Succ(Pred((ListLength rat) rls))"))
(simp "ListProj2CompRule")
(use "Ih")
(ng #t)
(simp "<-" "SuccPredN")
(auto)
(use "NatEqZeroNegtoNatIneq")
(auto)
;; Proof Finished.
(save "ListLastEqPredLength")

(remove-var-name "rls")

(set-goal "all xls(Lh(Rev xls) = Lh xls)")
  (ind)
  (ng #t)
  (use "Truth")
  (assume "xl" "xls" "IHxls")
  (ng #t)
  (use "IHxls")
(save "ListRevLhEqLh")
(add-rewrite-rule "Lh(Rev xls)" "Lh xls")

(set-goal "all xl0,xl1(xl0 eqd xl1 -> xl0: eqd xl1:)")
(assume "xl" "xl0")
(assume "cond")
(simp "cond")
(use "InitEqD")
(save "ListSingletonEqd")

(set-goal "all xl0,xl1,xls0,xls1(xl0 eqd xl1 -> xls0 eqd xls1 -> xl0::xls0 eqd xl1::xls1)")
(assume "xl0" "xl1" "xls0" "xls1")
(assume "cond")
(assume "cond2")
(simp "cond")
(simp "cond2")
(use "InitEqD")
(save "ListConsEqd")

(set-goal "all xls(Last(xls) eqd xls__(Pred(Lh xls)))")
(ind)
(ng #t)
(use "InitEqD")
(assume "xl" "xls")
(assume "Ih")
(ng #t)
(cases (pt "(ListLength alpha)xls=Zero"))
(assume "CaseLh")
(ng #t)
(simp "CaseLh")
(ng #t)
(use "InitEqD")
(assume "CaseLh")
(ng #t)
(simp (pf "(ListLength alpha)xls=Succ(Pred((ListLength alpha) xls))"))
(simp "ListProjN2CompRule")
(use "Ih")
(simp "<-" "SuccPredN")
(auto)
(use "NatEqZeroNegtoNatIneq")
(auto)
;; Proof Finished.
(save "ListLastEqPredLengthN")

(set-goal "all xls1,n,xls2(n<Lh xls1 -> ((xls1++xls2)__n)eqd(xls1__n))")
(ind)
(assume "n" "xls2" "Absurd")
(use "EfEqD")
(use "Absurd")
(assume "xl1" "xls1" "IHxs1")
(ng)
(cases)
(ng)
(strip)
(use "InitEqD")
(assume "n" "xls")
(assume "case")
(ng)
(use "IHxs1")
(use "NatLtLeTrans" (pt "Succ n"))
(auto)
(save "ListProjNAppdLeft")



(set-goal "all xls1,xls2,n(n<Lh xls2 -> ((xls1++xls2)__(Lh xls1+n)eqd(xls2)__n))")
(ind)
(ng)
(strip)
(use "InitEqD")
(assume "xl1" "xls1" "IHxs1")
(ng)
(use "IHxs1")
(save "ListProjNAppdRight")


(set-goal "all xls,n(n<Lh xls -> (Rev xls)__n eqd(xls)__(Pred(Lh xls--n)))")
(assert "all xls,n(n<Lh xls -> (xls)__n eqd((Rev xls)__(Pred(Lh xls--n))))")
 (ind)
 (ng)
 (assume "n")
 (use "Efq")
 (assume "xl" "xls" "IH")
 (ng #t)
 (cases)
 (ng #t)
 (assume "Useless")
 (assert "Lh xls eqd Lh Rev xls+Zero")
  (simp "ListLengthRev")
  (use "InitEqD")
 (assume "EqHyp")
 (simp "EqHyp")
 (simp "ListProjNAppdRight")
 (use "InitEqD")
 (use "Truth")
;; Case Succ n
 (ng #t)
 (assume "n" "n<Lh xs")
 (simp "ListProjNAppdLeft")
 (use "IH")
 (use "NatLtLeTrans" (pt "Succ n"))
 (auto)
;; ?_22:Pred(Lh xs--n)<Lh Rev xs
 (simp "ListLengthRev")
 (cases (pt "Lh xls"))
 (assume "Lh xs=0")
 (simphyp-with-to "n<Lh xs" "Lh xs=0" "Absurd")
 (use "EfAtom")
 (use "Absurd")
 (assume "n0" "Lh xs=Sn0")
 (ng #t)
 (use "Truth")
(assume "ListProjRevAux" "xls" "n" "n<Lh xls")
(inst-with-to "ListProjRevAux" (pt "Rev xls") (pt "n") "Aux")
(assert "Rev Rev xls eqd xls")
 (use "ListRevInvol")
(assume "Assertion")
(simphyp-with-to "Aux" "Assertion" "SimpAux")
(assert "Lh Rev xls eqd Lh xls")
 (use "ListLengthRev")
(assume "Lh Rev xs eqd Lh xs")
(simphyp-with-to "SimpAux" "Lh Rev xs eqd Lh xs" "SimpSimpAux")
(use "SimpSimpAux")
(use "n<Lh xls")
(save "ListProjNRev")


(set-goal "all xls,xl(Last(xls++xl:) eqd xl)")
(ind)
(ng)
(assume "xl")
(use "InitEqD")
(assume "xl" "xls")
(assume "Ih")
(ng)
(assume "xl0")
(inst-with-to "Ih" (pt "xl0") "IhSpec")
(simp "IhSpec")
(use "InitEqD")
(save "ListLastAppdStep")


(set-goal "all xls,n(n=Pred(Lh xls) -> xls__n eqd Last(xls))")
(assume "xls" "n")
(assume "cond")
(simp "cond")
(simp "ListLastEqPredLengthN")
(use "InitEqD")
(save "ListLastEqPredLengthNP2")


(set-goal "all xl ex xl0 (xl eqd xl0)")
(assume "xl")
(ex-intro (pt "xl"))
(use "InitEqD")
(save "SubVarEqd")

(set-goal "all xls,xl (Rev(xls++(xl:)) eqd xl::(Rev xls))")
(ind)
(ng #t)
(assume "xl")
(use "InitEqD")
(assume "xl" "xls")
(assume "Ih")
(ng #t)
(assume "xl0")
(ng #t)
(simp "Ih")
(ng #t)
(use "InitEqD")
(save "ListRevAppd2")