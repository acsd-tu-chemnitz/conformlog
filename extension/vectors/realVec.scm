(display "loading realVec.scm")(newline)


(add-var-name "vV" "wV" (py "list rea"))
(add-var-name "xV" (py "(list rea) yprod pos"))
(add-var-name "vVs" "wVs" (py "list (nat=>rat)"))
(add-var-name "MVs" "NVs" (py "list (pos=>nat)"))



;; vectorized IDPC
(add-ids (list ( list "CauchyVector" (make-arity (py "list (nat=>rat)") (py "list (pos=>nat)"))))
    '("all as,M(Cauchy as M -> CauchyVector (as:) (M:))" "CauchyVectorOneIntro")
    '("all vVs,MVs (
        Succ Zero < Lh vVs ->
        Lh vVs = Lh MVs->
        Cauchy (Head vVs) (Head MVs) ->
        CauchyVector (Tail vVs)  (Tail MVs) ->
        CauchyVector vVs MVs)" "CauchyVectorIntro")
     '("all vVs,MVs (
        Zero = Lh vVs ->
        Zero = Lh MVs->
        CauchyVector vVs MVs)" "CauchyVectorNilIntro")
   )

(add-ids (list ( list "MonVector" (make-arity (py "list (pos=>nat)"))))
    '("all M(Mon M -> MonVector (M:))" "MonVectorOneIntro")
    '("all MVs (
        Succ Zero < Lh MVs ->
        Mon (Head MVs) ->
        MonVector (Tail MVs) ->
        MonVector MVs)" "MonVectorIntro")
    '("all MVs (
        Zero = Lh MVs->
        MonVector MVs)" "MonVectorNilIntro")
   )






(set-goal "all vVs,MVs( CauchyVector vVs MVs -> Zero < Lh MVs -> Zero < Lh vVs)")
(assume "vVs" "MVs")
(elim)
(auto)
(assume "vVs0" "MVs0")
(assume "Lhcond1" "Lhcond2" "HeadCond" "TailCond")
(assume "Lhcond3" "Lhcond4")
(use "NatLtTrans" (pt "Succ Zero"))
(auto)
(assume "vVs0" "MVs0" "Lhcond1" "Lhcond2" )
(simp "<-" "Lhcond2")
(ng #t)
(use "Efq")
(save "CauchyVectorElim0")

(set-goal "all vVs,MVs( CauchyVector vVs MVs ->  Zero < Lh vVs -> Zero < Lh MVs )")
(assume "vVs" "MVs")
(elim)
(auto)
(assume "vVs0" "MVs0")
(strip)
(simp "<-" 3)
(auto)
(assume "vVs0" "MVs0" "Lhcond1" "Lhcond2" )
(simp "<-" "Lhcond1")
(ng #t)
(use "Efq")
(save "CauchyVectorElim1")


(set-goal "all vVs,MVs( CauchyVector vVs MVs -> Lh vVs = Lh MVs)")
(assume "vVs" "MVs")
(elim)
(auto)
(assume "vVs0" "MVs0")
(assume "Lhcond1" "Lhcond2")
(simp "<-" "Lhcond1")
(simp "<-" "Lhcond2")
(auto)
(save "CauchyVectorElim2")



(set-goal "all vVs,MVs( CauchyVector vVs MVs -> Zero < Lh vVs -> Cauchy (Head vVs) (Head MVs))")
(assume "vVs" "MVs")
(elim)
(auto)
(assume "vVs0" "MVs0")
(assume "Lhcond" "Lhcond1")
(simp "<-" "Lhcond")
(ng #t)
(use "Efq")
(save "CauchyVectorElim3")

(set-goal "all vVs,MVs(  CauchyVector vVs MVs -> 1<Lh vVs -> CauchyVector (Tail vVs)  (Tail MVs))")
(assume "vVs" "MVs")
(elim)
(ng #t)
(assume "as" "M" "CauchyAs")
(use "Efq")
(auto)
(assume "vVs0" "MVs0" "Lhcond1" "Lhcond2")
(simp "<-" "Lhcond1")
(ng #t)
(use "Efq")
(save "CauchyVectorElim4")


(set-goal "all as,M,vVs,MVs(  CauchyVector (as::vVs) (M::MVs) ->  CauchyVector (vVs)  (MVs))")
(assume "as" "M" "vVs" "MVs")
(assume "Cv")
(cases (pt "Zero=Lh vVs"))
(inst-with-to "CauchyVectorElim2" (pt "(as::vVs)") (pt "(M::MVs)") "CauchyVectorInst")
(ng "CauchyVectorInst")
(assume "cond1")
(use "CauchyVectorNilIntro")
(auto)
(simp "<-" "CauchyVectorInst")
(auto)
(assume "LhcondF")
(assert "Zero<(ListLength nat=>rat)vVs")
(use "NatNotEqZeroToLt")
(assume "Absurd")
(use "LhcondF")
(simp "Absurd")
(auto)
(assume "Case1")
(inst-with-to "CauchyVectorElim4" (pt "(as::vVs)") (pt "(M::MVs)") "CauchyVectorInst")
(ng)
(auto)
(save "CauchyVectorElim4Elem")




(set-goal "all MVs( MonVector  MVs ->  Zero<Lh MVs -> Mon (Head MVs))")
(assume "MVs")
(elim)
(auto)
(assume "MVs1")
(assume "1")
(simp "<-" "1")
(ng #t)
(use "Efq")
(save "MonVectorElim1")

(set-goal "all MVs(  MonVector  MVs -> 1<Lh MVs -> MonVector  (Tail MVs))")
(assume "MVs")
(elim)
(ng #t)
(assume "M" "MonM")
(use "Efq")
(auto)
(assume "MVs0")
(assume "Lhcond")
(simp "<-" "Lhcond")
(ng #t)
(use "Efq")
(save "MonVectorElim2")


;; add algebra realVec
(add-algs "realVec" '("RealVecConstr" "list (nat=>rat)=>list (pos=>nat)=>realVec"))

;; totality predicates
(add-totality "realVec")
(add-totalnc "realVec")

;; var names for realVec
(add-var-name "xx" "yy" "zz" (py "realVec"))

;; totality of variables of totalrealvec

(set-goal "all xx TotalRealVec xx")
(cases)
(assume "vVs" "MVs")
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save "RealVecTotalVar")


;; destructor for sequences
(add-program-constant "RealVecSeqs" (py "realVec=>(list (nat => rat))") t-deg-zero 'const 1)

(add-token
 "seqs"
 'postfix-op
 (lambda (x)
   (mk-term-in-app-form
    (make-term-in-const-form (pconst-name-to-pconst "RealVecSeqs"))
    x)))


(add-computation-rules
 "(RealVecConstr vVs MVs)seqs" "vVs")

(set-totality-goal "RealVecSeqs")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "ListTotalVar")
(save-totality)


(add-program-constant "RealVecMods" (py "realVec => (list (pos=>nat))") t-deg-zero 'const 1)

(add-token
 "mods"
 'postfix-op
 (lambda (x)
   (mk-term-in-app-form
    (make-term-in-const-form (pconst-name-to-pconst "RealVecMods"))
    x)))

(add-computation-rules
 "(RealVecConstr vVs MVs)mods" "MVs")

(set-totality-goal "RealVecMods")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng)
(use "ListTotalVar")
;; Proof finished.
(save-totality)


(add-ids (list ( list "RealVector" (make-arity (py "realVec"))))
    '("all xx(CauchyVector (xx seqs) (xx mods) -> MonVector (xx mods) -> RealVector xx)" "RealVectorIntro")
   )




(set-goal "RealVector( RealVecConstr (([n] (1#2))::([n] (1#8)):) (([p] Zero)::([p] Zero):))")
(use "RealVectorIntro")
(use "CauchyVectorIntro")
(auto)
(ng #t)
(use "CauchyIntro")
(auto)
(ng #t)
(use "CauchyVectorOneIntro")
(use "CauchyIntro")
(auto)
(use "MonVectorIntro")
(ng #t)
(auto)
(ng #t)
(use "MonIntro")
(search)
(ng #t)
(use "MonVectorOneIntro")
(use "MonIntro")
(search)
(save "IDPCRealVectorTest")

(set-goal "all xx (RealVector xx->CauchyVector (xx seqs) (xx mods))")
(assume "xx")
(elim)
(auto)
(save "RealVectorElim0")

(set-goal "all xx (RealVector xx->MonVector (xx mods))")
(assume "xx")
(elim)
(auto)
(save "RealVectorElim1")

(set-goal "all vVs,MVs(RealVector (RealVecConstr vVs MVs) -> CauchyVector vVs MVs)")
(assume "vVs" "MVs")
(assume "Rv")
(inst-with-to "RealVectorElim0" (pt "(RealVecConstr vVs MVs)") "ElimInst")
(ng)
(auto)
(save "RealVectorConstrElim0")

(set-goal "all vVs,MVs(RealVector (RealVecConstr vVs MVs) -> MonVector MVs)")
(assume "vVs" "MVs")
(assume "Rv")
(inst-with-to "RealVectorElim1" (pt "(RealVecConstr vVs MVs)")  "ElimInst")
(ng)
(auto)
(save "RealVectorConstrElim1")

;; vectorized IDPC
(add-ids (list ( list "PosVectorComponents" (make-arity (py "list (nat=>rat)") (py "list (pos=>nat)") (py "pos"))))
'("all as,M,p(RealPos (RealConstr as M) p -> PosVectorComponents (as:) (M:) p)" "PosVectorComponentsOneIntro")
'("all vVs,MVs,p (
    Succ Zero < Lh vVs ->
    Lh vVs = Lh MVs->
    RealPos(RealConstr (Head vVs) (Head MVs)) p ->
    PosVectorComponents (Tail vVs)  (Tail MVs) p->
    PosVectorComponents vVs MVs p)" "PosVectorComponentsIntro")
 '("all vVs,MVs,p (
    Zero = Lh vVs ->
    Zero = Lh MVs->
    PosVectorComponents vVs MVs p)" "PosVectorComponentsNilIntro")
)

; (set-goal "PosVectorComponents (([n] 1)::([n] 1):) (([p] Zero)::([p] Zero):) One ")
; (ng #t)
; (use "PosVectorComponentsIntro")
; (ng #t)
; (use "Truth")
; (ng #t)
; (use "Truth")
; (ng #t)
; (use "Truth")
; (ng #t)
; (use "PosVectorComponentsOneIntro")
; (ng #t)
; (use "Truth")
; (save "PosVectorComponentsIDPCTest")


(add-ids (list ( list "PosVector" (make-arity (py "realVec") (py "pos"))))
'("all xx,p(PosVectorComponents (xx seqs) (xx mods) p -> PosVector xx p)" "PosVectorIntro")
)

(set-goal "all xx,p (PosVector xx p -> PosVectorComponents (xx seqs) (xx mods) p)")
(assume "xx" "p")
(elim)
(auto)
(save "PosVectorElim0")

(set-goal "all vVs,MVs,p (PosVector (RealVecConstr vVs MVs) p  -> PosVectorComponents (vVs) (MVs) p)")
(assume "vVs" "MVs" "p")
(assume "PosV")
(inst-with-to "PosVectorElim0" (pt "(RealVecConstr vVs MVs)") (pt "p") "Inst")
(use "Inst")
(auto)
(save "PosVectorConstrElim0")




(add-program-constant "ListReaToSeqs" (py "list rea => list(nat=>rat)"))
(add-computation-rules "ListReaToSeqs (Nil rea)" "((Nil (nat=>rat)))"
"ListReaToSeqs (x::vV)" "(x seq)::ListReaToSeqs(vV)"
)
(set-totality-goal "ListReaToSeqs")
(use "AllTotalElim")
(ind)
(ng #t)
(use "ListTotalVar")
(assume "x" "vV")
(ng #t)
(assume "TL")
(use "TotalListCons")
(use "AllTotalElim")
(assume "n")
(use "RatTotalVar")
(use "TL")
(save-totality)

(add-program-constant "ListReaToMods" (py "list rea => list(pos=>nat)"))
(add-computation-rules "ListReaToMods (Nil rea)" "((Nil (pos=>nat)))"
"ListReaToMods (x::vV)" "(x mod)::ListReaToMods(vV)"
)
(set-totality-goal "ListReaToMods")
(use "AllTotalElim")
(ind)
(ng #t)
(use "ListTotalVar")
(assume "x" "vV")
(ng #t)
(assume "TL")
(use "TotalListCons")
(use "AllTotalElim")
(assume "p")
(use "NatTotalVar")
(use "TL")
(save-totality)


(add-program-constant "ListReaToRealVector" (py "list rea => realVec"))
(add-computation-rules "ListReaToRealVector vV" "RealVecConstr (ListReaToSeqs vV) (ListReaToMods vV)  ")


(set-totality-goal "ListReaToRealVector")
(use "AllTotalElim")
(ng #t)
(assume "vV")
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)

(add-program-constant "RealVectorDataToListRea" (py "list(nat=>rat) => list(pos=>nat) => list rea")) 
(add-computation-rules "RealVectorDataToListRea (Nil (nat=>rat)) (Nil (pos=>nat))" "(Nil rea)"
"RealVectorDataToListRea (vVs) (Nil (pos=>nat))" "(Nil rea)"
"RealVectorDataToListRea (Nil (nat=>rat)) (MVs)" "(Nil rea)"
"RealVectorDataToListRea (as::vVs) (M::MVs)" "((RealConstr as M)::RealVectorDataToListRea vVs MVs)")

(set-totality-goal "RealVectorDataToListRea")
(use "AllTotalElim")
(ind)
(use "AllTotalElim")
(ind)
(ng #t)
(use "ListTotalVar")
(assume "M")
(ng #t)
(strip)
(ng #t)
(use "ListTotalVar")
(assume "as" "vVs" "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(use "ListTotalVar")
(ng #t)
(assume "M" "MVs")
(use "TotalListCons")
(use "ReaTotalVar")
(use "Ih")
(use "ListTotalVar")
(save-totality)

(add-program-constant "RealVectorToListRea" (py "realVec=> list rea"))
(add-computation-rules "RealVectorToListRea xx" "RealVectorDataToListRea (xx seqs) (xx mods)")

(set-totality-goal "RealVectorToListRea")
(use "AllTotalElim")
(assume "xx")
(ng #t)
(use "ListTotalVar")
(save-totality)


(add-program-constant "SeqsPlus" (py "list(nat=>rat) => list(nat=>rat) => list(nat=>rat) "))
(add-computation-rules "SeqsPlus (Nil (nat=>rat)) (Nil (nat=>rat))" "(Nil (nat=>rat))"
                       "SeqsPlus (Nil (nat=>rat)) (vVs)" "(Nil (nat=>rat))"
                       "SeqsPlus vVs (Nil (nat=>rat))" "(Nil (nat=>rat))"
                       "SeqsPlus (as::vVs1) (bs::vVs2)" "([n] as n + bs n)::(SeqsPlus vVs1 vVs2)")

(set-totality-goal "SeqsPlus")
(use "AllTotalElim")
(ind)
(ng #t)
(strip)
(use "ListTotalVar")
(assume "as" "vVs")
(assume "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(use "ListTotalVar")
(assume "as0" "vVs0")
(ng #t)
(use "TotalListCons")
(use "AllTotalElim")
(assume "n")
(use "RatTotalVar")
(use "Ih")
(use "ListTotalVar")
(save-totality)

;;(add-token-and-type-to-name "sqpl" (py "list(nat=>rat)") "SeqsPlus")
;;(add-display (py "list(nat=>rat)") (make-display-creator "SeqsPlus" "sqpl" 'add-op))
(add-infix-display-string "SeqsPlus" "sqpl" 'add-op)

(add-program-constant "ModsPlus" (py "list(pos=>nat) => list(pos=>nat) => list(pos=>nat) "))
(add-computation-rules "ModsPlus (Nil (pos=>nat)) (Nil (pos=>nat))" "(Nil (pos=>nat))"
                       "ModsPlus (Nil (pos=>nat)) (MVs)" "(Nil (pos=>nat))"
                       "ModsPlus MVs (Nil (pos=>nat))" "(Nil (pos=>nat))"
                       "ModsPlus (M::MVs1) (N::MVs2)" "([p] M(PosS p)max N(PosS p))::(ModsPlus MVs1 MVs2)")


(set-totality-goal "ModsPlus")
(use "AllTotalElim")
(ind)
(ng #t)
(strip)
(use "ListTotalVar")
(assume "M" "MVs")
(assume "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(use "ListTotalVar")
(assume "M0" "MVs1")
(ng #t)
(use "TotalListCons")
(use "AllTotalElim")
(ng #t)
(assume "p")
(use "NatTotalVar")
(use "Ih")
(use "ListTotalVar")
(save-totality)


;;(add-token-and-type-to-name "+_m" (py "list(pos=>nat)") "ModsPlus")
;;(add-display (py "list(pos=>nat)") (make-display-creator "ModsPlus" "+_m" 'add-op))

(add-infix-display-string "ModsPlus" "mpl" 'add-op)


;;(add-token-and-type-to-name "+_r" (py "realVec") "RealVectorPlus")
;;add-display (py "realVec") (make-display-creator "RealVectorPlus" "+_r" 'add-op))

(add-program-constant "RealVectorPlus" (py "realVec=>realVec=>realVec"))

(add-item-to-algebra-edge-to-embed-term-alist-star
 "rea" "list rea"
 (let ((var (make-var (make-alg "rea") -1 t-deg-one "")))
   (make-term-in-abst-form
    var (mk-term-in-app-form
    (make-term-in-const-form
     (let* ((constr (constr-name-to-constr "Cons"))
	    (tvars (const-to-tvars constr))
	    (subst (make-substitution tvars (list (alg-form-to-name var)))))
       (const-substitute constr subst #f)))
    (make-term-in-var-form var)
    (make-term-in-const-form
     (let* ((constr (constr-name-to-constr "Nil"))
	    (tvars (const-to-tvars constr))
	    (subst (make-substitution tvars (list (alg-form-to-name var)))))
       (const-substitute constr subst #f)))))))

(alg-le? (make-alg "rea") (make-alg "list rea"))

(add-item-to-algebra-edge-to-embed-term-alist-star
 "list rea" "realVec"
 (let ((var (make-var (py "list rea") -1 t-deg-one "")))
   (make-term-in-abst-form
    var (mk-term-in-app-form
         (make-term-in-const-form
           (pconst-name-to-pconst "ListReaToRealVector"))
           (make-term-in-var-form var)
          ))))
(alg-le? (make-alg "list rea") (make-alg "realVec"))




(add-program-constant "RatVecToRealVectorAux" (py "(list rat)=>(list rea)"))
(add-computation-rules
  "RatVecToRealVectorAux (a::eV)" "(RealConstr ([n]a) ([p]Zero))::(RatVecToRealVectorAux eV)"
  "RatVecToRealVectorAux (Nil rat)" "(Nil rea)")

(set-totality-goal "RatVecToRealVectorAux")
(assume "eV^1" "TeV1")
(elim "TeV1")
(ng #t)
(use "TotalListNil")
(use "AllTotalElim")
(assume "a")
(assume "eV^2" "TeV2")
(assume "IS")
(ng #t)
(use "TotalListCons")
(use "ReaTotalVar")
(use "IS")
(save-totality)

(add-program-constant "RatVecToRealVector" (py "(ratVec)=>(realVec)"))
(add-computation-rules
  "RatVecToRealVector e" "ListReaToRealVector(RatVecToRealVectorAux(e values))")

(set-totality-goal "RatVecToRealVector")
(use "AllTotalElim")
(assume "e")
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)

(add-item-to-algebra-edge-to-embed-term-alist-star
 "list rat" "list rea"
 (let ((var (make-var (py "list rat") -1 t-deg-one "")))
   (make-term-in-abst-form
    var (mk-term-in-app-form
         (make-term-in-const-form
           (pconst-name-to-pconst "RatVecToRealVectorAux"))
           (make-term-in-var-form var)
          ))))

(alg-le? (make-alg "list rat") (make-alg "list rea"))

(add-item-to-algebra-edge-to-embed-term-alist-star
 "ratVec" "realVec"
 (let ((var (make-var (py "ratVec") -1 t-deg-one "")))
   (make-term-in-abst-form
    var (mk-term-in-app-form
         (make-term-in-const-form
           (pconst-name-to-pconst "RatVecToRealVector"))
           (make-term-in-var-form var)
          ))))



(alg-le? (make-alg "ratVec") (make-alg "realVec"))





; (add-token-and-type-to-name "+" (py "realVec") "RealVectorPlus")
; (add-display (py "realVec") (make-display-creator "RealVectorPlus" "+" 'add-op))

; (add-computation-rules "ReaVecPlus (Nil rea) (Nil rea)" "(Nil rea)"
;                        "ReaVecPlusAux (Nil rea) (wV2)" "(Nil rea)"
;                        "ReaVecPlusAux wV1 (Nil rea)" "(Nil rea)"
;                        "ReaVecPlusAux (x::wV1) (y::wV2)" "[if (Lh (x::wV1) = Lh(y::wV2)) ((x+y)::(ReaVecPlusAux wV1 wV2)) (Nil rea)]")



(add-program-constant "RealVectorUMinus" (py "realVec=>realVec"))

;;(add-program-constant "RealVectorEq" (py "reaVec=>reaVec=>boole"))
(add-program-constant "RealVectorDim" (py "realVec=>nat"))

(add-program-constant "RealVectorCDim" (py "realVec=>nat"))

;; (add-program-constant "RealVectorToList" (py "realVec=>list rea"))
(add-program-constant "RealVectorPlus" (py "realVec=>realVec=>realVec"))
(add-program-constant "RealVectorUMinus" (py "realVec=>realVec"))
(add-program-constant "RealVectorSTimes" (py "rea=>realVec=>realVec"))
(add-program-constant "RealVectorDTimes" (py "realVec=>realVec=>rea"))
(add-program-constant "RealVectorMaxNorm" (py "realVec=>rea"))
(add-program-constant "RealVectorOneNorm" (py "realVec=>rea"))
(add-program-constant "RealVectorTwoNorm" (py "realVec=>rea"))
(add-program-constant "RealVectorNth" (py "realVec=>nat=>rea"))

(add-token-and-type-to-name "+" (make-alg  "realVec") "RealVectorPlus")
(add-display (py "realVec") (make-display-creator "RealVectorPlus" "+" 'add-op))

(add-token-and-type-to-name "~" (make-alg  "realVec") "RealVectorUMinus")
(add-display (py "realVec") (make-display-creator1 "RealVectorUMinus" "~" 'prefix-op))

(add-token-and-type-to-name "dim" (py "realVec") "RealVectorDim")
(add-display (py "nat") (make-display-creator1 "RealVectorDim" "dim" 'postfix-op))

(add-token-and-type-to-name "*" (py "realVec") "RealVectorDTimes")
(add-display (py "rea") (make-display-creator "RealVectorDTimes" "*" 'mul-op))

(add-token-and-type-to-name "|_" (py "realVec") "RealVectorMaxNorm")
(add-display (py "rea") (make-display-creator1 "RealVectorMaxNorm" "|_" 'prefix-op))

(add-token-and-type-to-name "||_" (py "realVec") "RealVectorOneNorm")
(add-display (py "rea") (make-display-creator1 "RealVectorOneNorm" "||_" 'prefix-op))

;;(add-token-and-type-to-name "||2" (py "realVec") "RealVectorTwoNorm")
;;(add-display (py "rea") (make-display-creator1 "RealVectorTwoNorm" "||2" 'prefix-op))


(add-token-and-type-to-name "values" (py "realVec") "RealVectorToListRea")
(add-display (py "list rea") (make-display-creator1 "RealVectorToListRea" "values" 'postfix-op))

(add-token-and-type-to-name "__"  (py "realVec") "RealVectorNth")
(add-display (py "rea") (make-display-creator "RealVectorNth" "__" 'mul-op))

(add-token-and-type-to-name "cdim" (py "realVec") "RealVectorCDim")
(add-display (py "nat") (make-display-creator "RealVectorCDim" "cdim" 'postfix-op))

(pp (pt "xx+yy"))
(pp (pt "~xx"))
(pp (pt "xx dim"))
;;(pp (pt "xx cdim"))
(pp (pt "xx*xx"))
(pp (pt "|_xx"))
(pp (pt "||_xx"))
(pp  (pt "xx values"))
(pp (pt "xx__n"))



(add-computation-rules "xx + yy" "RealVecConstr (xx seqs sqpl yy seqs) (xx mods mpl yy mods)")


(set-totality-goal "RealVectorPlus")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(use "AllTotalElim")
(cases)
(assume "vVs0" "MVs0")
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)

(add-program-constant "SeqsUMinus" (py "list(nat=>rat)=> list(nat=>rat)"))

(add-computation-rules "SeqsUMinus (Nil (nat=>rat))" "(Nil (nat=>rat))"
                       "SeqsUMinus (as::vVs)" "([n] ~(as n))::SeqsUMinus(vVs)")

(set-totality-goal "SeqsUMinus")
(use "AllTotalElim")
(ind)
(use "ListTotalVar")
(assume "as")
(assume "vVs" "Ih")
(ng #t)
(use "TotalListCons")
(use "AllTotalElim")
(ng #t)
(assume "n")
(use "RatTotalVar")
(use "Ih")
(save-totality)


(add-computation-rules "~xx" "RealVecConstr (SeqsUMinus xx seqs) (xx mods)")
(set-totality-goal "RealVectorUMinus")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)


(add-program-constant "RealVectorOneNormAux" (py "list(nat=>rat) => list(pos=>nat) => rea"))
(add-computation-rules "RealVectorOneNormAux (Nil (nat=>rat)) (Nil (pos=>nat))" "0"
"RealVectorOneNormAux (vVs) (Nil (pos=>nat))" "0"
"RealVectorOneNormAux (Nil (nat=>rat)) (MVs)" "0"
"RealVectorOneNormAux (as::vVs) (M::MVs)" "(abs(RealConstr as M)+RealVectorOneNormAux vVs MVs)")

(set-totality-goal "RealVectorOneNormAux")
(use "AllTotalElim")
(ind)
(use "AllTotalElim")
(ng #t)
(assume "MVs")
(use "ReaTotalVar")
(assume "as" "vVs")
(assume "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(use "ReaTotalVar")
(assume "M" "MVs")
(ng #t)
(use "RealPlusTotal")
(use "ReaTotalVar")
(use "Ih")
(use "ListTotalVar")
(save-totality)

(add-computation-rules "RealVectorOneNorm xx" "RealVectorOneNormAux (xx seqs) (xx mods)")
(set-totality-goal "RealVectorOneNorm")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "ReaTotalVar")
(save-totality)

(add-program-constant "RealVectorMaxNormAux" (py "list(nat=>rat) => list(pos=>nat) => rea"))
(add-computation-rules "RealVectorMaxNormAux (Nil (nat=>rat)) (Nil (pos=>nat))" "0"
"RealVectorMaxNormAux (vVs) (Nil (pos=>nat))" "0"
"RealVectorMaxNormAux (Nil (nat=>rat)) (MVs)" "0"
"RealVectorMaxNormAux (as::vVs) (M::MVs)" "(abs(RealConstr as M) max RealVectorMaxNormAux vVs MVs)")

(set-totality-goal "RealVectorMaxNormAux")
(use "AllTotalElim")
(ind)
(use "AllTotalElim")
(ng #t)
(assume "MVs")
(use "ReaTotalVar")
(assume "as" "vVs")
(assume "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(use "ReaTotalVar")
(assume "M" "MVs")
(ng #t)
(use "RealMaxTotal")
(use "ReaTotalVar")
(use "Ih")
(use "ListTotalVar")
(save-totality)

(add-computation-rules "|_ xx" "RealVectorMaxNormAux (xx seqs) (xx mods)")
(set-totality-goal "RealVectorMaxNorm")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "ReaTotalVar")
(save-totality)



(set-goal "all x,y,n(x seq n max y seq n == (x max y) seq n)")
(cases)
(assume "as" "M")
(cases)
(assume "as0" "M0")
(ng #t)
(auto)
(save "RealsSeqMaxElim")

(set-goal "all xx RealNNegS (|_(xx))")
(cases)
(ind)
(assume "MVs")
(use "RealNNegSIntro")
(ng #t)
(auto)
(assume "as" "vVs")
(assume "Ih")
(cases)
(ng #t)
(use "RealNNegSIntro")
(auto)
(assume "M" "MVs")
(use "RealNNegSIntro")
(ng #t)
(assume "n")
(simprat "<-" "RealsSeqMaxElim")
(use "RatLeTrans" (pt "abs(as n)"))
(auto)
(ng #t)
(use "RatMaxUB1")
(save "RealNNegSMaxNorm")









(add-computation-rules "xx__n" "(xx values)__n")
(set-totality-goal "RealVectorNth")
(use "AllTotalElim")
(assume "xx")
(use "AllTotalElim")
(assume "n")
(use "ReaTotalVar")
(save-totality)

(add-computation-rules "RealVectorCDim xx" "[if (Lh(xx values)=Lh (xx mods)) (Lh(xx values)) Zero]")

(set-totality-goal "RealVectorCDim")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(cases (pt "((ListLength rea)(RealVectorDataToListRea vVs MVs)=
          (ListLength pos=>nat)MVs)"))
(assume "case1")
(ng #t)
(use "ListLengthTotal")
(use "RealVectorDataToListReaTotal")
(use "ListTotalVar")
(use "ListTotalVar")
(assume "case2")
(ng #t)
(use "NatTotalVar")
(save-totality)


(set-totality-goal "RealVectorCDim")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(cases (pt "((ListLength rea)(RealVectorDataToListRea vVs MVs)=
          (ListLength pos=>nat)MVs)"))
(assume "case1")
(ng #t)
(use "ListLengthTotal")
(use "RealVectorDataToListReaTotal")
(use "ListTotalVar")
(use "ListTotalVar")
(assume "case2")
(ng #t)
(use "NatTotalVar")
(save-totality)

(add-program-constant "RealVectorSeqModDim" (py "realVec=>nat"))

(add-computation-rules "RealVectorSeqModDim xx" "[if (Lh(xx seqs)=Lh (xx mods)) (Lh(xx seqs)) Zero]")


(set-totality-goal "RealVectorSeqModDim")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "NatTotalVar")
(save-totality)

(add-computation-rules "xx dim" "RealVectorSeqModDim xx")
(set-totality-goal "RealVectorDim")
(use "AllTotalElim")
(assume "xx")
(use "NatTotalVar")
(save-totality)



(pp (nt (pt "RealVectorOneNorm (RealVecConstr (as::bs::cs:) (M::N::L:) + ~(RealVecConstr (as1::bs1::cs1:) (M1::N1::L1:)))")))
(pp (nt (pt "RealVectorMaxNorm (RealVecConstr (as::bs::cs:) (M::N::L:) + ~(RealVecConstr (as1::bs1::cs1:) (M1::N1::L1:)))")))
(deanimate "RealApprox")
(pp(nt(pt "cRealApprox (RealVectorMaxNorm (RealVecConstr (as::bs::cs:) (M::N::L:) + ~(RealVecConstr (as1::bs1::cs1:) (M1::N1::L1:)))) 1")))

;;(remove-idpc-name "RealVectorCompatible")

(add-ids (list ( list "RealVectorCompatible" (make-arity (py "realVec") (py "realVec"))))
    '("all xx,yy(RealVector xx -> RealVector yy -> xx dim = yy dim -> RealVectorCompatible xx yy)" "RealVectorCompatibleIntro")
   )

(set-goal "all xx,yy(RealVectorCompatible xx yy -> RealVector xx)")
(assume "xx" "yy")
(elim)
(auto)
(save "RealVectorCompatibleElim0")

(set-goal "all xx,yy(RealVectorCompatible xx yy -> RealVector yy)")
(assume "xx" "yy")
(elim)
(auto)
(save "RealVectorCompatibleElim1")

(set-goal "all xx,yy(RealVectorCompatible xx yy -> xx dim = yy dim)")
(assume "xx" "yy")
(elim)
(auto)
(save "RealVectorCompatibleElim2")

;;(remove-idpc-name "RealVectorEq")

(add-ids
 (list (list "RealVectorEq" (make-arity (py "realVec") (py "realVec"))))
 '("all xx,yy(RealVectorCompatible xx yy ->
    all p cRealApprox (|_(xx + ~yy))p<=(1#2**p) ->
    RealVectorEq xx yy)" "RealEqApproxIntro")
    )

;;(remove-idpc-name "RealVectorEqComponents")

(add-ids
 (list (list "RealVectorEqComponents" (make-arity (py "realVec") (py "realVec"))))
 '("all xx,yy(RealVectorCompatible xx yy ->
    all n (n<xx dim -> xx__n===yy__n) ->
    RealVectorEqComponents xx yy)" "RealVectorEqComponentsIntro")
    )



(set-goal "all xx,yy (RealVectorEqComponents xx yy -> RealVectorCompatible xx yy)")
(assume "xx" "yy")
(elim)
(auto)
(save "RealVectorEqComponentsElim0")

(set-goal "all xx,yy (RealVectorEqComponents xx yy -> all n (n<xx dim -> xx__n===yy__n) )")
(assume "xx" "yy")
(elim)
(auto)
(save "RealVectorEqComponentsElim1")


(add-program-constant "ZerosRealVectorSeqs" (py "nat=>list (nat=>rat )"))

(add-computation-rules "ZerosRealVectorSeqs Zero" "(Nil (nat=>rat))"
                        "ZerosRealVectorSeqs (Succ n)" "([n] 0#1 )::ZerosRealVectorSeqs n"
)
 
(set-totality-goal "ZerosRealVectorSeqs")
(use "AllTotalElim")
(ind)
(use "ListTotalVar")
(assume "n" "Ih")
(ng #t)
(use "TotalListCons")
(strip)
(use "RatTotalVar")
(use "Ih")
(save-totality)

(add-program-constant "ZerosRealVectorMods" (py "nat=>list (pos=>nat )"))

(add-computation-rules "ZerosRealVectorMods Zero" "(Nil (pos=>nat))"
                        "ZerosRealVectorMods (Succ n)" "([p] Zero)::ZerosRealVectorMods n"
)

(set-totality-goal "ZerosRealVectorMods")
(use "AllTotalElim")
(ind)
(use "ListTotalVar")
(assume "n" "Ih")
(ng #t)
(use "TotalListCons")
(strip)
(use "NatTotalVar")
(use "Ih")
(save-totality)



(add-program-constant "ZerosRealVector" (py "nat=>realVec"))
(add-computation-rules "ZerosRealVector n" "RealVecConstr (ZerosRealVectorSeqs n) ( ZerosRealVectorMods n)")

(set-totality-goal "ZerosRealVector")
(use "AllTotalElim")
(ind)
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(assume "n" "Ih")
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)

(set-goal "all n ( RealVector (ZerosRealVector n))")
(ind)
(ng #t)
(use "RealVectorIntro")
(use "CauchyVectorNilIntro")
(ng #t)
(auto)
(use "MonVectorNilIntro" (pt "vVs"))
(ng #t)
(auto)
(assume "n" "Ih")
(ng #t)
(use "RealVectorIntro")
(ng #t)
(cases (pt "n=Zero"))
(assume "case1")
(simp "case1")
(ng #t)
(use "CauchyVectorOneIntro")
(use "CauchyIntro")
(assume "p" "n0" "m0" "0len" "0lem")
(ng #t)
(use "Truth")
(assume "n=Zero -> F")
(use "CauchyVectorIntro")
(ng #t)
(use "NatLtLeTrans" (pt "(ListLength nat=>rat)(ZerosRealVectorSeqs (Succ Zero))"))
(ng #t)
(use "Truth")
(ng #t)
(simp (pf "(ListLength nat=>rat)(ZerosRealVectorSeqs n)=n"))
(use "NatEqZeroFalseToOne")
(auto)
(assert "all n (ListLength nat=>rat)(ZerosRealVectorSeqs n)=n")
(ind)
(ng #t)
(auto)
(ng #t)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(ng #t)
(simp "<-" "ZerosRealVector0CompRule")
(use "Ih")
(ng #t)
(use "CauchyIntro")
(assume "p" "n0" "m0" "0len" "0lem")
(ng #t)
(use "Truth")
(ng #t)
(use "RealVectorConstrElim0")
(simp "<-" "ZerosRealVector0CompRule")
(use "Ih")
(ng #t)
(cases (pt "n=Zero"))
(assume "case1")
(simp "case1")
(ng #t)
(use "MonVectorOneIntro")
(use "MonIntro")
(auto)
(assume "n=Zero -> F")
(use "MonVectorIntro")
(ng #t)
(use "NatLtLeTrans" (pt "(ListLength pos=>rat)(ZerosRealVectorMods (Succ Zero))"))
(ng #t)
(use "Truth")
(ng #t)
(simp (pf "(ListLength pos=>nat)(ZerosRealVectorMods n)=n"))
(use "NatEqZeroFalseToOne")
(auto)
(assert "all n (ListLength pos=>nat)(ZerosRealVectorMods n)=n")
(ind)
(auto)
(ng #t)
(use "MonIntro")
(auto)
(ng #t)
(use "RealVectorConstrElim1" (pt "ZerosRealVectorSeqs n"))
(simp "<-" "ZerosRealVector0CompRule")
(use "Ih")
(save "ZerosRealVectorReal")


(set-goal "all n( (ZerosRealVector n) dim = n )")
(ind)
(ng #t)
(auto)
(assume "n" "Ih")
(ng #t)
(ng "Ih")
(cut "(ZerosRealVector n)dim=n")
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "ZerosRealVectorReal")
(use "Ih")
(save "ZerosRealVectorDim")

(set-goal "all xx (RealVector xx -> RealVectorCompatible xx(ZerosRealVector xx dim))")
(assume "xx" "Rxx")
(use "RealVectorCompatibleIntro")
(auto)
(use "ZerosRealVectorReal")
(simp "ZerosRealVectorDim")
(auto)
(save "ZerosRealVectorCompatible")



(add-token-and-type-to-name "===" (py "realVec") "RealVectorEqComponents")
(add-idpredconst-display "RealVectorEqComponents" 'pred-infix "===")

(set-goal "(ZerosRealVector 2) === (RealVecConstr(([n0]0)::([n0]0):) (([p0]Zero)::([p0]Zero):)) ")
(use "RealVectorEqComponentsIntro")
(use "RealVectorCompatibleIntro")
(use "ZerosRealVectorReal")
(auto)
(ng #t)
(inst-with-to "ZerosRealVectorReal" (pt "Succ(Succ Zero)") "Inst")
(ng)
(use "Inst")
(auto)
(ind)
(ng #t)
(assume "T")
(use "RatEqvToRealEq")
(auto)
(assume "n" "Ih")
(ng #t)
(assume "n=Zero")
(simp "n=Zero")
(ng #t)
(use "RatEqvToRealEq")
(auto)
(save "RealVectorEqComponentsTest")

(add-program-constant "UniformEvalMapSeq" (py "list (nat=>rat)=>nat=>(list rat)"))

(add-computation-rules "UniformEvalMapSeq (Nil (nat=>rat)) n" "(Nil rat)"
                       "UniformEvalMapSeq (as::vVs) n" "(as n)::(UniformEvalMapSeq vVs n)") 

(set-totality-goal "UniformEvalMapSeq")
(use "AllTotalElim")
(ind)
(ng)
(strip)
(use "ListTotalVar")
(assume "as" "vVs")
(assume "Ih")
(use "AllTotalElim")
(assume "n")
(use "TotalListCons")
(use "RatTotalVar")
(use "Ih")
(use "NatTotalVar")
(save-totality)

(add-application (pt "UniformEvalMapSeq"))

(pt "(vVs n)")
(pt "xx seqs n")

(add-program-constant "UniformEvalMapMod" (py "list (pos=>nat)=>pos=>nat"))

(add-computation-rules "UniformEvalMapMod (Nil pos=>nat) p" "Zero"
                        "UniformEvalMapMod (M::MVs) p" "M p max UniformEvalMapMod MVs p")

(set-totality-goal "UniformEvalMapMod")
(use "AllTotalElim")
(ind)
(ng #t)
(use "AllTotalElim")
(assume "p")
(use "NatTotalVar")
(assume "M" "MVs")
(assume "Ih")
(use "AllTotalElim")
(assume "p")
(ng #t)
(use "NatMaxTotal")
(use "NatTotalVar")
(use "Ih")
(use "PosTotalVar")
(save-totality)


(add-application (pt "UniformEvalMapMod"))

(pt "(MVs p)")
(pt "xx mods p")


(set-goal "all vVs,n,m (Lh (vVs n)=Lh(vVs m))")
(ind)
(ng #t)
(assume "n" "m" )
(use "Truth")
(assume "as")
(assume "vVs" "Ih")
(assume "n" "m")
(ng #t)
(use "Ih")
(save "LhvVsSeq0")
;(add-rewrite-rule "Lh (vVs n)=Lh(vVs m)" "True")

(set-goal "all vVs,n,m (Lh (vVs n)=Lh(RatVecUMinusAux(vVs m)))")
(ind)
(ng #t)
(assume "n" "m" )
(use "Truth")
(assume "as")
(assume "vVs" "Ih")
(assume "n" "m")
(ng #t)
(use "Ih")
(save "LhvVsSeq1")
;(add-rewrite-rule "Lh(RatVecUMinusAux(vVs m))" "Lh (vVs n)")



;; useful for iterating the proofs
(set-goal "all vVs, MVs (RealVector(RealVecConstr vVs MVs) -> Lh vVs = Lh MVs)")
(assume "vVs" "MVs")
(assume "Rv")
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(auto)
(save "RealVectorElim2")

(set-goal "all vVs, MVs ( RealVector(RealVecConstr (vVs) (MVs)) -> 1<Lh vVs -> RealVector(RealVecConstr (Tail(vVs)) (Tail(MVs))))")
(assume "vVs" "MVs")
(assume "Rv")
(assume "Lhcond")
(use "RealVectorIntro")
(use "CauchyVectorElim4")
(use "RealVectorConstrElim0")
(use "Rv")
(auto)
(use "MonVectorElim2")
(use "RealVectorConstrElim1" (pt "vVs"))
(use "Rv")
(simp "<-" "RealVectorElim2" (pt "vVs"))
(auto)
(save "RealVectorConstrElim3")


(set-goal "all vVs,MVs ( Lh vVs = Lh MVs-> Lh (RealVectorDataToListRea vVs MVs) = Lh vVs )")
(ind)
(ng #t)
(auto)
(assume "as")
(assume "vVs" "Ih")
(ng)
(cases)
(ng #t)
(auto)
(save "LengthRealVectorDataToListReaToLength")

(set-goal "all vVs,MVs ( Zero<Lh (RealVectorDataToListRea vVs MVs) -> Zero< Lh vVs )")
(ind)
(assume "MVs")
(ng #t)
(auto)
(save "LengthRealVectorDataToListReaToLength1")

(set-goal "all vVs,MVs ( Zero<Lh (RealVectorDataToListRea vVs MVs) -> Zero< Lh MVs )")
(cut "all MVs,vVs ( Zero<Lh (RealVectorDataToListRea vVs MVs) -> Zero< Lh MVs )")
(auto)
(ind)
(assume "vVs")
(ng #t)
(auto)
(save "LengthRealVectorDataToListReaToLength2")


(set-goal "all n,vVs,MVs ( n<Lh (RealVectorDataToListRea vVs MVs) -> n< Lh MVs )")
(ind)
(cases)
(ng #t)
(assume "MVs")
(use "Efq")
(assume "as")
(assume "vVs")
(cases)
(ng #t)
(auto)
(ng #t)
(assume "n")
(assume "Ih")
(cases)
(ng #t)
(assume "MVs")
(use "Efq")
(assume "as")
(assume "vVs")
(cases)
(ng #t)
(auto)
(save "LengthRealVectorDataToListReaToLength3")

(set-goal "all n,vVs,MVs ( n<Lh (RealVectorDataToListRea vVs MVs) -> n< Lh vVs )")
(ind)
(cases)
(ng #t)
(assume "MVs")
(use "Efq")
(assume "as")
(assume "vVs")
(cases)
(ng #t)
(auto)
(ng #t)
(assume "n")
(assume "Ih")
(cases)
(ng #t)
(assume "MVs")
(use "Efq")
(assume "as")
(assume "vVs")
(cases)
(ng #t)
(auto)
(use "Efq")
(auto)
(save "LengthRealVectorDataToListReaToLength4")

(set-goal "all n,vVs,MVs ( n<Lh (RealVectorDataToListRea vVs MVs) -> (n< Lh vVs &  n< Lh MVs))")
(strip)
(split)
(use "LengthRealVectorDataToListReaToLength4" (pt "MVs"))
(auto)
(use "LengthRealVectorDataToListReaToLength3" (pt "vVs"))
(auto)
(save "LengthIteratorLtAux")

(set-goal "all M,MVs(  MonVector (M::MVs) ->  MonVector (MVs))")
(assume "M")
(cases)
(assume "Mv")
(use "MonVectorNilIntro")
(auto)
(assume "M0" "MVs")
(assume "MvM")
(inst-with-to "MonVectorElim2" (pt "M::M0::MVs") "MvMInst")
(ng "MvMInst")
(use "MvMInst")
(auto)
(save "MonVectorElim4Elem")

(set-goal "all M,MVs( Mon M -> MonVector (MVs) ->  MonVector (M::MVs))")
(assume "M")
(cases)
(assume "MonM")
(assume "MonV")
(use "MonVectorOneIntro")
(auto)
(assume "M0" "MVs")
(assume "MonM" "MonV")
(use "MonVectorIntro")
(auto)
(save "MonVectorElim5Elem")


(set-goal "RealVector xx -> all n(n<xx dim -> Real(xx__n))")
(ng #t)
(cases)
(ind)
(cases)
(ng #t)
(strip)
(use "Efq")
(auto)
(assume "M" "MVs")
(ng #t)
(strip)
(use "Efq")
(auto)
(ng #t)
(assume "as" "vVs")
(assume "Ih1")
(cases)
(ng #t)
(strip)
(use "Efq")
(auto)
(assume "M" "MVs")
(assume "Rv")
(ind)
(ng #t)
(assume "T")
(use "RealIntro")
(inst-with-to "CauchyVectorElim3" (pt "as::vVs") (pt "M::MVs") "ElimInst")
(use "ElimInst")
(use "RealVectorConstrElim0")
(auto)
(inst-with-to "MonVectorElim1"  (pt "M::MVs") "ElimInst")
(use "ElimInst")
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(assume "n")
(cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(assume "cutInst1")
(simp "cutInst1")
(ng #t)
(assume "Ih")
(assume "cond")
(use "Ih1")
(use "RealVectorIntro")
(ng #t)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rv")
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(simp "cutInst1")
(ng)
(simp  "cutInst1")
(auto)
(use "CauchyVectorElim2")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(auto)
(save "RealVectorRealComponentWise")



(set-goal "RealVector(RealVecConstr vVs MVs) -> all n(n<(RealVecConstr vVs MVs) dim -> Real(RealConstr(vVs__n)(MVs__n)))")
(ng #t)
(ind)
(cases)
(ng #t)
(strip)
(use "Efq")
(auto)
(assume "M" "MVs")
(ng #t)
(strip)
(use "Efq")
(auto)
(assume "as" "vVs")
(assume "Ih1")
(cases)
(ng #t)
(strip)
(use "Efq")
(auto)
(assume "M" "MVs")
(assume "Rv")
(ind)
(assume "T")
(use "RealIntro")
(inst-with-to "CauchyVectorElim3" (pt "as::vVs") (pt "M::MVs") "ElimInst")
(use "ElimInst")
(use "RealVectorConstrElim0")
(auto)
(inst-with-to "MonVectorElim1"  (pt "M::MVs") "ElimInst")
(use "ElimInst")
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(assume "n")
(ng #t)
(cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(assume "cutInst")
(simp "cutInst")
(ng #t)
(assume "Ih")
(assume "Lhcond")
(use "Ih1")
(use "RealVectorIntro")
(ng)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(auto)
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(ng #t)
(use "Rv")
(simp "cutInst")
(ng #t)
(use "Lhcond")
(use "CauchyVectorElim2")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(auto)
(save "RealVectorRealVecConstrRealComponentWise")




(set-goal "all xx (RealVector xx -> xx===xx)")
(assume "xx")
(elim)
(assume "xx1" "Cx" "Mx")
(use "RealVectorEqComponentsIntro")
(use "RealVectorCompatibleIntro")
(use "RealVectorIntro")
(auto)
(use "RealVectorIntro")
(auto)
(assume "n" "n<xx1 dim")
(ng #t)
(use "RealEqRefl")
(use "RealVectorRealComponentWise")
(use "RealVectorIntro")
(auto)
(save "RealVectorEqRefl")




(set-goal "all as,vVs,M,MVs(RealVector(RealVecConstr(as::vVs)(M::MVs)) -> RealVector(RealVecConstr vVs MVs))")
(assume "as" "vVs" "M" "MVs")
(assume "Rv")
(use "RealVectorIntro")
(ng #t)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rv")
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rv")
(save "RealVectorConstrElim4Elem")

(set-goal "all xx,yy (xx===yy -> RealVector xx)")
(assume "xx" "yy")
(elim)
(assume "xx0" "yy0")
(assume "Rcomp" "Rprop")
(use "RealVectorCompatibleElim0" (pt "yy0"))
(auto)
(save "RealVectorEqElim0")


(set-goal "all xx,yy (xx===yy -> RealVector yy)")
(assume "xx" "yy")
(elim)
(assume "xx0" "yy0")
(assume "Rcomp" "Rprop")
(use "RealVectorCompatibleElim1" (pt "xx0"))
(auto)
(save "RealVectorEqElim1")



(set-goal "all vVs,M,MVs,vVs0,M0,MVs0,as,as0 (RealVecConstr(as::vVs)(M::MVs)===RealVecConstr(as0::vVs0)(M0::MVs0)-> RealVecConstr vVs MVs===RealVecConstr vVs0 MVs0)")
(assume "vVs" "M" "MVs" "vVs0" "M0" "MVs0" "as" "as0")
(assume "xeqy")
(assert "RealVectorCompatible (RealVecConstr(as::vVs)(M::MVs)) (RealVecConstr(as0::vVs0)(M0::MVs0))")
(use "RealVectorEqComponentsElim0")
(auto)
(assume "Assertion")
(use "RealVectorEqComponentsIntro")
(use "RealVectorCompatibleIntro")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "xeqy")
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorEqElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "xeqy")
(ng #t)
(cases (pt "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs") )
(assume "case1")
(cases (pt "(ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0"))
(assume "case2")
(assert "(RealVecConstr(as::vVs)(M::MVs))dim=(RealVecConstr(as0::vVs0)(M0::MVs0))dim")
(use "RealVectorCompatibleElim2")
(use "Assertion")
(ng #t)
(simp "case1")
(simp "case2")
(auto)
(ng #t)
(assume "case2")
(assert "(RealVecConstr(as::vVs)(M::MVs))dim=(RealVecConstr(as0::vVs0)(M0::MVs0))dim")
(use "RealVectorCompatibleElim2")
(use "Assertion")
(ng #t)
(simp "case1")
(simp "case2")
(ng #t)
(use "Efq")
(assume "case1")
(ng #t)
(assert "(RealVecConstr(as::vVs)(M::MVs))dim=(RealVecConstr(as0::vVs0)(M0::MVs0))dim")
(use "RealVectorCompatibleElim2")
(use "Assertion")
(ng #t)
(simp "case1")
(ng #t)
(cases (pt "(ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0"))
(ng #t)
(assume "Useless")
(use "Efq")
(ng #t)
(auto)
(assume "n" "n<dim")
(inst-with-to "RealVectorEqComponentsElim1" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") "EqInst")
(assert "all n(
          n<(RealVecConstr(as::vVs)(M::MVs))dim ->
          RealVecConstr(as::vVs)(M::MVs)__n=== 
          RealVecConstr(as0::vVs0)(M0::MVs0)__n)")
(use "EqInst")  
(use "xeqy")
(assume "Assertion2")
(inst-with-to "Assertion2" (pt "Succ n") "Assertion2Inst")
(use "Assertion2Inst")
(ng #t)
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(use "RealVectorElim2")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "xeqy")
(assume "Assertion3")
(simp "Assertion3")
(ng #t)
(assert "n<
           [if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
             ((ListLength nat=>rat)vVs)        
             Zero]")
(use "n<dim")
(simp "Assertion3")
(auto)
(save "RealVectorConstrEqElim3Elem")


(set-goal "all xx,yy(xx===yy -> |_ xx === |_ yy)")
(cases)
(ind)
(cases)
(cases)
(cases)
(ng #t)
(assume "MVs" "cond")
(ng #t)
(use "RealEqRefl")
(autoreal)
(assume "as" "vVs" "MVs")
(ng #t)
(assume "RvEq")
(inst-with-to "RealVectorCompatibleElim2" (pt " RealVecConstr(Nil nat=>rat)(Nil pos=>nat)") (pt "RealVecConstr(as::vVs)MVs") "RInst")
(ng "RInst")
(cut "Zero=
        [if (Succ((ListLength nat=>rat)vVs)=(ListLength pos=>nat)MVs)
          (Succ((ListLength nat=>rat)vVs))
          Zero]")
(assert "(Succ((ListLength nat=>rat)vVs)=(ListLength pos=>nat)MVs)")
(inst-with-to "CauchyVectorElim2" (pt "as::vVs") (pt "MVs") "CInst")
(use "CInst")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(Nil nat=>rat)(Nil pos=>nat)"))
(use "RealVectorEqComponentsElim0")
(auto)
(assume "Assertion")
(simp "Assertion")
(ng #t)
(use "Efq")
(use "RInst")
(use "RealVectorEqComponentsElim0")
(auto)
(assume "M" "MVs")
(assume "yy")
(assume "RVeq")
(inst-with-to "CauchyVectorElim2" (pt "(Nil nat=>rat)") (pt "M::MVs") "CInst")
(ng "CInst")
(use "Efq")
(use "CInst")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "RealVectorEqComponentsElim0")
(use "RVeq")
(assume "as")
(assume "vVs")
(assume "Ih")
(cases)
(assume "yy" "Eq")
(inst-with-to "CauchyVectorElim2" (pt "(as::vVs)") (pt "(Nil pos=>nat)") "CInst")
(ng "CInst")
(use "Efq")
(use "CInst")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "RealVectorEqComponentsElim0")
(auto)
(assume "M" "MVs")
(cases)
(cases)
(cases)
(assume "RVeq")
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "RealVecConstr(Nil nat=>rat)(Nil pos=>nat)") "RInst")
(ng "RInst")
(cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
          (Succ((ListLength nat=>rat)vVs))
          Zero]=
        Zero")
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(inst-with-to "CauchyVectorElim2" (pt "(as::vVs)") (pt "M::MVs") "CInst")
(use "CInst")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(Nil nat=>rat)(Nil pos=>nat)"))
(use "RealVectorEqComponentsElim0")
(auto)
(assume "Assertion")
(simp "Assertion")
(ng #t)
(use "Efq")
(use "RInst")
(use "RealVectorEqComponentsElim0")
(auto)
(assume "M0" "MVs0")
(assume "RVeq")
(inst-with-to "CauchyVectorElim2" (pt "(Nil nat=>rat)") (pt "(M0::MVs0)") "CInst")
(ng "CInst")
(use "Efq")
(use "CInst")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "RealVectorEqComponentsElim0")
(auto)
(assume "as0" "vVs0")
(cases)
(assume "RVeq")
(inst-with-to "CauchyVectorElim2" (pt "as0::vVs0") (pt "(Nil pos=>nat)") "CInst")
(ng "CInst")
(use "Efq")
(use "CInst")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "RealVectorEqComponentsElim0")
(use "RVeq")
(assume "M0" "MVs0")
(assume "RVecEq")
(ng "RVecEq")
(simp "RealVectorMaxNorm0CompRule")
(simp "RealVectorMaxNorm0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVectorMaxNormAux3CompRule")
(simp "RealVectorMaxNormAux3CompRule")
(use "RealMaxCompat")
(inst-with-to "RealVectorEqComponentsElim1" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") "RInst")
(cut "all n(
         n<(RealVecConstr(as::vVs)(M::MVs))dim -> 
         RealVecConstr(as::vVs)(M::MVs)__n===
         RealVecConstr(as0::vVs0)(M0::MVs0)__n)")
(assume "RInst2")
(inst-with-to "RInst2" (pt "Zero") "RInst3")
(ng "RInst3")
(use "RealAbsCompat")
(use "RInst3")
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(inst-with-to "CauchyVectorElim2" (pt "(as::vVs)") (pt "(M::MVs)") "Cinst")
(use "Cinst")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "RealVectorEqComponentsElim0")
(auto)
(assume "Assertion")
(simp "Assertion")
(auto)
(inst-with-to "Ih" (pt "MVs") (pt "RealVecConstr vVs0 MVs0") "IhInst")
(ng "IhInst")
(use "IhInst")
(use "RealVectorConstrEqElim3Elem" (pt "M") (pt "M0") (pt "as") (pt "as0"))
(auto)
(save "RealVectorMaxNormCompat")


(set-goal "all xx,yy,zz(xx===yy -> yy===zz -> xx===zz)")
(assume "xx" "yy" "zz")
(assume "Rv1" "Rv2")
(use "RealVectorEqComponentsIntro")
(use "RealVectorCompatibleIntro")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "RealVectorEqComponentsElim0")
(auto)
(use "RealVectorCompatibleElim1" (pt "yy"))
(use "RealVectorEqComponentsElim0")
(auto)
(simp (pf "zz dim=yy dim"))
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(auto)
(simp "NatEqSym")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(auto)
(assume "n" "n<xx dim")
(assert "xx__n===yy__n")
(use "RealVectorEqComponentsElim1")
(auto)
(assume "xx__n===yy__n")
(assert "Real (zz__n)")
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "yy"))
(use "RealVectorEqComponentsElim0")
(auto)
(use "NatLtLeTrans" (pt "yy dim"))
(use "NatLtLeTrans" (pt "xx dim"))
(auto)
(use "NatLeRefl")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(auto)
(use "NatLeRefl")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(auto)
(assume "RAssertion")
(simpreal "xx__n===yy__n")
(use "RealVectorEqComponentsElim1")
(auto)
(use "NatLtLeTrans" (pt "xx dim"))
(auto)
(use "NatLeRefl")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(auto)
(save "RealVectorEqTrans")


(set-goal "all xx,yy(xx===yy -> yy===xx )")
(assume "xx" "yy")
(assume "Req1")
(use "RealVectorEqComponentsIntro")
(use "RealVectorCompatibleIntro")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "RealVectorEqComponentsElim0")
(auto)
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "RealVectorEqComponentsElim0")
(auto)
(simp "NatEqSym")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(auto)
(assume "n" "dimcond")
(use "RealEqSym")
(use "RealVectorEqComponentsElim1")
(auto)
(use "NatLtLeTrans" (pt "yy dim"))
(auto)
(use "NatLeRefl")
(simp "NatEqSym")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(auto)
(save "RealVectorEqSym")


(set-goal "all xx,yy,zz,zz1 (xx===yy -> zz===zz1 -> xx===zz -> yy === zz1 )")
(assume "xx" "yy" "zz" "zz1" "Req1" "Req2" "Req3")
(use "RealVectorEqTrans" (pt "xx"))
(use "RealVectorEqSym")
(auto)
(use "RealVectorEqSym")
(use "RealVectorEqSym")
(use "RealVectorEqTrans" (pt "zz"))
(auto)
(save "RealVectorEqCompat")





;; (remove-idpc-name "RealVectorEqSComponents")

(add-ids
 (list (list "RealVectorEqSComponents" (make-arity (py "realVec") (py "realVec"))))
 '("all xx,yy(RealVectorCompatible xx yy ->
    all n (RatVecConstr(xx seqs n) ==RatVecConstr(yy seqs n)) ->
    RealVectorEqSComponents xx yy)" "RealVectorEqSComponentsIntro")
    )

(add-token-and-type-to-name "=+=" (py "realVec") "RealVectorEqSComponents")

(add-idpredconst-display "RealVectorEqSComponents" 'pred-infix "=+=")


(set-goal "all xx(RealVector xx -> xx=+=xx)")
(cases)
(assume "vVs")
(assume "MVs")
(assume "Rv")
(use "RealVectorEqSComponentsIntro")
(use "RealVectorCompatibleIntro")
(auto)
(save "RealVectorEqSRefl")


(set-goal "all vVs (  (Lh (SeqsUMinus vVs)) = (Lh vVs) )")
(ind)
(ng #t)
(auto)
(save "LhSeq")
;(add-rewrite-rule "(Lh (SeqsUMinus vVs))" "(Lh vVs)")

(set-goal "CauchyVector vVs MVs -> CauchyVector(SeqsUMinus vVs)MVs")
(assume "vVs" "MVs")
(elim)
(ng #t)
(assume "as0" "M0")
(assume "Cas")
(use "CauchyVectorOneIntro")
(ng #t)
(use "CauchyIntro")
(ng #t)
(assume "p" "n" "m")
(assume "mm1" "mm2")
(simp "RatPlusComm")
(use "CauchyElim" (pt "M0"))
(use "Cas")
(auto)
(cases)
(ng #t)
(assume "MVs0")
(use "Efq")
(assume "as" "vVs0")
(cases)
(ng #t)
(assume "dummy")
(use "Efq")
(assume "M" "MVs0")
(ng #t)
(assume "Lhcond1")
(assume "Lhcond2")
(assume "Cas")
(assume "Cvas")
(assume "CvasUminus")
(use "CauchyVectorIntro")
(ng #t)
(use "CauchyVectorElim0" (pt "MVs0"))
(use "CvasUminus")
(simp "<-" "Lhcond2")
(use "Lhcond1")
(ng #t)
(use "CauchyVectorElim2")
(use "CvasUminus")
(ng #t)
(use "CauchyIntro")
(ng #t)
(assume "p" "n" "m")
(assume "mm1" "mm2")
(simp "RatPlusComm")
(use "CauchyElim" (pt "M"))
(use "Cas")
(auto)
(ng #t)
(assume "vVs0" "MVs0")
(assume "Lh1" "Lh2")
(use "CauchyVectorNilIntro")
(ng #t)
(simp "LhSeq")
(auto)
(save "CauchyVectorSeqsUMinus")




(set-goal "all xx (RealVector xx -> RealVector (~xx))")
(assume "xx")
(elim)
(cases)
(assume "vVs" "MVs")
(assume "Casv" "Monv")
(use "RealVectorIntro")
(ng #t)
(ng "Casv")
(use "CauchyVectorSeqsUMinus")
(use "Casv")
(ng #t)
(ng "Monv")
(use "Monv")
(save "RealVectorUMinusReal")

(add-program-constant  "SeqsSTimes" (py "rea=> list (nat=>rat)=>list (nat=>rat)"))
(add-computation-rules "SeqsSTimes x (Nil (nat=>rat))" "(Nil (nat=>rat))"
                       "SeqsSTimes x (as::vVs)" "([n] x seq n*as n)::(SeqsSTimes x vVs)"
)

(set-totality-goal "SeqsSTimes")
(use "AllTotalElim")
(assume "x")
(use "AllTotalElim")
(ind)
(ng #t)
(use "ListTotalVar")
(assume "as" "vVs")
(assume "Ih")
(ng #t)
(use "TotalListCons")
(use "AllTotalElim")
(assume "n")
(use "RatTimesTotal")
(use "RatTotalVar")
(use "RatTotalVar")
(use "Ih")
(save-totality)



(add-program-constant  "ModsSTimes" (py "rea=>list (nat=>rat)=>list (pos=>nat)=>list (pos=>nat)"))
(add-computation-rules "ModsSTimes x (Nil (nat=>rat)) (Nil (pos=>nat))" "(Nil (pos=>nat))"
                       "ModsSTimes x vVs (Nil (pos=>nat))" "(Nil (pos=>nat))"
                        "ModsSTimes x (Nil (nat=>rat)) MVs" "(Nil (pos=>nat))"
                       "ModsSTimes x (as::vVs)(M::MVs)" "([p]x mod(PosS(p+cNatPos(RealBd as M)))max M(PosS(p+cNatPos(RealBd x seq x mod))))::(ModsSTimes x vVs MVs)"
)

(set-totality-goal "ModsSTimes")
(use "AllTotalElim")
(cases)
(assume "as" "M")
(use "AllTotalElim")
(ind)
(use "AllTotalElim")
(cases)
(ng #t)
(use "ListTotalVar")
(assume "M0")
(ng #t)
(assume "MVs")
(use "ListTotalVar")
(assume "as0" "vVs")
(assume "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(use "ListTotalVar")
(assume "M0" "MVs")
(ng #t)
(use "TotalListCons")
(use "AllTotalElim")
(assume "p")
(use "NatTotalVar")
(use "Ih")
(use "ListTotalVar")
(save-totality)



;;"ModsSTimes x (Nil (nat=>rat)) MVs" "(Nil (pos=>rat))"



(add-computation-rules "RealVectorSTimes x xx" "RealVecConstr (SeqsSTimes x (xx seqs)) (ModsSTimes x (xx seqs) (xx mods))")

(set-totality-goal "RealVectorSTimes")
(use "AllTotalElim")
(assume "x")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)



(set-goal "all vVs(Zero<Lh vVs ->CauchyVector(vVs)(Nil pos=>nat) -> F)")
(cases)
(ng #t)
(use "Efq")
(assume "as" "vVs")
(assume "Lhcond")
(assume "Cvas")
(assert "Zero < Lh (Nil pos=>nat)")
(use "CauchyVectorElim1" (pt "as::vVs"))
(use "Cvas")
(use "Lhcond")
(ng #t)
(use "Efq")
(save "CauchyVectorInvalid0")

(set-goal "all MVs(Zero<Lh MVs ->CauchyVector(Nil nat=>rat)(MVs) -> F)")
(cases)
(ng #t)
(use "Efq")
(assume "M" "MVs")
(assume "Lhcond")
(assume "Cvas")
(assert "Zero < Lh (Nil nat=>rat)")
(use "CauchyVectorElim0" (pt "M::MVs"))
(use "Cvas")
(use "Lhcond")
(ng #t)
(use "Efq")
(save "CauchyVectorInvalid1")



(set-goal "all as,M,vVs, MVs (Cauchy as M -> CauchyVector vVs MVs ->  CauchyVector (as::vVs) (M::MVs))")
(assume "as" "M")
(cases)
(cases)
(ng #t)
(assume "Cas")
(assume "Cvas")
(use "CauchyVectorOneIntro")
(use "Cas")
(assume "M0" "MVs")
(assume "Cas" "Cvas")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M0::MVs"))
(ng #t)
(use "Truth")
(use "Cvas")
(assume "as0" "vVs")
(cases)
(assume "Cas")
(assume "Cvas")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as0::vVs"))
(use "Truth")
(use "Cvas")
(assume "M0" "MVs")
(assume "Cas")
(assume "Cvas")
(use "CauchyVectorIntro")
(use "Truth")
(ng #t)
(use "CauchyVectorElim2")
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0"))
(use "Cvas")
(ng #t)
(use "Cas")
(ng #t)
(use "Cvas")
(save "CauchyVectorElim5Elem")

;;(add-global-assumption "CauchyInhab" "Cauchy (Inhab nat=>rat) (Inhab pos=>nat)")
;;(add-global-assumption "MonInhab" "Mon (Inhab pos=>nat)")

(set-goal "all as,M(CauchyVector (as:) (M:) -> Cauchy (Head(as:)) (Head(M:)))")
(assume "as" "M" )
(assume "CauchyVectorInst")
(use "CauchyVectorElim3")
(auto)
(save "CauchyOneElem")

(set-goal "all as,M,vVs,MVs(CauchyVector (as::vVs) (M::MVs) ->Cauchy as M )")
(assume "as" "M")
(cases)
(cases)
(assume "Ch")
(inst-with-to "CauchyOneElem" (pt "as") (pt "M") "CacuhyOneInst")
(ng "CacuhyOneInst")
(auto)
(assume "M0" "MVs")
(assume "Cv")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M0::MVs"))
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(auto)
(assume "as0" "vVs")
(cases)
(assume "Cv")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as0::vVs"))
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(auto)
(assume "M0" "MVs")
(assume "Cv")
(inst-with-to "CauchyVectorElim3" (pt "as::as0::vVs") (pt "M::M0::MVs") "CvInst")
(ng "CvInst")
(auto)
(save "CauchyVectorHeadElim")


(set-goal "all M(MonVector (M:) -> Mon (Head(M:)))")
(assume "M")
(assume "MonVectorInst")
(use "MonVectorElim1")
(use "MonVectorInst")
(ng #t)
(use "Truth")
(save "MonOneElem")

(set-goal "all M,MVs(MonVector (M::MVs) ->Mon M )")
(assume "M")
(cases)
(assume "MonM")
(inst-with-to "MonOneElem" (pt "M") "MonOneInst")
(ng "MonOneInst")
(auto)
(assume "M0" "MVs")
(assume "MonM")
(inst-with-to "MonVectorElim1" (pt "M::M0::MVs") "MonInst")
(ng "MonInst")
(use "MonInst")
(auto)
(save "MonVectorHeadElim")


(set-goal "all xx (RealVector xx -> Real(|_ xx))")
(cases)
(ind)
(ng #t)
(assume "MVs" "Rv")
(use "RealRat")
(assume "as" "vVs" "Ih")
(cases)
(ng #t)
(assume "Rv")
(use "RealRat")
(assume "M" "MVs")
(assume "Rv")
(ng #t)
(ng "Ih")
(use "RealMaxReal")
(inst-with-to "RealAbsReal" (pt "RealConstr as M") "Rabs")
(ng "Rabs")
(use "Rabs")
(use "RealIntro")
(ng #t)
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(use "RealVectorConstrElim0")
(auto)
(ng #t)
(use "MonVectorHeadElim" (pt "MVs"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(use "Ih")
(use "RealVectorIntro")
(ng #t)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(auto)
(ng #t)
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(save "RealVectorMaxNormReal")

(set-goal "all xx (RealVector xx -> 0<<= (|_(xx)))")
(assume "xx" "Rxx")
(use "RealNNegSToZeroLe")
(auto)
(use "RealVectorMaxNormReal")
(auto)
(use "RealNNegSMaxNorm")
(save "RealLeZeroMaxNorm")

(set-goal "all as,M,vVs,MVs(Cauchy as M -> CauchyVector vVs MVs -> Mon M-> MonVector MVs -> CauchyVector(SeqsSTimes(RealConstr as M)vVs)(ModsSTimes(RealConstr as M)vVs MVs))")
(assume "as" "M")
(ind)
(ng #t)
(strip)
(use "CauchyVectorNilIntro")
(auto)
(assume "as0" "vVs")
(assume "Ih")
(ng #t)
(cases)
(ng #t)
(assume "Cas" "Cvas")
(assume "Mon M" "MvM")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as0::vVs"))
(ng #t)
(auto)
(assume "M0" "MVs")
(assume "Cas")
(assume "Cvas")
(assume "Mon M" "MvM")
(use "CauchyVectorElim5Elem")
(use "RealConstrToCauchy")
(inst-with-to "RealTimesReal" (pt "RealConstr as M") (pt "RealConstr as0 M0") "Inst")
(use "Inst")
(use "RealIntro")
(auto)
(use "RealIntro")
(ng #t)
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(auto)
(ng #t)
(use "MonVectorHeadElim" (pt "MVs"))
(auto)
(use "Ih")
(auto)
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0"))
(auto)
(use "MonVectorElim4Elem" (pt "M0"))
(use "MvM")
(save "CauchyVectorSTimesCauchy")

;; (remove-theorem "CauchyVectorSTimesCauchy")

(set-goal "all as,M,vVs,MVs(Mon M -> MonVector MVs -> MonVector(ModsSTimes(RealConstr as M)vVs MVs))")
(assume "as" "M")
(ind)
(ng #t)
(assume "MVs")
(assume "MonM" "MonV")
(use "MonVectorNilIntro")
(auto)
(assume "as0" "vVs")
(assume "Ih")
(cases)
(ng #t)
(assume "MonM" "MonV")
(use "MonVectorNilIntro")
(auto)
(ng #t)
(assume "M0" "MVs")
(assume "MonM" "MonV")
(use "MonVectorElim5Elem")
(use "MonIntro")
(assume "p" "q" "p<=q")
(use "NatMaxLUB")
(ng #t)
(use "NatLeTrans" (pt "M
     (PosS
      (q+
       cNatPos
       (Succ
        (ListNatMax
         (cRatLeAbsBound(as0 Zero)::
          ([n]cRatLeAbsBound(as0(Succ n)))fbar M0 1)))))"))
(use "MonElim")
(use "MonM")
(ng #t)
(use "p<=q")
(use "NatMaxUB1")
(use "NatLeTrans" (pt "M0
     (PosS
      (q+
       cNatPos
       (Succ
        (ListNatMax
         (cRatLeAbsBound(as Zero)::([n]cRatLeAbsBound(as(Succ n)))fbar M 1)))))"))
(use "MonElim")
(inst-with-to "MonVectorElim1" (pt "M0::MVs") "MonVectorInst")
(ng "MonVectorInst")
(use "MonVectorInst")
(auto)
(use "NatMaxUB2")
(use "Ih")
(use "MonM")
(use "MonVectorElim4Elem" (pt "M0"))
(auto)
(save "MonVectorSTimesMon")

;; (remove-theorem "MonVectorSTimesMon")


(set-goal "all x,xx(Real x -> RealVector xx -> RealVector(RealVectorSTimes x xx))")
(cases)
(assume "as" "M")
(cases)
(assume "vVs" "MVs")
(assume "Ras" "Rv")
(use "RealVectorIntro")
(ng #t)
(use "CauchyVectorSTimesCauchy")
(use "RealConstrToCauchy")
(use "Ras")
(use "RealVectorConstrElim0")
(use "Rv")
(use "RealConstrToMon" (pt "as") )
(use "Ras")
(use "RealVectorConstrElim1" (pt "vVs"))
(use "Rv")
(use "MonVectorSTimesMon")
(use "RealConstrToMon" (pt "as"))
(use "Ras")
(use "RealVectorConstrElim1" (pt "vVs"))
(auto)
(save "RealVectorSTimesReal")

;; (remove-theorem "RealVectorSTimesReal")


;;(add-program-constant "SeqsPlus" (py "list(nat=>rat) => list(nat=>rat) => list(nat=>rat) "))
(pp (nt (pt "([n] as n + bs n + ([n0] as n + bs n) n)")))


; ;;(remove-theorem "RealVectorDTimesCRule")
; (animate "RealVectorDTimesCRule")
; ; (animate "NatPos")
; ; (animate "RealBound")
; ; (animate "RatLeAbsBoundSeq")
; ; (animate "RatLeAbsBound")
; ; (animate "RatLeBound")
; ; (pp (nt (pt "cRealVectorDTimesCRule 2 (([n] (5#2))::([n] (10#8)):) (([n] (5#2))::([n] (10#8)):)  (([p] 2)::([p] p):)  (([p] Zero)::([p] Zero):)")))
; ; (deanimate "RealVectorDTimesCRule")
; ; (deanimate "NatPos")
; ; (deanimate "RealBound")
; ; (deanimate "RatLeAbsBoundSeq")
; ; (deanimate "RatLeAbsBound")
; ; (deanimate "RatLeBound")
; (pp(nt (pt "RealVectorCDim (RealVecConstr (([n] (5#2))::([n] (10#8)):) (([p] 2)::([p] p):))")))



; (set-goal "all vVs,vVs0,MVs,MVs0 (RealVectorCompatible (RealVecConstr vVs MVs) (RealVecConstr vVs0 MVs0) ->  RealVectorSeqModDim(RealVecConstr vVs MVs)=(ListLength nat=>rat)vVs &       
;     RealVectorSeqModDim(RealVecConstr vVs MVs)=(ListLength nat=>rat)vVs0 &      
;     RealVectorSeqModDim(RealVecConstr vVs MVs)=(ListLength pos=>nat)MVs &       
;     RealVectorSeqModDim(RealVecConstr vVs MVs)=(ListLength pos=>nat)MVs0 )")
; (ng #t)
; (assume "vVs" "vVs0" "MVs" "MVs0")
; (assume "Rcomp")
; (inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "RCompElimInst")
; (ng)
; (split)
; (cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
; (assume "cutInst")
; (simp "cutInst")
; (auto)
; (use "RealVectorElim2")
; (use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
; (use "Rcomp")
; (split)
; (cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
; (assume "cutInst")
; (cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
;                   ((ListLength nat=>rat)vVs)
;                   Zero]=
;                 [if ((ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0)       
;                   ((ListLength nat=>rat)vVs0)
;                   Zero]")
; (simp "cutInst")
; (ng #t)
; (simp "cutInst")
; (cut "(ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0")
; (assume "cutInst2")
; (simp "cutInst2")
; (ng #t)
; (auto)
; (use "RealVectorElim2")
; (use "RealVectorCompatibleElim1" (pt "(RealVecConstr vVs MVs)"))
; (use "Rcomp")
; (use "RCompElimInst")
; (use "Rcomp")
; (use "RealVectorElim2")
; (use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
; (use "Rcomp")
; (split)
; (cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
; (assume "cutInst")
; (simp "cutInst")
; (ng #t)
; (simp "cutInst")
; (auto)
; (use "RealVectorElim2")
; (use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
; (use "Rcomp")
; (cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
; (assume "cutInst")
; (simp "cutInst")
; (ng #t)
; (cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
;                   ((ListLength nat=>rat)vVs)
;                   Zero]=
;                 [if ((ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0)       
;                   ((ListLength nat=>rat)vVs0)
;                   Zero]")
; (simp "cutInst")
; (ng #t)
; (cut "(ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0")
; (assume "cutInst2")
; (simp "cutInst2")
; (ng #t)
; (assume "cutInst3")
; (simp "cutInst3")
; (use "RealVectorElim2")
; (use "RealVectorCompatibleElim1" (pt "(RealVecConstr vVs MVs)"))
; (use "Rcomp")
; (use "RealVectorElim2")
; (use "RealVectorCompatibleElim1" (pt "(RealVecConstr vVs MVs)"))
; (use "Rcomp")
; (use "RCompElimInst")
; (use "Rcomp")
; (use "RealVectorElim2")
; (use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
; (use "Rcomp")
; (save "RealVectorCompatibleElim3Dim")



; (set-goal "all xx,yy (RealVectorCompatible xx yy -> Real(xx*yy))")
; (cases)
; (assume "vVs" "MVs")
; (cases)
; (assume "vVs0" "MVs0")
; (assume "Rcompxxyy")
; (use "RealVectorDTimesCauchy" (pt "RealVectorSeqModDim (RealVecConstr vVs MVs)"))
; (inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "RCompElimInst")
; (use "RealVectorCompatibleElim3Dim")
; (use "Rcompxxyy")
; (use "RealVectorConstrElim0")
; (use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
; (use "Rcompxxyy")
; (use "RealVectorConstrElim0")
; (use "RealVectorCompatibleElim1" (pt "(RealVecConstr vVs MVs)"))
; (use "Rcompxxyy")
; (use "RealVectorConstrElim1" (pt "vVs"))
; (use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
; (use "Rcompxxyy")
; (use "RealVectorConstrElim1" (pt "vVs0"))
; (use "RealVectorCompatibleElim1" (pt "(RealVecConstr vVs MVs)"))
; (use "Rcompxxyy")
; (save "RealVectorDTimesReal")



; (set-goal "all vVs,vVs0,MVs,MVs0 (RealVectorCompatible (RealVecConstr vVs MVs) (RealVecConstr vVs0 MVs0) -> Real((RealVecConstr vVs MVs)*(RealVecConstr vVs0 MVs0)))")
; (assume "vVs" "vVs0" "MVs" "MVs0")
; (assume "Rcomp")
; (use "RealVectorDTimesReal")
; (use "Rcomp")
; (save "RealVectorConstrDTimesReal")










(set-goal "all n0,vVs,MVs(n0=Lh vVs & Zero<Lh vVs ->CauchyVector vVs MVs -> all p,n,m(MVs p<= n -> MVs p<= m -> |_( RatVecConstr(vVs n) + ~(RatVecConstr(vVs m)))<=(1/2)**p))")
(cases)
(cases)
(ng #t)
(assume "MVs")
(assume "Absurd")
(use "Efq")
(use "Absurd")
(assume "as")
(ng #t)
(assume "vVs" "MVs")
(assume "Absurd")
(use "Efq")
(use "Absurd")
(ind)
(cases)
(ng #t)
(assume "MVs")
(assume "Absurd")
(use "Efq")
(use "Absurd")
(assume "as")
(cases)
(ng #t)
(cases)
(assume "T")
(assume "Cvas")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "(as:)"))
(use "Truth")
(use "Cvas")
(assume "M")
(cases)
(ng #t)
(assume "T")
(assume "Cvas")
(assume "p" "n" "m" "Mpn" "Mpm")
(ng #t)
(use "CauchyElim" (pt "M"))
(inst-with-to "CauchyVectorElim3" (pt "as:") (pt "M:") "CvasInst")
(ng "CvasInst")
(use "CvasInst")
(auto)
(assume "M0" "MVs")
(assume "T")
(assume "Cvas")
(use "Efq")
(inst-with-to "CauchyVectorElim2" (pt "as:") (pt "M::M0::MVs") "CvasInst")
(ng "CvasInst")
(use "CvasInst")
(use "Cvas")
(ng #t)
(assume "as0" "vVs" "MVs")
(assume "F")
(use "Efq")
(use "F")
(assume "n0" "Ih") 
(cases)
(ng #t)
(assume "MVs")
(assume "F")
(use "Efq")
(use "F")
(assume "as")
(assume "vVs")
(cases)
(assume "Lhcond")
(assume "Cvas")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(use "Truth")
(use "Cvas")
(assume "M" "MVs")
(assume "Lhcond")
(assume "Cvas")
(assume "p" "n" "m" "Mpn" "Mpm")
(ng #t)
(cut "(ListLength rat)(vVs n)=(ListLength rat)(RatVecUMinusAux(vVs m))")
(assume "cutInst")
(simp "cutInst")
(ng #t)
(use "RatMaxLUB" (pt "(1#2**p)"))
(use "CauchyElim" (pt "M"))
(inst-with-to "CauchyVectorElim3" (pt "as::vVs") (pt "M::MVs") "CvasInst")
(ng "CvasInst")
(use "CvasInst")
(auto)
(use "NatLeTrans" (pt "M p max MVs p"))
(use "NatMaxUB1")
(use "Mpn")
(use "NatLeTrans" (pt "M p max MVs p"))
(use "NatMaxUB1")
(use "Mpm")
(cut "ratListAbsMax
      [if ((ListLength rat)(vVs n)=(ListLength rat)(RatVecUMinusAux(vVs m)))    
        (RatVecConstr(RatVecPlusAux(vVs 
n)(RatVecUMinusAux(vVs m))))
        (RatVecConstr(Nil rat))]values<=(1#2**p)")
(simp "cutInst")
(ng #t)
(auto)
(use "Ih" (pt "MVs"))
(ng #t)
(simp "<-" "Lhcond")
(simp "<-" "Lhcond")
(ng #t)
(split)
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "Cvas")
(use "NatLeTrans" (pt "M p max MVs p"))
(use "NatMaxUB2")
(use "Mpn")
(use "NatLeTrans" (pt "M p max MVs p"))
(use "NatMaxUB2")
(use "Mpm")
(use "LhvVsSeq1")
(save "CauchyVectorElim6")


;;____________________________________Multivariable Functions

(add-algs 
    "contmv"
    (list "ContmvConstr" "ratVec=>rat=>(ratVec=>nat=>rat)=>(pos=>nat)=>(pos=>pos)=>contmv"))
;; Center=>radius=>approximation map => modulus of convergence => modulus of continuity




(add-totality "contmv")

(add-var-name "hmv" (py "(ratVec=>nat=>rat)"))
(add-var-name "almv" (py "pos=>nat"))
(add-var-name "ommv" (py "pos=>pos"))
(add-var-name "R" (py "rat"))
(add-var-name "fmv" (make-alg "contmv"))

(add-program-constant "ContmvDom" (py "contmv=>ratVec yprod rat") t-deg-zero)
(add-program-constant "ContmvCenter" (py "contmv=>ratVec"))
(add-program-constant "ContmvBound" (py "contmv=>rat"))
(add-program-constant "ContmvApprox" (py "contmv=>ratVec=>nat=>rat") t-deg-zero 'const 1)
(add-program-constant "ContmvuMod" (py "contmv=>pos=>nat") t-deg-zero 'const 1)
(add-program-constant "ContmvuModCont" (py "contmv=>pos=>pos") t-deg-zero 'const 1)
(add-program-constant "ContmvDim" (py "contmv=>nat") t-deg-zero)


(add-postfix-display-string "ContmvDom" "dom")
(add-postfix-display-string "ContmvCenter" "defCmv")
(add-postfix-display-string "ContmvBound" "defBmv")
(add-postfix-display-string "ContmvApprox" "approxmv")
(add-postfix-display-string "ContmvuMod" "uModmv")
(add-postfix-display-string "ContmvuModCont" "uModContmv")
(add-postfix-display-string "ContmvDim" "dimmv")

(add-computation-rules "(ContmvConstr e R hmv almv ommv)dom" "e pair R")

(set-goal (rename-variables (term-to-totality-formula (pt "ContmvDom"))))
(assume "fmv^" "Tfmv")
(elim "Tfmv")
(assume "e^" "Te" "R^" "TR" "hmv^" "Thmv" "almv^" "Talmv" "ommv^" "Tommv")
(ng #t)
(use "TotalYprodPairConstr")
(use "Te")
(use "TR")
(save "ContmvDomTotal")


(add-computation-rule "(ContmvConstr e R hmv almv ommv)defCmv" "e")

(set-totality-goal "ContmvCenter")
(assume "contmv^1" "Tcontmv1")
(elim "Tcontmv1")
(assume "e^1" "Te1" "R^1" "TR1" "hmv^1 ""Thmv1" "almv^1" "Talmv" "ommv^1" "Tommv1")
(ng #t)
(use "Te1")
(save-totality)


(add-computation-rule "(ContmvConstr e R hmv almv ommv)defBmv" "R")
(set-goal (rename-variables (term-to-totality-formula (pt "ContmvBound"))))
(assume "fmv^1" "Tfmv1")
(elim "Tfmv1")
(assume "e^1" "Te1" "R^1" "TR1" "hmv^1" "Thmv1" "almv^1" "Talmv1" "ommv^1" "Tommv1")
(ng #t)
(use "TR1")
(save "ContmvBoundTotal")


(add-computation-rules "(ContmvConstr e0 R0 hmv almv ommv)approxmv" "hmv")

(set-goal (rename-variables (term-to-totality-formula (pt "ContmvApprox"))))
(assume "fmv^" "Tfmv")
(elim "Tfmv")
(assume "e^" "Te" "R^" "TR" "hmv^" "Thmv" "almv^" "Talmv" "ommv^" "Tommv")
(ng #t)
(assume "e^1" "Te1")
(assume "n^" "Tn")
(use "Thmv")
(use "Te1")
(use "Tn")
(save "ContmvApproxTotal")


(add-computation-rules "(ContmvConstr e0 R0 hmv almv ommv)uModmv" "almv")

(set-goal (rename-variables (term-to-totality-formula (pt "ContmvuMod"))))
(assume "fmv^" "Tfmv")
(elim "Tfmv")
(assume "e^1" "Te1" "R^1" "TR1" "hmv^1" "Thmv" "almv^1" "Talmv1" "ommv^1" "Tommv1")
(use "Talmv1")
(save "ContmvuModTotal")


(add-computation-rules "(ContmvConstr e0 R0 hmv almv ommv)uModContmv" "ommv")

(set-goal (rename-variables (term-to-totality-formula (pt "ContmvuModCont"))))
(assume "fmv^" "Tfmv")
(elim "Tfmv")
(assume "e^" "Te" "R^" "TR" "hmv^" "Thmv" "almv^" "Talmv" "ommv^" "Tommv")
(use "Tommv")
(save "ContmvuModContTotal")


(add-computation-rules "(ContmvConstr e0 R0 hmv almv ommv)dimmv" "e0 dim")

(set-totality-goal "ContmvDim")
(assume "fmv^" "Tfmv")
(elim "Tfmv")
(ng #t)
(assume "e^" "Te" "R^" "TR" "hmv^" "Thmv" "almv^" "Talmv" "ommv^" "Tommv")
(use "ListLengthTotal")
(use "RatVecToListTotal")
(use "Te")
(save-totality)

(add-ids
    (list (list "Contmv" (make-arity (make-alg "contmv"))))
    '("allnc e0,R0,hmv,almv,ommv(
        all e(RatVecDim e = RatVecDim e0 -> |_( e + ~e0) <= R0 -> Cauchy(hmv e) almv) -->
        all e1,e2,p,n(
                    RatVecDim e1 = RatVecDim e0 ->
                    RatVecDim e2 = RatVecDim e0 ->
                    |_(e1 + ~e0) <= R0 -> 
                    |_( e2 + ~e0) <= R0 ->
                    almv p<=n -> 
                    |_(e1 + ~e2) <= 1/2**PosPred(ommv p) ->
                    abs(hmv e1 n - hmv e2 n)<= 1/2**p)-->
        all p,q(p<=q->almv p <=almv q) -->
        all p,q(p<=q->ommv p <= ommv q) -->
        Contmv(ContmvConstr e0 R0 hmv almv ommv))" "ContmvIntro"))


(set-goal "all fmv(Contmv fmv -> all e(RatVecDim e = RatVecDim (fmv defCmv) -> |_( e + (~ fmv defCmv)) <= fmv defBmv -> Cauchy( fmv approxmv e) (fmv uModmv)))")
(cases)
(assume "e" "R" "hmv" "almv" "ommv")
(elim)
(auto)
(save "ContmvElim0")




(set-goal "all fmv(
    Contmv fmv -> 
        all e1,e2,p,n(
            RatVecDim e1 = RatVecDim (fmv defCmv) ->
            RatVecDim e2 = RatVecDim (fmv defCmv) ->
            |_(e1 + ~(fmv defCmv)) <= fmv defBmv -> 
            |_(e2 + ~(fmv defCmv)) <= fmv defBmv ->
            fmv uModmv p<=n -> 
            |_(e1 + ~e2) <= 1/2**PosPred(fmv uModContmv p) ->
            abs(fmv approxmv e1 n - fmv approxmv e2 n)<= 1/2**p
        )
    )")
(cases)
(assume "e" "R" "hmv" "almv" "ommv")
(elim)
(auto)
(save "ContmvElim1")

(set-goal "all fmv( Contmv fmv ->  all p,q(p<=q->fmv uModmv p <= fmv uModmv q))")
(cases)
(assume "e" "R" "hmv" "almv" "ommv")
(elim)
(auto)
(save "ContmvElim2")

(set-goal "all fmv( Contmv fmv -> all p,q(p<=q->fmv uModContmv p <= fmv uModContmv q))")
(assume "fmv")
(elim)
(assume "e0" "R0" "hmv0" "almv0" "ommv0")
(auto)
(save "ContmvElim3")

(add-program-constant "AppContmvOne" (py "contmv=>realVec=>rea") t-deg-zero)



(add-computation-rule
    "AppContmvOne fmv xx"
    "RealConstr([n] fmv approxmv (RatVecConstr(xx seqs n))n)
    ([p](fmv uModmv(PosS(PosS p)) max xx mods (PosPred( fmv uModContmv(PosS p)))))")

(set-totality-goal "AppContmvOne")
(use "AllTotalElim")
(cases)
(assume "e" "a" "hmv" "M" "om")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "TotalReaRealConstr")
(use "AllTotalElim")
(assume "n")
(use "RatTotalVar")
(use "AllTotalElim")
(assume "p")
(use "NatTotalVar")
(save-totality)


(add-application (pt "AppContmvOne"))

(pp (nt (pt "fmv (RealVecConstr (as::as0:) (M::M0:))")))

(pp (nt (pt "(RealVecConstr (as::as0:) (M::M0:)) mods p")))


; (set-goal "all M,p(exl l M p<=l)")
; (assume "M" "p")
; (intro 0 (pt "M p"))
; (ng #t)
; (auto)
; (save "MonAuxThm")

(add-ids
 (list (list "InDomSeq" (make-arity (py "realVec") (py "contmv"))))
 '("all xx,fmv( xx dim = fmv dimmv -> all n(|_ ((RatVecConstr(xx seqs n )) + ~fmv defCmv) <= fmv defBmv )-> InDomSeq xx fmv)" "InDomSeqIntro"))

(set-goal "InDomSeq xx fmv -> xx dim = fmv dimmv " )
(assume "xx" "fmv")
(elim)
(auto)
(save "InDomSeqElim0")

(set-goal "InDomSeq xx fmv ->all n(|_ ((RatVecConstr(xx seqs n )) + ~fmv defCmv) <= fmv defBmv ) " )
(assume "xx" "fmv")
(elim)
(auto)
(save "InDomSeqElim1")

(set-goal "all MVs (MonVector(MVs) ->Mon(UniformEvalMapMod MVs))")
(ind)
(assume "monM")
(use "MonIntro")
(ng #t)
(auto)
(assume "M" "MVs" "Ih")
(assume "MonM")
(ng #t)
(use "MonIntro")
(assume "p" "q" "pleq")
(ng #t)
(use "NatMaxLeLeCompat")
(use "MonElim")
(inst-with-to "MonVectorElim1" (pt "M::MVs") "MonInst")
(ng "MonInst")
(use "MonInst")
(auto)
(use "MonElim")
(use "Ih")
(use "MonVectorElim4Elem" (pt "M"))
(use "MonM")
(auto)
(save "MonVectorUniformElim0") 

(set-goal "all vVs,MVs,n(Lh vVs =Lh MVs -> (RatVecConstr(vVs n))dim=((RealVecConstr vVs MVs) dim))")
(ind)
(ng #t)
(auto)
(assume "as" "vVs")
(assume "Ih")
(cases)
(assume "n")
(assume "Lhcond")
(ng)
(use "Lhcond")
(assume "M")
(assume "MVs")
(assume "n")
(ng #t)
(assume "Lhcond")
(simp "Lhcond")
(ng #t)
(cut "(ListLength rat)(vVs n)=
                          [if ((ListLength nat=>rat)vVs=
                                (ListLength pos=>nat)MVs)
                            ((ListLength nat=>rat)vVs)
                            Zero]")
(simp "Lhcond")
(auto)
(save "UniformMapDimPreserving")


(set-goal "all fmv,xx( Contmv fmv-> RealVector xx -> Zero<xx dim-> InDomSeq xx fmv -> Real(fmv xx))")
(assume "fmv")
(cases)
(assume "vVs" "MVs")
(elim)
(assume "e" "R" "hmv" "almv" "ommv")
(assume "Cauchyf")
(assume "umodcontmvf")
(assume "Mon1" "Mon2")
(assume "Rxx" "dimcond" "IndomSeqf")
(ng #t)
(use "RealIntro")
(use "CauchyIntro")
(ng #t)
(assume "p" "n" "m" "Mod1" "Mod2")
(inst-with-to "MonAuxThm" (pt "almv") (pt "PosS(PosS p)") "LInst" )
(by-assume "LInst" "l" "LInstProp")
(use "RatAbsToAbsInterValue" (pt "hmv(RatVecConstr(vVs n))l") (pt "hmv(RatVecConstr(vVs m))l"))
(use "RatLeTrans" (pt "(1#2**(PosS(PosS(p))))+ abs(hmv(RatVecConstr(vVs n))l+ ~(hmv(RatVecConstr(vVs m))l))+
     abs(hmv(RatVecConstr(vVs m))l+ ~(hmv(RatVecConstr(vVs m))m))"))
(ng #t)
(use "CauchyElim" (pt "almv"))
(use "Cauchyf")
(cut "e dim=(ContmvConstr e R hmv almv ommv)dimmv")
(assume "cutInst")
(simp "cutInst")
(cut "(RatVecConstr(vVs n))dim=((RealVecConstr vVs MVs) dim)")
(assume "cutInst2")
(simp "cutInst2")
(use "InDomSeqElim0")
(use "IndomSeqf")
(use "UniformMapDimPreserving")
(use "RealVectorElim2")
(use "Rxx")
(auto)
(inst-with-to "InDomSeqElim1" (pt "RealVecConstr vVs MVs") (pt "ContmvConstr e R hmv almv ommv") "IndomInst")
(ng "IndomInst")
(use "IndomInst")
(use "IndomSeqf")
(use "NatLeTrans" (pt "almv(PosS(PosS p))max MVs(PosPred(ommv(PosS p)))"))
(use "NatMaxUB1")
(use "Mod1")
(use "LInstProp")
(use "RatLeTrans" (pt "(1#2**PosS(PosS p))+ (1#2**(PosS p)) +(1#2**PosS(PosS p))"))
(use "RatLePlusCancelL" (pt "~(1#2**PosS(PosS p))")) ;; do not (ng #t) here
(simp "RatPlusAssoc")
(simp "RatPlusAssoc")
(simp "RatPlusAssoc")
(simp "RatPlusAssoc")
(simprat (pf "~(1#2**PosS(PosS p))+(1#2**PosS(PosS p))==0"))
(simprat (pf "0+abs(hmv(RatVecConstr(vVs n))l+ ~(hmv(RatVecConstr(vVs m))l))+
     abs(hmv(RatVecConstr(vVs n))l+ ~(hmv(RatVecConstr(vVs n))m))==abs(hmv(RatVecConstr(vVs n))l+ ~(hmv(RatVecConstr(vVs m))l))+
     abs(hmv(RatVecConstr(vVs n))l+ ~(hmv(RatVecConstr(vVs n))m))"))
(simprat (pf "0+(1#2**PosS p)+(1#2**PosS(PosS p))==(1#2**PosS p)+(1#2**PosS(PosS p))"))
(use "RatLeMonPlus")
(use "umodcontmvf")
(cut "e dim=(ContmvConstr e R hmv almv ommv)dimmv")
(assume "cutInst")
(simp "cutInst")
(cut "(RatVecConstr(vVs n))dim=((RealVecConstr vVs MVs) dim)")
(assume "cutInst2")
(simp "cutInst2")
(use "InDomSeqElim0")
(use "IndomSeqf")
(use "UniformMapDimPreserving")
(use "RealVectorElim2")
(use "Rxx")
(auto)
(cut "e dim=(ContmvConstr e R hmv almv ommv)dimmv")
(assume "cutInst")
(simp "cutInst")
(cut "(RatVecConstr(vVs m))dim=((RealVecConstr vVs MVs) dim)")
(assume "cutInst2")
(simp "cutInst2")
(use "InDomSeqElim0")
(use "IndomSeqf")
(use "UniformMapDimPreserving")
(use "RealVectorElim2")
(use "Rxx")
(auto)
(inst-with-to "InDomSeqElim1" (pt "RealVecConstr vVs MVs") (pt "ContmvConstr e R hmv almv ommv") "IndomInst")
(ng "IndomInst")
(use "IndomInst")
(auto)
(inst-with-to "InDomSeqElim1" (pt "RealVecConstr vVs MVs") (pt "ContmvConstr e R hmv almv ommv") "IndomInst")
(ng "IndomInst")
(use "IndomInst")
(auto)
(use "NatLeTrans" (pt "almv(PosS(PosS p))"))
(use "Mon1")
(auto)
(use "CauchyVectorElim6" (pt "(RealVecConstr vVs MVs)dim") (pt "MVs"))
(split)
(ng #t)
(cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(assume "cutInst")
(simp "cutInst")
(auto)
(use "RealVectorElim2")
(auto)
(use "NatLtLeTrans" (pt "(RealVecConstr vVs MVs)dim"))
(use "dimcond")
(use "NatLeRefl")
(ng #t)
(cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(assume "cutInst")
(simp "cutInst")
(ng #t)
(auto)
(use "RealVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "Rxx")
(use "NatLeTrans" (pt "almv(PosS(PosS p))max MVs(PosPred(ommv(PosS p)))"))
(use "NatMaxUB2")
(use "Mod1")
(use "NatLeTrans" (pt "almv(PosS(PosS p))max MVs(PosPred(ommv(PosS p)))"))
(use "NatMaxUB2")
(use "Mod2")
(use "CauchyElim" (pt "almv"))
(use "Cauchyf")
(cut "e dim=(ContmvConstr e R hmv almv ommv)dimmv")
(assume "cutInst")
(simp "cutInst")
(cut "(RatVecConstr(vVs m))dim=((RealVecConstr vVs MVs) dim)")
(assume "cutInst2")
(simp "cutInst2")
(use "InDomSeqElim0")
(use "IndomSeqf")
(use "UniformMapDimPreserving")
(use "RealVectorElim2")
(use "Rxx")
(auto)
(inst-with-to "InDomSeqElim1" (pt "RealVecConstr vVs MVs") (pt "ContmvConstr e R hmv almv ommv") "IndomInst")
(ng "IndomInst")
(use "IndomInst")
(auto)
(use "NatLeTrans" (pt "almv(PosS(PosS p))max MVs(PosPred(ommv(PosS p)))"))
(use "NatMaxUB1")
(use "Mod2")
(ng #t)
(use "Truth")
(ng #t)
(use "Truth")
(simp "<-" "RatPlusAssoc")
(simp "RatPlusComm")
(simp "<-" "RatPlusAssoc")
(simprat "RatPlusHalfExpPosS" )
(use "RatLeRefl")
(use "RatPlusHalfExpPosS")
(use "MonIntro")
(ng #t)
(assume "p" "q" "pleq")
(ng #t)
(use "NatMaxLeLeCompat")
(use "Mon1")
(ng #t)
(use "pleq")
(use "MonElim")
(use "MonVectorUniformElim0")
(use "RealVectorConstrElim1" (pt "vVs"))
(use "Rxx")
(use "PosLeMonPred")
(use "Mon2")
(auto)
(save "ContMvAppRealOne")

;; change this after defining coercion cont -> contmv , use predicate-creator




; (add-ids
;  (list (list "PosDefMv" (make-arity (py "contmv"))))
;  '("all fmv(Contmv fmv -> 
 
;  ( |_ fmv defCmv <<= fmv defBmv & 0===fmv (ZerosRealVector (fmv defCmv dim)) )
;  &  all xx(RealVector xx -> InDomSeq xx fmv -> exl p RealLt 0 (|_ xx) p -> exl q(RealLt 0 (fmv xx) q)) -> PosDefMv fmv)" "PosDefMvIntro"))




; (set-goal "InDomAux (ZerosRealVector 2) (ContmvConstr (ZerosRational 2) 2 ([e,n1]((e__Zero)*(e__Zero) + (e__(Succ Zero))*(e__(Succ Zero)) ))([p]Zero)([p]p+3))")
; (use "InDomAuxIntro")
; (ng #t)
; (use "RatLeToRealLe")
; (ng #t)
; (use "Truth")
; (save "InDomAuxTest")



; (add-program-constant "Sum" (py "list rea=>rea"))
; (add-computation-rules "Sum (Nil rea)" "ReaRat 0"
; 		       "Sum (x::vV)" "x + Sum(vV)")

; ;; SumTotal
; (set-totality-goal "Sum")
; (use "AllTotalElim")
; (ind)
; (ng)
; (use "ReaTotalVar")
; (assume "x")
; (assume "vV")
; (assume "hyp")
; (ng)
; (use "RealPlusTotal")
; (use "ReaTotalVar")
; (use "hyp")
; ;; Proof Finished.
; (save-totality)


; (add-program-constant "AbsSum" (py "list rea=>rea"))
; (add-computation-rules "AbsSum (Nil rea)" "ReaRat 0"
; 		       "AbsSum (x::vV)" "abs(x) + AbsSum(vV)")

; ;; SumTotal
; (set-totality-goal "AbsSum")
; (use "AllTotalElim")
; (ind)
; (ng)
; (use "ReaTotalVar")
; (assume "x")
; (assume "vV")
; (assume "hyp")
; (ng)
; (use "RealPlusTotal")
; (use "ReaTotalVar")
; (use "hyp")
; ;; Proof Finished.
; (save-totality)


; (add-program-constant "AbsSumIter" (py "list rea=>nat=>rea"))
; (add-computation-rules 
; "AbsSumIter (vV) Zero" "[if (Zero<Lh vV )(abs(vV__Zero)) (ReaRat 0)]"
; 		       "AbsSumIter (vV) (Succ n)" "[if (n<Lh vV) ( AbsSumIter (vV) n +abs(vV__(Succ n)) ) (ReaRat 0)]")

; (set-totality-goal "AbsSumIter")
; (use "AllTotalElim")
; (cases)
; (use "AllTotalElim")
; (ind)
; (ng #t)
; (use "ReaTotalVar")
; (assume "n")
; (assume "Ih")
; (ng #t)
; (use "ReaTotalVar")
; (assume "x" "vV")
; (use "AllTotalElim")
; (ind)
; (ng #t)
; (use "ReaTotalVar")
; (assume "n" "Ih")
; (ng #t)
; (cases (pt "(n<=(ListLength rea)vV)"))
; (assume "case")
; (ng #t)
; (use "RealPlusTotal")
; (use "Ih")
; (use "ReaTotalVar")
; (ng #t)
; (strip)
; (use "ReaTotalVar")
; (save-totality)
;;;;;; Scratch 

(set-goal "all x,y,z(x=+=y -> y=+=z -> x=+=z)")
(cases)
(assume "as" "M")
(cases)
(assume "bs" "N")
(cases)
(assume "cs" "L")
(assume "x=y" "y=z")
(use "RealEqSIntro")
(assume "n")
(use "RatEqvTrans" (pt "(RealConstr bs N)seq n"))
(use "RealEqSElim")
(auto)
(use "RealEqSElim")
(auto)
(save "RealEqSTrans")

(set-goal "all x (x=+=x+0)")
(cases)
(assume "as" "M")
(use "RealEqSIntro")
(auto)
(save "RealEqPlusElim0")

(set-goal "all x,y,z,z1 (x=+=y -> z=+=z1 -> x+z=+=y+z1)")
(cases)
(assume "as" "M")
(cases)
(assume "bs" "N")
(cases)
(assume "cs" "L")
(cases)
(assume "cs1" "L1")
(ng #t)
(assume "x=y" "z=z1")
(use "RealEqSIntro")
(assume "n")
(ng #t)
(use "RatPlusCompat")
(inst-with-to "RealEqSElim" (pt "RealConstr as M") (pt "RealConstr bs N") "RealEqsElimInst")
(ng "RealEqsElimInst")
(auto)
(inst-with-to "RealEqSElim" (pt "RealConstr cs L") (pt "RealConstr cs1 L1") "RealEqsElimInst")
(auto)
(save "RealPlusEqsCompat")

(set-goal "all x,y,z(x=+=y -> z=+=0 -> x+z=+=y)")
(cases)
(assume "as" "M")
(cases)
(assume "bs" "N")
(cases)
(assume "cs" "L")
(assume "x=y" "z=0")
(use "RealEqSIntro")
(assume "n")
(ng #t)
(simprat (pf "bs n==bs n + 0"))
(use "RatPlusCompat")
(inst-with-to "RealEqSElim" (pt "RealConstr as M") (pt "RealConstr bs N") "RealEqsElimInst")
(ng "RealEqsElimInst")
(auto)
(inst-with-to "RealEqSElim" (pt "RealConstr cs L") (pt "ReaRat 0") "RealEqsElimInst")
(auto)
(save "RealPlusEqsCompatZero")




(add-program-constant "ElemToListCopy" (py "alpha=>nat=>list alpha"))
(add-computation-rules "(ElemToListCopy alpha) xl Zero" "(Nil alpha)"
              "(ElemToListCopy alpha) xl (Succ n)" "xl::(ElemToListCopy alpha) xl n"
)

(set-totality-goal "ElemToListCopy")
(assume "xl^" "Txl")
(use "AllTotalElim")
(ind)
(ng #t)
(use "ListTotalVar")
(assume "n" "Ih")
(ng #t)
(use "TotalListCons")
(use "Txl")
(use "Ih")
(save-totality)



;; Euclidean distance

(add-program-constant "RealVectorTwoNormSqrAux" (py "list(nat=>rat) => list(pos=>nat) => rea"))
(add-computation-rules "RealVectorTwoNormSqrAux (Nil (nat=>rat)) (Nil (pos=>nat))" "0"
"RealVectorTwoNormSqrAux (vVs) (Nil (pos=>nat))" "0"
"RealVectorTwoNormSqrAux (Nil (nat=>rat)) (MVs)" "0"
"RealVectorTwoNormSqrAux (as::vVs) (M::MVs)" "((RealConstr as M)*(RealConstr as M)+RealVectorTwoNormSqrAux vVs MVs)")

(set-totality-goal "RealVectorTwoNormSqrAux")
(use "AllTotalElim")
(ind)
(use "AllTotalElim")
(ng #t)
(assume "MVs")
(use "ReaTotalVar")
(assume "as" "vVs")
(assume "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(use "ReaTotalVar")
(assume "M" "MVs")
(ng #t)
(use "RealPlusTotal")
(use "ReaTotalVar")
(use "Ih")
(use "ListTotalVar")
(save-totality)

(add-program-constant "RealVectorTwoNormSqr" (py "realVec=>rea"))

(add-computation-rule "RealVectorTwoNormSqr xx" "RealVectorTwoNormSqrAux (xx seqs) (xx mods)")

(set-totality-goal "RealVectorTwoNormSqr")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(use "ReaTotalVar")
(save-totality)







(add-computation-rule "RealVectorTwoNorm xx" "Rsqrt(RealVectorTwoNormSqr xx)")

(set-totality-goal "RealVectorTwoNorm")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(use "ReaTotalVar")
(save-totality)




(set-goal "(ListLength nat=>rat)
          (ListReaToSeqs(RatVecToRealVectorAux e values)) eqd
          (ListLength pos=>nat)
          (ListReaToMods(RatVecToRealVectorAux e values))")
(cases)
(ind)
(ng #t)
(auto)
(use "NatEqToEqD")
(auto)
(assume "a" "rls" "Ih")
(ng #t)
(use "NatEqToEqD")
(ng #t)
(use "EqDToNatEq")
(simp "Ih")
(use "InitEqD")
(save "LheRewRule2")

(set-goal "all e RealVector(RatVecToRealVector e)")
(cases)
(ng #t)
(ind)
(ng #t)
(use "RealVectorIntro")
(ng #t)
(use "CauchyVectorNilIntro")
(auto)
(use "MonVectorNilIntro")
(auto)
(assume "a")
(cases)
(ng #t)
(assume "RvInst")
(use "RealVectorIntro")
(use "CauchyVectorOneIntro")
(use "CauchyIntro")
(ng #t)
(assume "p" "n" "m")
(assume "T" "T1")
(auto)
(use "MonVectorOneIntro")
(use "MonIntro")
(auto)
(assume "a0" "rls" "Ih")
(simp "RatVecToRealVectorAux0CompRule")
(simp "ListReaToSeqs1CompRule")
(use "RealVectorIntro")
(simp "ListReaToMods1CompRule")
(use "CauchyVectorElim5Elem")
(use "CauchyIntro")
(ng #t)
(auto)
(use "RealVectorConstrElim0")
(use "Ih")
(use "MonVectorElim5Elem")
(use "MonIntro")
(auto)
(use "RealVectorConstrElim1" (pt "ListReaToSeqs(RatVecToRealVectorAux(a0::rls))"))
(use "Ih")
(save "RatVectorRealVector")










(set-goal "all xx (RealVector xx ->Real(RealVectorTwoNormSqr xx))")
(cases)
(ind)
(ng #t)
(assume "MVs")
(assume "Rx")
(use "RealRat")
(assume "as" "vVs")
(assume "Ih")
(cases)
(ng #t)
(assume "Rx")
(use "RealRat")
(assume "M" "MVs")
(assume "Rx")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(use "RealPlusReal")
(use "RealTimesReal")
(use "RealIntro")
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim0")
(use "Rx")
(use "MonVectorHeadElim" (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rx")
(use "RealIntro")
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim0")
(use "Rx")
(use "MonVectorHeadElim" (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rx")
(use "Ih")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "Rx")
(save "RealRealVectorTwoNormSqr")

(set-goal "all xx ( RealVector xx -> 0<<= RealVectorTwoNormSqr xx)")
(cases)
(ind)
(assume "MVs")
(assume "Rx")
(ng #t)
(use "RatLeToRealLe")
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "Rx")
(ng #t)
(use "RatLeToRealLe")
(auto)
(assume "M" "MVs")
(assume "Rx")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(use "RealLeTrans" (pt "ReaRat(0)+ReaRat(0)"))
(ng #t)
(use "RatLeToRealLe")
(auto)
(use "RealLeMonPlus")
(use "RealNNegSToZeroLe")
(inst-with-to "RealTimesReal" (pt "RealConstr as M") (pt "RealConstr as M") "RealInst")
(ng "RealInst")
(use "RealInst")
(use "RealIntro")
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim0")
(use "Rx")
(use "MonVectorHeadElim" (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rx")
(use "RealIntro")
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim0")
(use "Rx")
(use "MonVectorHeadElim" (pt "MVs"))
(ng #t)
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rx")
(use "RealNNegSIntro")
(assume "n")
(ng #t)
(use "Truth")
(use "Ih")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "Rx")
(save "RealVectorTwoNormSqrNNeg")

(set-goal "all xx( RealVector xx -> (RealVectorTwoNorm xx)*(RealVectorTwoNorm xx)===RealVectorTwoNormSqr xx)")
(assume "xx" "Rx")
(simp "RealVectorTwoNorm0CompRule")
(use "RealSqrtProp")
(use "RealVectorTwoNormSqrNNeg")
(use "Rx")
(save "EuclideanSqrProp")


(set-goal "allnc xx( RealVector xx -> (RealVectorTwoNorm xx)*(RealVectorTwoNorm xx)===RealVectorTwoNormSqr xx)")
(assume "xx" "Rx")
(simp "RealVectorTwoNorm0CompRule")
(use "RealSqrtProp")
(use "RealVectorTwoNormSqrNNeg")
(use "Rx")
(save "EuclideanSqrPropNC")




(set-goal "(ListLength rat)(vVs n)=(ListLength nat=>rat)vVs")
(ind)
(ng #t)
(auto)
(save "LhAppRew1")




(set-goal "(ListLength nat=>rat)vVs=(ListLength nat=>rat)vVs0 -> all n0(ListLength rat)(vVs n0)=(ListLength rat)(vVs0 n0)")
(assume "vVs" "vVs0")
(assume "case")
(assume "n")
(simp "LhAppRew1")
(simp "LhAppRew1")
(auto)
(save "LhAppRew2")

(set-goal "all xx,yy (xx === yy -> all p exl n1 all n(n1<=n -> |_ (RatVecConstr(RealVecSeqs xx n)+ ~(RatVecConstr(RealVecSeqs yy n)))<=(1#2**p)))")
(cases)
(ind)
(assume "MVs")
(cases)
(ng #t)
(assume "vVs0")
(assume "MVs0")
(assume "xeqy")
(assume "p")
(intro 0 (pt "Zero"))
(assume "n" "0len")
(use "Truth")
(assume "as" "vVs" "Ih")
(cases)
(cases)
(cases)
(ng #t)
(assume "MVs0")
(assume "xeqy")
(assume "p")
(intro 0 (pt "Zero"))
(assume "n" "0len")
(use "Truth")
(ng #t)
(assume "as0" "vVs0" "MVs0") 
(assume "xeqy")
(assume "p")
(intro 0 (pt "Zero"))
(use "Efq")
(assert "RealVector(RealVecConstr(as::vVs)(Nil pos=>nat))")
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)MVs0"))
(use "xeqy")
(assume "Rv")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(use "Rv")
(assume "M" "MVs")
(cases)
(cases)
(ng #t)
(assume "MVs0")
(assume "xeqy")
(assume "p")
(intro 0 (pt "Zero"))
(assume "n" "0len")
(use "Truth")
(assume "as0" "vVs0")
(cases)
(assume "xeqy")
(assume "p")
(intro 0 (pt "Zero"))
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as0::vVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "xeqy")
(assume "M0" "MVs0")
(assume "xeqy")
(assume "p")
(inst-with-to "Ih" (pt "MVs") (pt "RealVecConstr(vVs0)(MVs0)") "Ihspec")
(assert "all p exl n all n0(n<=n0 -> |_((RatVecConstr (RealVecSeqs(RealVecConstr vVs MVs)n0))+ ~(RatVecConstr (RealVecSeqs(RealVecConstr vVs0 MVs0)n0)))<=(1#2**p))")
(use "Ihspec")
(use "RealVectorConstrEqElim3Elem" (pt "M") (pt "M0") (pt "as") (pt "as0"))
(use "xeqy")
(assume "IhPart")
(inst-with-to "IhPart" (pt "p") "IhPartSpec")
(ng #t)
(by-assume "IhPartSpec" "n" "IhPartSpecProp")
(intro 0 (pt "M(PosS(PosS p))max M0(PosS(PosS p)) max n"))
(assume "n0" "nlen0")
(simp "RatVecUMinusAuxLhId")
(assert "(ListLength rat)(vVs n0)=(ListLength rat)(vVs0 n0)")
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") "CompatInst")
(ng "CompatInst")
(assert "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs) (Succ((ListLength nat=>rat)vVs)) Zero]=[if ((ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0) (Succ((ListLength nat=>rat)vVs0)) Zero]")
(use "CompatInst")
(use "RealVectorEqComponentsElim0")
(use "xeqy")
(simp "RealVectorElim2")
(simp "RealVectorElim2")
(ng #t)
(assume "Lhcond")
(simp "LhAppRew2")
(auto)
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorEqElim1" (pt " RealVecConstr(as::vVs)(M::MVs)"))
(use "xeqy")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorEqElim0" (pt " RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "xeqy")
(assume "Assertion")
(simp "Assertion")
(ng #t)
(use "RatLeTrans" (pt "(1#2**p)max ratListAbsMax(RatVecPlusAux(vVs n0)(RatVecUMinusAux(vVs0 n0)))"))
(use "RatMaxLeLeCompat")
(use "RealEqCharOneExFree" (pt "M") (pt "M0"))
(inst-with-to "RealVectorEqComponentsElim1" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") "RealeqInst")
(assert "all n(
              n<(RealVecConstr(as::vVs)(M::MVs))dim ->
              RealVecConstr(as::vVs)(M::MVs)__n===RealVecConstr(as0::vVs0)(M0::MVs0)__n)")
(use "RealeqInst")
(use "xeqy")
(drop "RealeqInst")
(assume "RealeqInst2")
(inst-with-to "RealeqInst2" (pt "Zero") "RealEqInst3")
(use "RealEqInst3")
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(animate "RealEqCharOne")
(ng #t)
(use "NatLeTrans" (pt "M(PosS(PosS p))max M0(PosS(PosS p))max n"))
(use "NatMaxUB1")
(use "nlen0")
(use "RatMaxLUB")
(auto)
(cut "ratListAbsMax
                     [if ((ListLength rat)(vVs n0)=
                           (ListLength rat)(RatVecUMinusAux(vVs0 n0)))
                       (RatVecConstr
                       (RatVecPlusAux(vVs n0)(RatVecUMinusAux(vVs0 n0))))
                       (RatVecConstr(Nil rat))]values<=
                     (1#2**p)")
(simp "RatVecUMinusAuxLhId")
(simp "RatVecUMinusAuxLhId")
(simp "Assertion")
(ng #t)
(auto)
(use "IhPartSpecProp")
(use "NatLeTrans" (pt "M(PosS(PosS p))max M0(PosS(PosS p))max n"))
(use "NatMaxUB2")
(auto)
(save "RealVectorEqChar1")

(add-sound "RealVectorEqChar1")

(add-var-name "cveq" (py "realVec=>realVec=>pos=>nat"))

(set-goal "all xx,yy (xx===yy -> all p exnc m (m eqd (cRealVectorEqCharOne xx yy p) andnc all n( m<=n ->  |_ (RatVecConstr(RealVecSeqs xx n)+ ~(RatVecConstr(RealVecSeqs yy n)))<=(1#2**p)) ))")
(assume "xx" "yy" "x=y")
(assume "p")
(intro 0 (pt "(cRealVectorEqCharOne xx yy p)"))
(split)
(use "InitEqD")
(use-with "ExLTMRElim" (py "nat") (make-cterm (pv "m") (pf "all n0(m<=n0 -> |_( RatVecConstr(RealVecSeqs xx n0)+ ~(RatVecConstr(RealVecSeqs yy n0)))<=(1#2**p))")) (pt "cRealVectorEqCharOne xx yy p") "?")
(use "RealVectorEqChar1Sound")
(auto)
(save "RealVectorEqChar1SoundCorr")

(set-goal "all xx,yy (xx === yy -> all p  all n(cRealVectorEqCharOne xx yy p <=n -> |_ (RatVecConstr(RealVecSeqs xx n)+ ~(RatVecConstr(RealVecSeqs yy n)))<=(1#2**p)))")
(assume "xx" "yy" "x=y")
(assume "p")
(inst-with-to "RealVectorEqChar1SoundCorr" (pt "xx") (pt "yy") "Inst1")
(assert "all p 
            exnc m(
             m eqd cRealVectorEqCharOne xx yy p andnc 
             all n(
              m<=n -> |_ (RatVecConstr(RealVecSeqs xx n)+ ~(RatVecConstr(RealVecSeqs yy n)))<=(1#2**p)))")
(use "Inst1")
(auto)
(assume "Inst2")
(inst-with-to "Inst2" (pt "p") "Inst2Final")
(by-assume "Inst2Final" "m" "Inst2FinalProp")
(simp "<-" "Inst2FinalProp")
(use "Inst2FinalProp")
(save "RealVectorEqChar1ExFree")

(set-goal "all vVs,MVs,vVs0,MVs0 (RealVecConstr vVs MVs === RealVecConstr vVs0 MVs0 -> all p exl n1 all n(n1<=n -> |_ (RatVecConstr(vVs n)+ ~(RatVecConstr(vVs0 n)))<=(1#2**p)))")
(assume "vVs" "MVs" "vVs0" "MVs0")
(assume "x=y")
(inst-with-to "RealVectorEqChar1" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "RealVEqInst")
(use "RealVEqInst")
(use "x=y")
(save "RealVectorEqChar1ConstrFree")
(animate "RealVectorEqChar1ConstrFree")




(set-goal " Zero<xx dim -> RealVector xx -> (xx__Zero)===Head(xx values)")
(ind)
(ind)
(assume "MVs")
(ng)
(use "Efq")
(assume "as" "vVs" "Ih")
(cases)
(ng #t)
(use "Efq")
(assume "M" "MVs")
(assume "dim")
(assume "Rv")
(use "RealEqRefl")
(use "RealIntro")
(ng #t)
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(use "RealVectorConstrElim0")
(auto)
(use "MonVectorHeadElim" (pt "MVs") )
(use "RealVectorConstrElim1" (pt "as::vVs"))
(ng #t)
(auto)
(save "HeadRealEqFirst")


(add-program-constant "RealVectorConcat" (py "rea=>realVec=>realVec"))
(add-computation-rules "RealVectorConcat x xx" "RealVecConstr (x seq::(xx seqs)) (x mod::xx mods)")
(set-totality-goal "RealVectorConcat")
(use "AllTotalElim")
(cases)
(assume "as" "M")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)

(add-program-constant "RealVectorAppend" (py "rea=>realVec=>realVec"))
(add-computation-rules "RealVectorAppend x xx" "RealVecConstr ((xx seqs)++ (x seq:)) ((xx mods)++ (x mod:))")
(set-totality-goal "RealVectorAppend")
(use "AllTotalElim")
(cases)
(assume "as" "M")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(ng #t)
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(save-totality)

(set-goal "all xx,x,n(n<xx dim -> xx__n eqd (RealVectorAppend x xx)__n)")
(cases)
(ind)
(assume "MVs")
(assume "x" "n")
(ng #t)
(use "Efq")
(assume "as" "vVs")
(assume "Ih")
(cases)
(assume "x" "n")
(ng #t)
(use "Efq")
(assume "M" "MVs" "x") 
(cases)
(ng #t)
(strip)
(use "InitEqD")
(assume "n" "Cond")
(ng #t)
(use "Ih")
(ng "Cond")
(ng #t)
(cut "Succ n< [if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)(Succ((ListLength nat=>rat)vVs)) Zero]")
(cases (pt "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs"))
(assume "dimprop")
(auto)
(save "RealVecNthRealVectorAppendProp")

(set-goal "all vVs,MVs,x(RealVector (RealVecConstr vVs MVs) -> RealVectorDataToListRea(vVs++x seq:)(MVs++x mod:) eqd RealVectorDataToListRea(vVs)(MVs) ++ (x:))")
(ind)
(ng #t)
(cases)
(assume "x" "Rv")
(ng #t)
(use "ListSingletonEqd")
(simp "<-" "TotalReaToEqD")
(use "InitEqD")
(use "ReaTotalVar")
(assume "M" "MVs")
(assume "x")
(assume "Rv")
(inst-with-to "CauchyVectorElim0" (pt "(Nil nat=>rat)") (pt "(M::MVs)") "Cinst")
(use "Efq")
(use "Cinst")
(use "RealVectorConstrElim0")
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "x" "Rv")
(inst-with-to "CauchyVectorElim1" (pt "(as::vVs)") (pt "(Nil pos=>nat)") "Cinst")
(use "Efq")
(use "Cinst")
(use "RealVectorConstrElim0")
(auto)
(assume "M" "MVs" "x")
(assume "Rv")
(ng #t)
(use "ListConsEqd")
(use "InitEqD")
(use "Ih")
(use "RealVectorIntro")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rv")
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(save "RealVectorDataToListReaAppend0")


(set-goal "all xx,x,n(RealVector xx -> n=xx dim -> x eqd (RealVectorAppend x xx)__n)")
(cases)
(ind)
(cases)
(ng #t)
(assume "x" "n")
(ng #t)
(assume "cond")
(assume "n=Zero")
(simp "n=Zero")
(ng #t)
(use "TotalReaToEqD")
(use "ReaTotalVar")
(assume "M" "MVs")
(assume "x" "n")
(assume "Rv")
(inst-with-to "CauchyVectorElim0" (pt "(Nil nat=>rat)") (pt "(M::MVs)") "CElim")
(ng "CElim")
(use "Efq")
(use "CElim")
(use "RealVectorConstrElim0")
(auto)
(assume "as" "vVs")
(assume "Ih")
(cases)
(assume "x" "n")
(assume "Rv")
(inst-with-to "CauchyVectorElim1" (pt "(as::vVs)") (pt "(Nil pos=>nat)") "CElim")
(ng "CElim")
(use "Efq")
(use "CElim")
(use "RealVectorConstrElim0")
(auto)
(assume "M")
(assume "MVs" "x" "n")
(assume "Rv" "ncond")
(simp "ncond")
(ng #t)
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(use "CauchyVectorElim2")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(auto)
(assume "Assertion")
(simp "Assertion")
(ng #t)
(simp "RealVectorDataToListReaAppend0")
(simp (pf "(ListLength nat=>rat)vVs eqd Pred(Lh (RealVectorDataToListRea vVs MVs++x:))"))
(simp "<-" "ListLastEqPredLengthN")
(simp "LastAppdRewRule")
(ng #t)
(use "InitEqD")
(auto)
(ng #t)
(assert "all vVs,MVs((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs->(ListLength nat=>rat)vVs eqd (ListLength rea)(RealVectorDataToListRea vVs MVs))")
(ind)
(ng #t)
(assume "MVs0")
(assume "Z")
(use "InitEqD")
(assume "as0" "vVs0")
(assume "Ih0")
(cases)
(ng #t)
(use "Efq")
(assume "M0" "MVs0")
(ng #t)
(assume "case")
(use "NatEqToEqD")
(ng #t)
(simp "<-" "Ih0")
(auto)
(use "RealVectorIntro")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rv")
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "(as::vVs)"))
(auto)
(save "LastRealVectorAppendProp")


(set-goal "all xx,x,n(Zero<xx dim ->xx dim=n -> (RealVectorAppend x xx) dim = Succ n )")
(cases)
(assume "vVs" "MVs" "x" "n")
(ng #t)
(cases (pt "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs"))
(assume "case")
(ng #t)
(auto)
(save "RealVectorAppendSuccDim")

(set-goal "all xx,x,n( RealVector xx -> xx dim=n -> (RealVectorAppend x xx) dim = Succ n )")
(cases)
(assume "vVs" "MVs")
(assume "x" "n")
(assume "Rv")
(ng #t)
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(use "RealVectorElim2")
(auto)
(assume "assertion")
(simp "assertion")
(auto)
(save "RealVectorAppendSuccDimReal")



(set-goal "all xx(RealVector xx -> RealVectorCompatible xx xx)")
(cases)
(assume "vVs" "MVs" "Rxx")
(use "RealVectorCompatibleIntro")
(auto)
(save "RealVectorCompatibleRefl")

(set-goal "all vVs (Lh (SeqsUMinus vVs) = Lh vVs)")
(ind)
(auto)
(save "RealVectorUMinusLhAux")
;(add-rewrite-rule "(ListLength nat=>rat)(SeqsUMinus vVs)" "(ListLength nat=>rat)vVs")



(set-goal "all xx(RealVector xx -> RealVectorCompatible xx (~xx))")
(cases)
(assume "vVs" "MVs" "Rxx")
(use "RealVectorCompatibleIntro")
(auto)
(use "RealVectorUMinusReal")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(simp "RealVectorUMinusLhAux")
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(auto)
(use "RealVectorConstrElim0")
(auto)
(save "RealVectorUMinusCompatible")

(set-goal "RealVectorCompatible xx yy -> RealVectorCompatible yy xx")
(assume "xx" "yy")
(assume "Rcomp")
(use "RealVectorCompatibleIntro")
(use "RealVectorCompatibleElim1" (pt "xx"))
(auto)
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(simp "NatEqSym")
(use "RealVectorCompatibleElim2")
(auto)
(save "RealVectorCompatibleSym")


(set-goal "RealVectorCompatible xx yy -> Lh (xx seqs)=Lh (yy seqs)")
(cases)
(assume "vVs" "MVs")
(cases)
(assume "vVs0" "MVs0")
(assume "Rcomp")
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst")
(cut "(RealVecConstr vVs MVs)dim=(RealVecConstr vVs0 MVs0)dim")
(ng #t)
(cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(assume "cut1")
(cut "(ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0")
(assume "cut2")
(simp "cut1")
(simp "cut2")
(auto)
(dcg)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr vVs MVs)"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
(auto)
(save "RealVectorCompatibleElim3Length")

(set-goal "all vVs,MVs,vVs0,MVs0(RealVectorCompatible (RealVecConstr vVs MVs) (RealVecConstr vVs0 MVs0) -> Lh (vVs)=Lh (vVs0))")
(assume "vVs" "MVs")
(assume "vVs0" "MVs0")
(assume "Rcomp")
(inst-with-to "RealVectorCompatibleElim3Length"   (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst")
(ng "Inst")
(use "Inst")
(auto)
(save "RealVectorConstrCompatibleElim3Length")





(set-goal "RealVectorCompatible xx yy ->RealVectorCompatible xx(~yy)")
(assume "xx" "yy")
(assume "Rcomp")
(use "RealVectorCompatibleIntro")
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(use "RealVectorUMinusReal")
(use "RealVectorCompatibleElim0" (pt "xx"))
(use "RealVectorCompatibleSym")
(auto)
(ng #t)
(ng #t)
(simp "RealVectorUMinusLhAux")
(simp "CauchyVectorElim2")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(use "RealVectorCompatibleElim3Length")
(auto)
(use "RealVectorElim0")
(use "RealVectorCompatibleElim1" (pt "xx"))
(auto)
(use "RealVectorElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(save "RealVectorCompatibleMinus")




(set-goal "all vVs,vVs0,MVs,MVs0 (Lh vVs = Lh MVs  ->Lh vVs = Lh vVs0 -> Lh MVs = Lh MVs0 -> Lh (vVs sqpl vVs0) = Lh (MVs mpl MVs0))")
(ind)
(cases)
(ng #t)
(cases)
(cases)
(ng #t)
(auto)
(assume "M")
(assume "MVs")
(cases)
(ng #t)
(auto)
(ng #t)
(assume "as")
(assume "vVs")
(assume "MVs" "MVs0")
(assume "cond")
(use "Efq")
(assume "as" "vVs")
(assume "Ih")
(cases)
(ng #t)
(assume "MVs" "MVs0")
(assume "cond")
(use "Efq")
(assume "as0" "vVs0")
(cases)
(ng #t)
(assume "MVs")
(use "Efq")
(assume "M")
(assume "MVs")
(cases)
(ng #t)
(assume "cond")
(auto)
(save "RealVectorPlusCompatibleAux1")



(set-goal "all xx,yy (RealVectorCompatible xx yy -> (xx + yy)dim=(xx dim))")
(cases)
(ind)
(cases)
(cases)
(cases)
(ng #t)
(cases)
(ng #t)
(auto)
(assume "as")
(assume "vVs")
(assume "Ih")
(cases)
(cases)
(ng #t)
(cases)
(ng #t)
(auto)
(assume "M")
(assume "MVs")
(cases)
(cases)
(ng #t)
(cases)
(ng #t)
(assume "Rcomp")
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(Nil nat=>rat)(Nil pos=>nat))"))
(auto)
(assume "case")
(simp "case")
(ng #t)
(inst-with-to "RealVectorCompatibleElim2" (pt "(RealVecConstr(as::vVs)(M::MVs))") (pt "(RealVecConstr(Nil nat=>rat)(Nil pos=>nat))") "Inst")
(ng "Inst")
(cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
         (Succ((ListLength nat=>rat)vVs))
         Zero]=
       Zero")
(simp "case")
(auto)
(assume "M0")
(assume "MVs0")
(assume "rcomp")
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(Nil nat=>rat)(M0::MVs0)"))
(auto)
(assume "case")
(simp "case")
(ng #t)
(inst-with-to "RealVectorCompatibleElim2" (pt "(RealVecConstr(as::vVs)(M::MVs))") (pt "(RealVecConstr(Nil nat=>rat)(M0::MVs0))") "Inst")
(ng "Inst")
(cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
         (Succ((ListLength nat=>rat)vVs))
         Zero]=
       Zero")
(simp "case")
(auto)
(assume "as0")
(assume "vVs0")
(cases)
(ng #t)
(assume "Rcomp")
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(Nil pos=>nat))"))
(auto)
(assume "case")
(simp "case")
(ng #t)
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "(RealVecConstr(as0::vVs0)(Nil pos=>nat))") "Inst")
(ng)
(cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
         (Succ((ListLength nat=>rat)vVs))
         Zero]=
       Zero")
(simp "case")
(auto)
(assume "M0" "MVs0")
(assume "Rcomp")
(ng #t)
(assert "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(assume "cond1")
(assert "(ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0")
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(assume "cond2")
(assert "(ListLength nat=>rat)(vVs sqpl vVs0)=(ListLength pos=>nat)(MVs mpl MVs0)")
(use "RealVectorPlusCompatibleAux1")
(auto)
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))") "Rinst")
(ng "Rinst")
(cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
          (Succ((ListLength nat=>rat)vVs))
          Zero]=
        [if ((ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0)
          (Succ((ListLength nat=>rat)vVs0))
          Zero]")
(simp "cond1")
(simp "cond2")
(auto)
(simp "<-" "cond2") 
(simp "<-" "cond1") 
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))") "Rinst")
(ng "Rinst")
(cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
          (Succ((ListLength nat=>rat)vVs))
          Zero]=
        [if ((ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0)
          (Succ((ListLength nat=>rat)vVs0))
          Zero]")
(simp "cond1")
(simp "cond2")
(auto)
(assume "mainassertion")
(simp "mainassertion")
(ng #t)
(simp "cond1")
(ng #t)
(inst-with-to "Ih" (pt "MVs") (pt "RealVecConstr(vVs0)(MVs0)") "IhInst")
(ng "IhInst")
(cut "[if ((ListLength nat=>rat)(vVs sqpl vVs0)=
               (ListLength pos=>nat)(MVs mpl MVs0))
           ((ListLength nat=>rat)(vVs sqpl vVs0))
           Zero]=
         [if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
           ((ListLength nat=>rat)vVs)
           Zero]")
(simp "mainassertion")
(simp "cond1")
(auto)
(use "IhInst")
(use "RealVectorCompatibleIntro")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(auto)
(ng #t)
(simp "cond1")
(simp "cond2")
(ng #t)
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") "InstDim")
(ng "InstDim")
(cut " [if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
            (Succ((ListLength nat=>rat)vVs))
            Zero]=
          [if ((ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0)
            (Succ((ListLength nat=>rat)vVs0))
            Zero]")
(simp "cond1")
(simp "cond2")
(ng #t)
(auto)
(save "RealVectorPlusDimCompatible")


(set-goal "all vVs,MVs,as,M (RealVector (RealVecConstr vVs MVs) -> Real(RealConstr as M) -> RealVector (RealVecConstr (as::vVs) (M::MVs)))")
(assume "vVs" "MVs" "as" "M")
(assume "Rxx" "Rx")
(use "RealVectorIntro")
(ng #t)
(use "CauchyVectorElim5Elem")
(use "RealConstrToCauchy")
(auto)
(use "RealVectorConstrElim0")
(auto)
(ng #t)
(use "MonVectorElim5Elem")
(use "RealConstrToMon" (pt "as"))
(auto)
(use "RealVectorConstrElim1" (pt "vVs"))
(auto)
(save "RealVectorConstrElim5Elem")


(set-goal "all vVs,vVs0,MVs,MVs0,as,M,as0,M0(RealVecConstr vVs MVs === RealVecConstr vVs0 MVs0 -> RealConstr as M === RealConstr as0 M0 -> RealVecConstr (as::vVs) (M::MVs) === RealVecConstr (as0::vVs0) (M0::MVs0))")
(assume "vVs" "vVs0" "MVs" "MVs0" "as" "M" "as0" "M0")
(assume "xx=yy")
(assume "x=y")
(use "RealVectorEqComponentsIntro")
(use "RealVectorCompatibleIntro")
(use "RealVectorConstrElim5Elem")
(use "RealVectorEqElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealEqElim0" (pt "RealConstr as0 M0")) 
(auto)
(use "RealVectorConstrElim5Elem")
(use "RealVectorEqElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "RealEqElim1" (pt "RealConstr as M"))
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst")
(cut "[if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
         ((ListLength nat=>rat)vVs)
         Zero]=
       [if ((ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0)
         ((ListLength nat=>rat)vVs0)
         Zero]")
(simp "CauchyVectorElim2")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "Inst")
(use "RealVectorEqComponentsElim0")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(cases)
(assume "Lhc")
(ng #t)
(auto)
(assume "n")
(assume "lhcond")
(ng #t)
(inst-with-to "RealVectorEqComponentsElim1" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst")
(use "Inst")
(auto)
(ng "lhcond")
(cut "Succ n<
                     [if ((ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs)
                       (Succ((ListLength nat=>rat)vVs))
                       Zero]")
(simp "CauchyVectorElim2")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(save "RealVectorEqHeadElim")

(set-goal "RealVector(RealVecConstr (Nil nat=>rat)(Nil pos=>nat))")
(use "RealVectorIntro")
(use "CauchyVectorNilIntro")
(auto)
(use "MonVectorNilIntro")
(auto)
(save "RealVectorNilElim")


(set-goal "RealVecConstr(Nil nat=>rat)(Nil pos=>nat)===RealVecConstr(Nil nat=>rat)(Nil pos=>nat)")
(use "RealVectorEqRefl")
(use "RealVectorNilElim")
(save "RealVectorEqNilElim")

(set-goal "all xx(RealVector xx -> xx+ ~xx===ZerosRealVector(xx+ ~xx)dim)")
(cases)
(ind)
(ng #t)
(cases)
(ng #t)
(assume "Rxx")
(use "RealVectorEqNilElim")
(assume "M" "MVs")
(ng #t)
(assume "Rxx")
(use "Efq")
(use "CauchyVectorInvalid1"(pt "M::MVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "Rxx")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "M")
(assume "MVs")
(assume "Rx")
(simp "RealVectorPlusDimCompatible")
(simp "ZerosRealVector0CompRule")
(simp (pf "(RealVecConstr(as::vVs)(M::MVs))dim=(Succ((ListLength nat=>rat)vVs))"))
(simp "ZerosRealVectorSeqs1CompRule")
(simp "ZerosRealVectorMods1CompRule")
(use "RealVectorEqHeadElim")
(inst-with-to "Ih" (pt "MVs") "InInst")
(cut "RealVecConstr vVs MVs+ ~(RealVecConstr vVs MVs)===ZerosRealVector(RealVecConstr vVs MVs+ ~(RealVecConstr vVs MVs))dim")
(simp "RealVectorPlusDimCompatible")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(use "RealVectorUMinusCompatible")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(use "Ih")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(use "RealEqSToEq")
(use "RealIntro")
(ng #t)
(use "CauchyDiffModAuxCauchy" (pt "M"))
(use "RealConstrToCauchy")
(use "RealEqSToRealElim" (pt "RealConstr ([n] 0) M"))
(ng #t)
(use "RealEqSIntro")
(ng #t)
(assume "n")
(use "RatEqvSym")
(auto)
(ng #t)
(realproof)
(assume "p")
(ng #t)
(use "MonElim")
(use "RealConstrToMon" (pt "as"))
(use "RealIntro")
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(use "RealVectorConstrElim0")
(auto)
(use "MonVectorHeadElim" (pt "MVs"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(use "MonIntro")
(assume "p" "q" "p<=q")
(ng #t)
(use "MonElim")
(use "MonVectorHeadElim" (pt "MVs"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(realproof)
(use "RealEqSIntro")
(assume "n")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(use "RealVectorUMinusCompatible")
(auto)
(save "RealVectorPlusMinusZero")

(set-goal "all xx(RealVector xx -> xx+ ~xx===ZerosRealVector(xx)dim)")
(assume "xx" "Rxx")
(simp "<-" "RealVectorPlusDimCompatible" (pt "~xx"))
(use "RealVectorPlusMinusZero")
(auto)
(use "RealVectorUMinusCompatible")
(auto)
(save "RealVectorPlusMinusZeroA")


(set-goal "all MVs,xx ( Zero < xx dim -> RealVecConstr(Nil nat=>rat)MVs===xx -> F)")
(assume "MVs" "xx" "Lhcond" "Req")
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(Nil nat=>rat)MVs") (pt "xx") "Inst")
(cut "(RealVecConstr(Nil nat=>rat)MVs)dim=xx dim")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(assume "Inst2")
(use "NatZeroLtToNotEq" (pt "(ListLength nat=>rat)(RealVecSeqs xx)"))
(cut "Zero<[if ((ListLength nat=>rat)(RealVecSeqs xx)=(ListLength pos=>nat)(RealVecMods xx))((ListLength nat=>rat)(RealVecSeqs xx))Zero]")
(simp "CauchyVectorElim2")
(ng #t)
(auto)
(use "RealVectorElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr(Nil nat=>rat)MVs"))
(auto)
(simp "Inst2")
(auto)
(use "RealVectorElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr(Nil nat=>rat)MVs"))
(auto)
(use "Inst")
(use "RealVectorEqComponentsElim0")
(auto)
(save "RealVectorEqInvalid0")

(set-goal "all vVs,xx ( Zero < xx dim -> RealVecConstr vVs(Nil pos=>nat)===xx -> F)")
(assume "vVs" "xx" "Lhcond" "Req")
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr vVs(Nil pos=>nat)") (pt "xx") "Inst")
(cut "(RealVecConstr vVs(Nil pos=>nat))dim=xx dim")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(cases (pt "(ListLength nat=>rat)vVs=Zero"))
(ng #t)
(assume "case")
(simp "case")
(assume "Inst2")
(use "NatZeroLtToNotEq" (pt "(ListLength nat=>rat)(RealVecSeqs xx)"))
(cut "Zero<[if ((ListLength nat=>rat)(RealVecSeqs xx)=(ListLength pos=>nat)(RealVecMods xx))((ListLength nat=>rat)(RealVecSeqs xx))Zero]")
(simp "CauchyVectorElim2")
(ng #t)
(auto)
(use "RealVectorElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr vVs(Nil pos=>nat)"))
(auto)
(simp "Inst2")
(auto)
(assume "case2")
(ng #t)
(assume "Inst2")
(use "NatZeroLtToNotEq" (pt "(ListLength nat=>rat)(RealVecSeqs xx)"))
(cut "Zero<[if ((ListLength nat=>rat)(RealVecSeqs xx)=(ListLength pos=>nat)(RealVecMods xx))((ListLength nat=>rat)(RealVecSeqs xx))Zero]")
(simp "CauchyVectorElim2")
(ng #t)
(auto)
(use "RealVectorElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr vVs(Nil pos=>nat)"))
(auto)
(simp "Inst2")
(auto)
(use "RealVectorElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr vVs(Nil pos=>nat)"))
(auto)
(use "Inst")
(use "RealVectorEqComponentsElim0")
(auto)
(save "RealVectorEqInvalid1")



(set-goal "all xx,yy,zz(RealVector zz ->xx === yy -> xx+ zz===yy+zz)")
(cases)
(ind)
(cases)
(cases)
(cases)
(cases)
(cases)
(cases)
(cases)
(assume "Tr")
(ng #t)
(assume "Cond")
(use "RealVectorEqNilElim")
(assume "M" "MVs")
(assume "Rv")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M::MVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "M" "MVs" "zz" "Rzz" "Cond")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M::MVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr(Nil nat=>rat)(Nil pos=>nat)"))
(auto)
(assume "as" "vVs")
(assume "MVs" "zz" "Rzz" "Rv")
(use "Efq")
(use "RealVectorEqInvalid1" (pt "(Nil nat=>rat)") (pt "RealVecConstr(as::vVs)MVs"))
(ng #t)
(simp "<-" "CauchyVectorElim2" (pt "(as::vVs)"))
(ng #t)
(use "Truth")
(use "RealVectorConstrElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr(Nil nat=>rat)(Nil pos=>nat)"))
(auto)
(assume "M" "MVs" "yy" "zz")
(assume "Rzz" "Rv")
(use "Efq")
(use "RealVectorEqInvalid0" (pt "(M::MVs)") (pt "yy"))
(simp "RealVectorCompatibleElim2" (pt "RealVecConstr(Nil nat=>rat)(M::MVs)"))
(simp "RealVectorDim0CompRule")
(simp "RealVectorSeqModDim0CompRule")
(simp"CauchyVectorElim2")
(simp "CauchyVectorElim2" (pt "(M::MVs)"))
(ng #t)
(use "Truth")
(ng #t)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "yy"))
(auto)
(ng #t)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "yy"))
(auto)
(use "RealVectorEqComponentsElim0")
(use "RealVectorEqSym")
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "yy" "zz")
(assume "Rzz" "Req") 
(use "Efq")
(use "RealVectorEqInvalid1" (pt "(as::vVs)") (pt "yy"))
(simp "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(Nil pos=>nat)"))
(simp "RealVectorDim0CompRule")
(simp "RealVectorSeqModDim0CompRule")
(simp"CauchyVectorElim2")
(auto)
(ng #t)
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "yy"))
(auto)
(use "RealVectorEqComponentsElim0")
(use "RealVectorEqSym")
(auto)
(assume "M" "MVs")
(cases)
(cases)
(assume "MVs0" "zz" "Rz" "Req")
(use "Efq")
(use "RealVectorEqInvalid0" (pt "MVs0") (pt "RealVecConstr(as::vVs)(M::MVs)"))
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorEqElim0" (pt "RealVecConstr(Nil nat=>rat)MVs0"))
(auto)
(use "RealVectorEqSym")
(auto)
(assume "as0" "vVs0")
(cases)
(assume "zz" "Rzz" "Req") 
(use "Efq")
(use "RealVectorEqInvalid1" (pt "(as0::vVs0)") (pt "RealVecConstr(as::vVs)(M::MVs)"))
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(Nil pos=>nat)"))
(auto)
(use "RealVectorEqSym")
(auto)
(assume "M0" "MVs0")
(cases)
(cases)
(cases)
(ng #t)
(assume "Rx1" "Rx2")
(use "RealVectorEqNilElim")
(assume "M1")
(assume "MVs1")
(assume "Rv")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M1::MVs1"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "as1")
(assume "vVs1")
(cases)
(assume "Rxx")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as1::vVs1"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "M1" "MVs1" "Rzz" "REq")
(simp "RealVectorPlus0CompRule")
(simp "RealVectorPlus0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "SeqsPlus3CompRule")
(simp "SeqsPlus3CompRule")
(simp "SeqsPlus3CompRule")
(simp "ModsPlus3CompRule")
(simp "ModsPlus3CompRule")
(use "RealVectorEqHeadElim")
(inst-with-to "Ih" (pt "MVs") (pt "RealVecConstr(vVs0)(MVs0)") (pt "RealVecConstr(vVs1)(MVs1)") "IhInst")
(use "IhInst")
(use "RealVectorConstrElim4Elem" (pt "as1") (pt "M1"))
(auto)
(use "RealVectorConstrEqElim3Elem" (pt "M") (pt "M0") (pt "as") (pt "as0"))
(auto)
(simp "<-" "RealPlus0CompRule")
(simp "<-" "RealPlus0CompRule")
(use "RealPlusCompat")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorEqComponentsElim1")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "InitEqD")
(use "InitEqD")
(use "RealEqRefl")
(simp (pf "RealConstr as1 M1 eqd RealVecConstr(as1::vVs1)(M1::MVs1)__Zero"))
(use "RealVectorRealComponentWise")
(auto)
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as1") (pt "M1"))
(use "RealVectorConstrElim0")
(auto)
(use "InitEqD")
(save "RealVectorPlusCompatSimple")

(set-goal "RealVectorCompatible(RealVecConstr(as::vVs)(M::MVs))(RealVecConstr(Nil nat=>rat)MVs0) -> F")
(assume "as" "vVs" "M" "MVs" "MVs0")
(assume "Rcomp")
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "(RealVecConstr(Nil nat=>rat)MVs0)") "Inst")
(cut "(RealVecConstr(as::vVs)(M::MVs))dim=(RealVecConstr(Nil nat=>rat)MVs0)dim")
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(Nil nat=>rat)MVs0)"))
(auto)
(save "RealVectorCompatibleInvalid1")

(set-goal "all xx,yy(RealVectorCompatible xx yy ->RealVector(xx+yy))")
(cases)
(ind)
(ng #t)
(cases)
(ng #t)
(assume "yy")
(assume "Rcomp")
(use "RealVectorNilElim")
(assume "M" "MVs" "yy")
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "(M::MVs)"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(assume "as" "vVs")
(assume "Ih")
(cases)
(assume "yy" "Rcomp") 
(use "Efq")
(use "CauchyVectorInvalid0" (pt "(as::vVs)"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(assume "M" "MVs")
(cases)
(cases)
(assume "MVs0")
(assume "Rcomp")
(use "Efq")
(use "RealVectorCompatibleInvalid1" (pt "as") (pt "vVs") (pt "M") (pt "MVs") (pt "MVs0"))
(auto)
(assume "as0" "vVs0")
(cases)
(assume "Rcomp")
(cut "(RealVecConstr(as::vVs)(M::MVs)) dim = (RealVecConstr(as0::vVs0)(Nil pos=>nat)) dim")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(assume "F")
(use "Efq")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(Nil pos=>nat))"))
(auto)
(use "RealVectorCompatibleElim2")
(auto)
(assume "M0" "MVs0")
(assume "Rcomp")
(ng #t)
(use "RealVectorConstrElim5Elem")
(inst-with-to "Ih" (pt "MVs") (pt "RealVecConstr vVs0 MVs0") "IhInst")
(use "IhInst")
(use "RealVectorCompatibleIntro")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(cut "(RealVecConstr(as::vVs)(M::MVs)) dim = (RealVecConstr(as0::vVs0)(M0::MVs0)) dim")
(simp "CauchyVectorElim2")
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(use "RealVectorCompatibleElim2")
(auto)
(simp "<-" "RealPlus0CompRule")
(use "RealPlusReal")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(ng #t)
(use "InitEqD")
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(use "InitEqD")
(save "RealVectorPlusReal")


(set-goal "all xx,yy( RealVectorCompatible xx yy -> RealVectorCompatible xx (xx+yy))")
(assume "xx" "yy")
(assume "Rcomp")
(use "RealVectorCompatibleIntro")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealVectorPlusReal")
(use "Rcomp")
(simp "RealVectorPlusDimCompatible")
(auto)
(save "RealPlusRealVectorCompatible")



(set-goal "RealVectorCompatible xx yy -> Lh (xx mods)=Lh (yy mods)")
(cases)
(assume "vVs" "MVs")
(cases)
(assume "vVs0" "MVs0")
(assume "Rcomp")
(inst-with-to "RealVectorCompatibleElim2" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst")
(cut "(RealVecConstr vVs MVs)dim=(RealVecConstr vVs0 MVs0)dim")
(ng #t)
(cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(assume "cut1")
(cut "(ListLength nat=>rat)vVs0=(ListLength pos=>nat)MVs0")
(assume "cut2")
(simp "cut1")
(simp "cut2")
(ng #t)
(simp "<-" "cut1")
(simp "<-" "cut2")
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr vVs MVs)"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr vVs0 MVs0)"))
(auto)
(save "RealVectorCompatibleElim3Length2")

(set-goal "all as,M,vVs,MVs,as0,M0,vVs0,MVs0(RealVectorCompatible(RealVecConstr(as::vVs)(M::MVs))(RealVecConstr(as0::vVs0)(M0::MVs0))->RealVectorCompatible(RealVecConstr vVs MVs)(RealVecConstr vVs0 MVs0) )")
(assume "as" "M" "vVs" "MVs" "as0" "M0" "vVs0" "MVs0")
(assume "Rcomp")
(use "RealVectorCompatibleIntro")
(use "RealVectorConstrElim4Elem" (pt "as" ) (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(use "RealVectorConstrElim4Elem" (pt "as0" ) (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(simp "CauchyVectorElim2")
(simp "CauchyVectorElim2")
(ng #t)
(ng #t)
(inst-with-to "RealVectorCompatibleElim3Length" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))") "Inst")
(use "Inst")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as0" ) (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as" ) (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(save "RealVectorCompatibleElim4Elem")


(set-goal "all xx,yy ( RealVectorCompatible xx yy -> xx + yy === yy + xx)")
(cases)
(ind)
(ng #t)
(cases)
(cases)
(cases)
(cases)
(ng #t)
(strip)
(use "RealVectorEqNilElim")
(assume "M" "MVs") 
(assume "Cond1")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "(M::MVs)"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(Nil nat=>rat)(Nil pos=>nat)"))
(auto)
(strip)
(use "RealVectorEqNilElim")
(ng #t)
(assume "M" "MVs" "yy" "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "(M::MVs)"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(assume "as" "vVs" "Ih" )
(cases)
(assume "yy")
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(assume "M")
(assume "MVs")
(cases)
(ng #t)
(cases)
(ng #t)
(assume "MVs0")
(assume "Rcomp")
(use "Efq")
(inst-with-to "RealVectorCompatibleElim3Length" (pt "RealVecConstr(as::vVs)(M::MVs)") (pt "(RealVecConstr(Nil nat=>rat)MVs0)") "Inst")
(ng "Inst")
(auto)
(assume "as0" "vVs0")
(cases)
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "(as0::vVs0)"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(auto)
(assume "M0" "MVs0")
(assume "Rcomp")
(simp "SeqsPlus3CompRule")
(simp "SeqsPlus3CompRule")
(simp "SeqsPlus3CompRule")
(simp "SeqsPlus3CompRule")
(simp "ModsPlus3CompRule")
(simp "ModsPlus3CompRule")
(use "RealVectorEqHeadElim")
(inst-with-to "Ih" (pt "MVs") (pt "RealVecConstr vVs0 MVs0") "IhInst")
(use "IhInst")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0")) 
(auto)
(simp "<-" "RealPlus0CompRule")
(simp "<-" "RealPlus0CompRule")
(use "RealPlusComm")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(as0::vVs0)(M0::MVs0))"))
(auto)
(use "InitEqD")
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorCompatibleElim1" (pt "(RealVecConstr(as::vVs)(M::MVs))"))
(auto)
(use "InitEqD")
(save "RealVectorPlusComm")

(set-goal "all xx(RealVector xx  -> (xx + ZerosRealVector (xx dim)===xx) )")
(cut "all xx(RealVector xx  -> (xx + ZerosRealVector (Lh (xx seqs))===xx)) ")
(assume "cutInst")
(assume "xx" "Rxx")
(simp (pf "xx dim=Lh (xx seqs)"))
(ng #t)
(use "cutInst")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorElim0")
(auto)
(cases)
(ind)
(ng #t)
(cases)
(strip)
(use "RealVectorEqNilElim")
(assume "M" "MVs")
(assume "Rv")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M::MVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "as" "vVs")
(assume "Ih")
(cases)
(assume "Rv")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "M" "MVs")
(assume "Rv")
(simp "RealVecSeqs0CompRule")
(simp "ListLength1CompRule")
(simp "ZerosRealVector0CompRule")
(simp "ZerosRealVectorSeqs1CompRule")
(simp "ZerosRealVectorMods1CompRule")
(simp "RealVectorPlus0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "SeqsPlus3CompRule")
(use "RealVectorEqHeadElim")
(use "Ih")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(cut "Real(RealConstr as M)")
(assume "cutInst")
(use "RealEqSToEq")
(use "RealIntro")
(use "CauchyDiffModAuxCauchy" (pt "M"))
(use "RealConstrToCauchy")
(auto)
(ng #t)
(assume "p")
(use "MonElim")
(use "RealConstrToMon" (pt "as"))
(auto)
(use "MonIntro")
(assume "p" "q" "pleq" )
(ng #t)
(use "MonElim")
(use "RealConstrToMon" (pt "as"))
(auto)
(use "RealEqSIntro")
(auto)
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(auto)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(use "InitEqD")
(save "RealVectorPlusZero")




;;(set-goal "all x,y(exl z z eqd x*y)")
;;(assume "x" "y")
;;(intro 0 (pt "x*y"))
;;(use "InitEqD")
;;(save "RealTimesAsThm")



;;(add-sound "RealTimesAsThm")

