(display "loading realVecDTimes.scm")(newline)

(add-program-constant "SeqsDTimes" (py "list(nat=>rat) => list(nat=>rat) => nat=>rat"))
(add-computation-rules "SeqsDTimes (Nil (nat=>rat)) (Nil (nat=>rat)) n" "(0#1)"
                       "SeqsDTimes (Nil (nat=>rat)) (vVs) n" "(0#1)"
                       "SeqsDTimes vVs (Nil (nat=>rat)) n" "(0#1)"
                       "SeqsDTimes (as::vVs1) (bs::vVs2) n" "as n * bs n + SeqsDTimes vVs1 vVs2 n")

(set-totality-goal "SeqsDTimes")
(use "AllTotalElim")
(ind)
(use "AllTotalElim")
(assume "vVs")
(use "AllTotalElim")
(assume "n")
(ng #t)
(use "RatTotalVar")
(assume "as" "vVs")
(assume "Ih")
(use "AllTotalElim")
(cases)
(use "AllTotalElim")
(assume "n")
(ng #t)
(use "RatTotalVar")
(assume "as0")
(assume "vVs0")
(use "AllTotalElim")
(assume "n")
(ng #t)
(use "RatPlusTotal")
(use "RatTotalVar")
(use "Ih")
(use "ListTotalVar")
(use "NatTotalVar")
(save-totality)


(deanimate "RatLeAbsBound")


(set-goal "all as,as0,M,M0(Real(RealConstr as M) ->Real( RealConstr as0 M0 )-> Real(RealConstr([n]as n*as0 n)([p] M(PosS(p+cNatPos(RealBd as0 M0)))max M0(PosS(p+cNatPos(RealBd as M))))))")
(assume "as" "as0" "M" "M0")
(assume "Ras" "Rbs")
(inst-with-to "RealTimesReal" (pt "RealConstr as M") (pt "RealConstr as0 M0") "RealInst")
(use "RealInst")
(auto)
(save "RealTimesUnfolded")



(set-goal "all n,vVs0,vVs1,MVs0,MVs1 ( n=Lh vVs0 & n=Lh vVs1 & n=Lh MVs0 & n=Lh MVs1 -> CauchyVector vVs0 MVs0->CauchyVector vVs1 MVs1-> MonVector MVs0->MonVector MVs1 ->ex M Real((RealConstr(SeqsDTimes vVs0 vVs1) M)))")
(cases)
(cases)
(cases)
(cases)
(cases)
(ng #t)
(strip)
(ex-intro (pt "[p] Zero"))
(use "RealRat")
(ng #t)
(assume "M" "MVs")
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "RealRat")
(ng #t)
(assume "M" "MVs" "MVs0")
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "RealRat")
(assume "as" "vVs")
(ng #t)
(assume "MVs" "MVs0")
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "RealRat")
(assume "as" "vVs" "vVs0" "MVs" "MVs0")
(assume "termcond")
(ng)
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(ind)
(ng #t)
(cases)
(ng #t)
(assume "vVs" "MVs" "MVs0")
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "RealRat")
(assume "as")
(cases)
(ng #t)
(cases)
(ng #t)
(assume "MVs" "MVs0")
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "RealRat")
(assume "as0" )
(cases)
(ng #t)
(cases)
(assume "MVs")
(ng #t)
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(assume "M")
(cases)
(ng #t)
(cases)
(ng #t)
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(ng #t)
(assume "M0")
(cases)
(ng #t)
(assume "termcond" "Cvas" "Cvas0" "MonM" "MonM0")
(ex-intro (pt "([p] M(PosS(p+cNatPos(RealBd as0 M0)))max M0(PosS(p+cNatPos(RealBd as M))))"))
(use "RealTimesUnfolded")
(use "RealIntro")
(inst-with-to "CauchyVectorElim3" (pt "as:") (pt "M:") "CvasInst")
(ng)
(use "CvasInst")
(use "Cvas")
(use "Truth")
(inst-with-to "MonVectorElim1" (pt "M:") "MonInst")
(ng "MonInst")
(use "MonInst")
(use "MonM")
(use "Truth")
(use "RealIntro")
(ng)
(inst-with-to "CauchyVectorElim3" (pt "as0:") (pt "M0:") "CvasInst")
(ng "CvasInst")
(use "CvasInst")
(use "Cvas0") 
(use "Truth")
(ng #t)
(inst-with-to "MonVectorElim1" (pt "M0:") "MonInst")
(ng "MonInst")
(use "MonInst")
(use "MonM0")
(use "Truth")
(assume "M1" "MVs")
(ng #t)
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(ng #t)
(assume "M0" "MVs" "MVs0" "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(assume "as1" "vVs" "MVs" "MVs0")
(ng #t)
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(assume "as0" "vVs" "vVs0" "MVs" "MVs0")
(ng #t)
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(assume "n" "Ih")
(ng #t)
(cases)
(ng #t)
(assume "vVs")
(assume "MVs" "MVs0")
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(assume "as")
(ng #t)
(assume "vVs")
(cases)
(ng #t)
(assume "MVs" "MVs0")
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(ng #t)
(assume "as0" "vVs0")
(cases)
(ng #t)
(assume "MVs" "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(assume "M" "MVs")
(cases)
(ng #t)
(assume "termcond")
(strip)
(ex-intro (pt "[p] Zero"))
(use "Efq")
(use "termcond")
(assume "M0" "MVs0")
(ng #t)
(assume "Lhcond")
(assume "Cvas" "Cvas0" "MonM" "MonM0")
(assert "ex M Real(RealConstr(SeqsDTimes vVs vVs0)M)")
(use "Ih" (pt "MVs") (pt "MVs0"))
(use "Lhcond")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "Cvas")
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0"))
(use "Cvas0")
(use "MonVectorElim4Elem" (pt "M"))
(use "MonM")
(use "MonVectorElim4Elem" (pt "M0"))
(use "MonM0")
(assume "ExInst")
(by-assume "ExInst" "M2" "M2Prop")
(cut "ex M3 Real(RealConstr([n]as n*as0 n)M3)")
(assume "ExInst2")
(by-assume "ExInst2" "M3" "M3Prop")
(ex-intro "[p](M3(PosS p))max(M2(PosS p))")
(use "RealEqSModEqReal" (pt "RealConstr([n]as n*as0 n) M3 + RealConstr(SeqsDTimes vVs vVs0)M2"))
(use "RealPlusReal")
(use "M3Prop")
(use "M2Prop")
(use "RealEqSIntro")
(ng #t)
(assume "n0")
(use "Truth")
(ng #t)
(assume "p")
(use "Truth")
(ex-intro "([p] M(PosS(p+cNatPos(RealBd as0 M0)))max M0(PosS(p+cNatPos(RealBd as M))))") 
(use "RealTimesUnfolded")
(use "RealIntro")
(inst-with-to "CauchyVectorElim3" (pt "as::vVs") (pt "M::MVs") "CvasInst")
(ng)
(use "CvasInst")
(use "Cvas")
(use "Truth")
(inst-with-to "MonVectorElim1" (pt "M::MVs") "MonInst")
(ng "MonInst")
(use "MonInst")
(use "MonM")
(use "Truth")
(use "RealIntro")
(ng)
(inst-with-to "CauchyVectorElim3" (pt "as0::vVs0") (pt "M0::MVs0") "CvasInst")
(ng "CvasInst")
(use "CvasInst")
(use "Cvas0") 
(use "Truth")
(ng #t)
(inst-with-to "MonVectorElim1" (pt "M0::MVs0") "MonInst")
(ng "MonInst")
(use "MonInst")
(use "MonM0")
(use "Truth")
(save "RealVectorDTimesCRule")

;;(remove-theorem "RealVectorDTimesCRule")


(deanimate "NatPos")




(animate "RealVectorDTimesCRule")


(set-totality-goal "cRealVectorDTimesCRule")
(use "AllTotalElim")
(cases)
(use "AllTotalElim")
(cases)
(use "AllTotalElim")
(cases)
(use "AllTotalElim")
(cases)
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(ng #t)
(strip)
(use "NatTotalVar")
(ng #t)
(strip)
(use "NatTotalVar")
(ng #t)
(strip)
(use "NatTotalVar")
(ng #t)
(strip)
(use "NatTotalVar")
(ind)
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(assume "as")
(cases)
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(assume "as0")
(cases)
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(assume "M")
(cases)
(ng #t)
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(ng #t)
(assume "M0")
(cases)
(ng #t)
(use "AllTotalElim")
(assume "p")
(use "NatTotalVar")
(assume "M1" "MVs")
(ng #t)
(strip)
(use "NatTotalVar")
(assume "M0" "MVs")
(ng #t)
(strip)
(use "NatTotalVar")
(ng #t)
(strip)
(use "NatTotalVar")
(ng #t)
(strip)
(use "NatTotalVar")
(assume "n" "Ih")
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(assume "as")
(assume "vVs")
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(assume "as0" "vVs0")
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(assume "M" "MVs")
(use "AllTotalElim")
(cases)
(ng #t)
(strip)
(use "NatTotalVar")
(assume "M0" "MVs0")
(use "AllTotalElim")
(assume "p")
(ng #t)
(use "NatMaxTotal")
(use "NatTotalVar")
(use "Ih")
(use "ListTotalVar")
(use "ListTotalVar")
(use "ListTotalVar")
(use "ListTotalVar")
(use "PosTotalVar")
(save-totality)


(deanimate "RealVectorDTimesCRule")



(add-computation-rules "(RealVecConstr vVs MVs)*(RealVecConstr vVs0 MVs0)" "RealConstr (SeqsDTimes vVs vVs0) (cRealVectorDTimesCRule (RealVectorSeqModDim (RealVecConstr vVs MVs) ) vVs vVs0 MVs MVs0  ) ")


(set-totality-goal "RealVectorDTimes")
(use "AllTotalElim")
(cases)
(assume "vVs" "MVs")
(use "AllTotalElim")
(cases)
(assume "vVs0" "MVs0")
(simp "RealVectorDTimes0CompRule")
(use "TotalReaRealConstr")
(use "SeqsDTimesTotal")
(use "ListTotalVar")
(use "ListTotalVar")
(use "AllTotalElim")
(assume "p")
(use "cRealVectorDTimesCRuleTotal")
(use "RealVectorSeqModDimTotal")
(use "TotalRealVecRealVecConstr")
(use "ListTotalVar")
(use "ListTotalVar")
(use "ListTotalVar")
(use "ListTotalVar")
(use "ListTotalVar")
(use "ListTotalVar")
(use "PosTotalVar")
(save-totality)

(define MATCH-TREE-BOUND 1000)



(set-goal "all n,vVs0,vVs1,MVs0,MVs1 ( n=Lh vVs0 & n=Lh vVs1 & n=Lh MVs0 & n=Lh MVs1 -> CauchyVector vVs0 MVs0->CauchyVector vVs1 MVs1-> MonVector MVs0->MonVector MVs1 ->Real((RealVecConstr vVs0 MVs0)*(RealVecConstr vVs1 MVs1)))")
(cases)
(cases)
(cases)
(cases)
(cases)
(ng #t)
(strip)
(realproof)
(assume "M" "MVs")
(assume "termcond")
(ng #t)
(strip)
(realproof)
(assume "M" "MVs" "MVs0")
(ng #t)
(strip)
(realproof)
(assume "as" "vVs")
(ng #t)
(strip)
(realproof)
(assume "as" "vVs" "vVs0" "MVs" "MVs0")
(assume "termcond")
(ng "termcond")
(use "Efq")
(use "termcond")
(ind)
(cases)
(ng #t)
(strip)
(realproof)
(assume "as")
(cases)
(cases)
(cases)
(ng #t)
(assume "MVs" "termcond")
(strip)
(use "Efq")
(use "termcond")
(assume "M")
(strip)
(ng #t)
(realproof)
(assume "as0")
(cases)
(cases)
(ng #t)
(assume "MVs")
(assume "termcond")
(use "Efq")
(use "termcond")
(assume "M")
(cases)
(cases)
(ng #t)
(assume "termcond")
(use "Efq")
(use "termcond")
(assume "M0")
(cases)
(ng #t)
(assume "termcond" "Cvas" "Cvas0" "MonM" "MonM0")
(animate "RealVectorDTimesCRule")
(ng #t)
(use "RealTimesUnfolded")
(deanimate "RealVectorDTimesCRule")
(use "RealIntro")
(inst-with-to "CauchyVectorElim3" (pt "as:") (pt "M:") "CvasInst")
(ng #t)
(use "CvasInst")
(use "Cvas")
(use "Truth")
(inst-with-to "MonVectorElim1" (pt "M:") "MonInst")
(ng "MonInst")
(use "MonInst")
(use "MonM")
(use "Truth")
(use "RealIntro")
(inst-with-to "CauchyVectorElim3" (pt "as0:") (pt "M0:") "CvasInst")
(ng "CvasInst")
(use "CvasInst")
(use "Cvas0") 
(use "Truth")
(ng #t)
(inst-with-to "MonVectorElim1" (pt "M0:") "MonInst")
(ng "MonInst")
(use "MonInst")
(use "MonM0")
(use "Truth")
(assume "M1" "MVs")
(ng #t)
(assume "termcond")
(use "Efq")
(use "termcond")
(assume "M0" "MVs" "MVs0")
(ng #t)
(assume "termcond")
(use "Efq")
(use "termcond")
(assume "as1" "vVs1" "MVs" "MVs1")
(assume "termcond")
(use "Efq")
(use "termcond")
(assume "as0" "vVs" "vVs0" "MVs" "MVs0")
(assume "termcond")
(use "Efq")
(use "termcond")
(assume "n" "Ih")
(cases)
(ng #t)
(strip)
(realproof)
(assume "as")
(assume "vVs")
(cases)
(assume "MVs" "MVs0")
(assume "termcond")
(ng "termcond")
(use "Efq")
(use "termcond")
(assume "as0")
(assume "vVs0")
(cases)
(assume "MVs")
(assume "termcond")
(ng "termcond")
(use "Efq")
(use "termcond")
(assume "M" "MVs")
(cases)
(assume "termcond")
(ng "termcond")
(use "Efq")
(use "termcond")
(assume "M0" "MVs0")
(assume "termcond")
(ng "termcond")
(assume "Cvas" "Cvas0" "MonM" "MonM0")
(use "RealEqSModEqReal" (pt "(RealConstr as M)*(RealConstr as0 M0) + (RealVecConstr vVs MVs*RealVecConstr vVs0 MVs0) "))
(use "RealPlusReal")
(use "RealTimesReal")
(use "RealIntro")
(inst-with-to "CauchyVectorElim3" (pt "as::vVs") (pt "M::MVs") "CvasInst")
(use "CvasInst")
(use "Cvas")
(use "Truth")
(inst-with-to "MonVectorElim1" (pt "M::MVs") "MonInst")
(use "MonInst")
(use "MonM")
(use "Truth")
(use "RealIntro")
(ng #t)
(inst-with-to "CauchyVectorElim3" (pt "as0::vVs0") (pt "M0::MVs0") "CvasInst")
(use "CvasInst")
(use "Cvas0")
(use "Truth")
(inst-with-to "MonVectorElim1" (pt "M0::MVs0") "MonInst")
(use "MonInst")
(use "MonM0")
(use "Truth")
(use "Ih")
(use "termcond")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))  
(use "Cvas")
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0")) 
(use "Cvas0")
(use "MonVectorElim4Elem" (pt "M"))
(use "MonM")
(use "MonVectorElim4Elem" (pt "M0"))
(use "MonM0")
(use "RealEqSIntro")
(ng #t)
(assume "n0")
(use "Truth")
(ng #t)
(cut "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs")
(assume "Lhcond")
(simp "Lhcond")
(ng #t)
(cases (pt "(ListLength nat=>rat)vVs"))
(ng #t)
(animate "RealVectorDTimesCRule")
(ng)
(simp "<-" "termcond")
(assume "Absurd")
(use "Efq")
(use "Absurd")
(ng #t)
(auto)
(simp "<-" "termcond")
(simp "<-" "termcond")
(use "Truth")
(save "RealVectorDTimesReal")

(deanimate "RealVectorDTimesCRule")



(set-goal "all as,as0,M,M0,vVs,vVs0,MVs,MVs0 (Real(RealConstr as M) -> Real(RealConstr as0 M0) -> RealVectorCompatible(RealVecConstr vVs MVs) (RealVecConstr vVs0 MVs0) -> (RealVecConstr (as::vVs) (M::MVs))*(RealVecConstr (as0::vVs0) (M0::MVs0))===(RealConstr as M)*(RealConstr as0 M0) + (RealVecConstr (vVs) (MVs))*(RealVecConstr (vVs0) (MVs0)))")
(assume "as" "as0" "M" "M0" "vVs" "vVs0" "MVs" "MVs0")
(assume "Ras" "Ras0" "Rv1" )
(use "RealEqSToEq")
(use "RealVectorDTimesReal" (pt "(RealVecConstr(as::vVs)(M::MVs))dim"))
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(split)
(auto)
(inst-with-to "RealVectorCompatibleElim3Length" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst")
(split)
(use "Inst")
(auto)
(simp "CauchyVectorElim2")
(split)
(auto)
(inst-with-to "RealVectorCompatibleElim3Length"  (pt "RealVecConstr vVs0 MVs0") (pt "RealVecConstr vVs MVs") "Inst2")
(simp (pf "(ListLength nat=>rat)vVs=(ListLength nat=>rat)vVs0"))
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "CauchyVectorElim5Elem")
(use "RealConstrToCauchy")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "CauchyVectorElim5Elem")
(use "RealConstrToCauchy")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "MonVectorElim5Elem")
(use "RealConstrToMon" (pt "as"))
(auto)
(use "RealVectorConstrElim1" (pt "vVs"))
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0") )
(use "Rv1")
(use "MonVectorElim5Elem")
(use "RealConstrToMon" (pt "as0"))
(auto)
(use "RealVectorConstrElim1" (pt "vVs0"))
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs") )
(auto)
(use "RealPlusReal")
(realproof)
(use "RealVectorDTimesReal" (pt "(RealVecConstr(vVs)(MVs))dim"))
(split)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(split)
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(inst-with-to "RealVectorCompatibleElim3Length" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst2")
(use "Inst2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(split)
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(ng #t)
(simp (pf "(ListLength nat=>rat)vVs=(ListLength nat=>rat)vVs0"))
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(inst-with-to "RealVectorCompatibleElim3Length" (pt "RealVecConstr vVs MVs") (pt "RealVecConstr vVs0 MVs0") "Inst2")
(use "Inst2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "RealVectorConstrElim1" (pt "vVs"))
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0") )
(use "Rv1")
(use "RealVectorConstrElim1" (pt "vVs0"))
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs") )
(use "Rv1")
(use "RealEqSIntro")
(ng #t)
(assume "n")
(use "Truth")
(save "RealVectorDTimesStep")




(set-goal "all x,y,z,z1 ( Real x -> Real y -> Real z -> Real z1 ->  (x*y + abs(z*z1))*(x*y + abs(z*z1)) <<= (x*x + z*z)*(y*y + z1*z1) )")
(assume "x" "y" "z" "z1")
(assume "Rx" "Ry" "Rz" "Rz1")
(simpreal "RealPlusTimesDistrDouble")
(simpreal "RealPlusTimesDistrDouble")
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(use "RealLeMonPlus")
(use "RealLeReflNC")
(simpreal "RealTimesAssoc")
(simpreal "RealTimesAssoc")
(use "RealTimesCompat")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(use "RealTimesComm")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simpreal  "RealPlusAssoc")
(simpreal  "RealPlusAssoc")
(use "RealLeMonPlus")
(use "RealLePlusCancelL" (pt "~(x*y*abs(z*z1))"))
(autoreal)
(ng #t)
(simpreal  "RealPlusAssoc")
(simpreal (pf "~(x*y*abs(z*z1))+(x*y*abs(z*z1))===0"))
(simpreal "RealZeroPlus")
(simpreal (pf "abs(z*z1)*(x*y)===(x*y)*abs(z*z1)"))
(use "RealLePlusCancelL" (pt "~(x*y*abs(z*z1))"))
(autoreal)
(simpreal  "RealPlusAssoc")
(simpreal (pf "~(x*y*abs(z*z1))+x*y*abs(z*z1)===0"))
(use "RealLeTrans" (pt  "x*x*(z1*z1) + ~(x*y*abs(z*z1)) + ~(x*y*abs(z*z1)) +  z*z*(y*y)"))
(simpreal (pf "x*x*(z1*z1)===x*z1*x*z1"))
(simpreal (pf "z*z*(y*y)===z*y*z*y"))
(inst-with-to "RealBinomForm2" (pt "x*abs(z1)") (pt "abs(z)*y") "Inst")
(use "RealLeTrans" (pt "x*abs z1*(x*abs z1)+ ~(x*abs z1*(abs z*y))+ ~(x*abs z1*(abs z*y))+abs z*y*(abs z*y)"))
(use "RealLeTrans" (pt "(x*abs z1+ ~(abs z*y))*(x*abs z1+ ~(abs z*y))"))
(use "SqrNNeg")
(autoreal)
(use "RealLeReflNC")
(use "Inst")
(autoreal)
(ng #t)
(use "RealLeReflNC")
(use "RealPlusCompat")
(use "RealPlusCompat")
(use "RealPlusCompat")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(simpreal "RealTimesAssoc")
(simpreal "RealTimesAssoc")
(simpreal "RealTimesComm")
(ng #t)
(simpreal (pf "z1*x*z1===z1*z1*x"))
(simpreal "RealTimesAssoc")
(use "RealTimesCompat")
(simpreal "<-" "RealAbsTimes")
(simpreal "RealEqAbs")
(use "RealEqRefl")
(autoreal)
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simpreal "RealTimesComm")
(simpreal "RealTimesAssoc")
(use "RealEqRefl")
(autoreal)
(use "RealUMinusCompat")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(simpreal "RealTimesAssoc")
(simpreal "RealTimesComm")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(simpreal "<-" "RealAbsTimes")
(use "RealAbsCompat")
(use "RealTimesComm")
(autoreal)
(use "RealUMinusCompat")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(simpreal "RealTimesAssoc")
(simpreal "RealTimesComm")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(simpreal "<-" "RealAbsTimes")
(use "RealAbsCompat")
(use "RealTimesComm")
(autoreal)
(simpreal "RealTimesAssoc")
(use "RealTimesCompat")
(simpreal "RealTimesComm")
(simpreal (pf "z*y*z===z*z*y"))
(simpreal "RealTimesAssoc")
(use "RealTimesCompat")
(simpreal "<-" "RealAbsTimes")
(use "RealEqAbs")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(use "RealTimesComm")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simpreal  "RealTimesAssoc")
(use "RealTimesCompat")
(simpreal "RealTimesComm")
(simpreal  "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealTimesComm")
(autoreal)
(use "RealEqRefl")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simpreal  "RealTimesAssoc")
(use "RealTimesCompat")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(use "RealTimesComm")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simpreal "RealPlusAssoc")
(use "RealLeReflNC")
(use "RealPlusCompat")
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(simpreal "RealPlusComm")
(simpreal "RealPlusAssoc")
(use "RealEqRefl")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simpreal "RealPlusComm")
(use "RealPlusMinusZero")
(autoreal)
(use "RealTimesComm")
(autoreal)
(simpreal "RealPlusComm")
(use "RealPlusMinusZero")
(autoreal)
(simpreal "<-" "RealAbsTimes" )
(simpreal "RealEqAbs")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealLeReflNC")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(simpreal "RealTimesAssoc")
(simpreal "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealTimesComm")
(autoreal)
(use "RealEqRefl")
(autoreal)
;;(use "RealLeToRealNNeg")
(simpreal "RealTimesAssoc")
(simpreal (pf "z*z1*z===z*z*z1"))
(simpreal "<-" "RealTimesAssoc")
(use "RealNNegTimesNNeg")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(use "RealTimesComm")
(autoreal)
(save "CauchySchwartzBaseStep")




(set-goal "all xx,yy(RealVectorCompatible xx yy -> Real(xx*yy))")
(cases)
(assume "vVs" "MVs")
(cases)
(assume "vVs0" "MVs0")
(assume "Rcomp")
(use "RealVectorDTimesReal" (pt "Lh(vVs)"))
(split)
(auto)
(split)
(use "RealVectorConstrCompatibleElim3Length" (pt "MVs") (pt "MVs0"))
(use "Rcomp")
(split)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(simp (pf "Lh MVs0=Lh vVs0"))
(use "RealVectorConstrCompatibleElim3Length" (pt "MVs") (pt "MVs0"))
(auto)
(simp "NatEqSym")
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(use "RealVectorConstrElim1" (pt "vVs"))
(use "RealVectorCompatibleElim0" (pt "RealVecConstr vVs0 MVs0"))
(auto)
(use "RealVectorConstrElim1" (pt "vVs0"))
(use "RealVectorCompatibleElim1" (pt "RealVecConstr vVs MVs"))
(auto)
(save "RealVectorDTimesRealCompatible")
;; use this


(set-goal "all xx(RealVector xx -> xx*xx === RealVectorTwoNormSqr xx)")
(cases)
(ind)
(assume "MVs")
(strip)
(ng #t)
(use "RealEqIntro")
(autoreal)
(auto)
(assume "as" "vVs" "Ih")
(cases)
(ng #t)
(assume "Rconstr")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "M" "MVs")
(assume "Rxx")
(cut "Real(RealConstr as M)")
(assume "Ras")
(cut "Real(RealVectorTwoNormSqr(RealVecConstr(as::vVs)(M::MVs)))")
(assume "RInst")
(simpreal "RealVectorDTimesStep")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(use "RealPlusCompat")
(use "RealEqRefl")
(realproof)
(use "Ih")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "Rxx")
(use "RealVectorCompatibleRefl")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "Rxx")
(use "Ras")
(use "Ras")
(use "RealRealVectorTwoNormSqr")
(use "Rxx")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "Rxx")
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(use "Rxx")
(use "InitEqD")
(save "RealVectorDTimesSqr")

(set-goal "all xx,yy (RealVectorCompatible xx yy -> xx*yy===yy*xx)")
(cases)
(ind)
(ng #t)
(assume "MVs")
(cases)
(cases)
(ng #t)
(strip)
(use "RealEqIntro")
(autoreal)
(auto)
(assume "as" "vVs")
(ng #t)
(assume "MVs0")
(strip)
(use "RealEqIntro")
(autoreal)
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "yy")
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(assume "M" "MVs")
(cases)
(cases)
(ng #t)
(strip)
(use "RealEqIntro")
(autoreal)
(auto)
(assume "as0" "vVs0")
(cases)
(ng #t)
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as0::vVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "Rcomp")
(assume "M0" "MVs0")
(assume "Rcomp")
(cut "Real(RealVecConstr(as0::vVs0)(M0::MVs0)*RealVecConstr(as::vVs)(M::MVs))")
(assume "RInst1")
(simpreal "RealVectorDTimesStep")
(cut "Real(RealVecConstr vVs MVs*RealVecConstr vVs0 MVs0)")
(assume "RInst2")
(cut "Real(RealConstr as M)")
(assume "RInst3")
(cut "Real(RealConstr as0 M0)")
(assume "RInst4")
(simpreal "RealVectorDTimesStep")
(use "RealPlusCompat")
(use "RealTimesComm")
(autoreal)
(use "Ih")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp")
(use "RealVectorCompatibleSym")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp")
(auto)
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "Rcomp")
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "Rcomp")
(use "InitEqD")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "Rcomp")
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "Rcomp")
(use "InitEqD")
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp")
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "Rcomp")
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "Rcomp")
(use "InitEqD")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "Rcomp")
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "Rcomp")
(use "InitEqD")
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleSym")
(use "Rcomp")
(save "RealVectorDTImesComm")


(set-goal "all xx,yy,zz(RealVectorCompatible xx yy -> RealVectorCompatible yy zz -> RealVectorCompatible xx zz)")
(assume "xx" "yy" "zz" "Rcomp1" "Rcomp2") 
(use "RealVectorCompatibleIntro")
(use "RealVectorCompatibleElim0" (pt "yy"))
(auto)
(use "RealVectorCompatibleElim1" (pt "yy"))
(auto)
(simp (pf "xx dim = yy dim"))
(use "RealVectorCompatibleElim2")
(auto)
(use "RealVectorCompatibleElim2")
(auto)
(save "RealVectorCompatibleTrans")

(set-goal "all xx,yy,zz(RealVectorCompatible xx yy -> RealVectorCompatible yy zz -> xx*(yy + zz) === xx*yy + xx*zz)")
(cases)
(ind)
(ng #t)
(assume "MVs")
(cases)
(cases)
(ng #t)
(assume "MVs0")
(cases)
(cases)
(ng #t)
(strip)
(use "RealEqIntro")
(autoreal)
(auto)
(assume "as1" "vVs1")
(assume "MVs1")
(assume "Rcomp1")
(assume "Rcomp2")
(use "Efq")
(cut "(RealVecConstr(Nil nat=>rat)MVs0) dim = (RealVecConstr(as1::vVs1)MVs1) dim")
(ng #t)
(simp (pf "Lh (as1::vVs1)=Lh MVs1"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(Nil nat=>rat)MVs0"))
(use "Rcomp2")
(use "RealVectorCompatibleElim2")
(use "Rcomp2")
(ng #t)
(assume "as" "vVs" "MVs0" "zz" "Rcomp")
(use "Efq")
(cut "(RealVecConstr(Nil nat=>rat)MVs) dim =(RealVecConstr(as::vVs)MVs0)dim")
(ng #t)
(simp (pf "Lh (as::vVs)=Lh MVs0"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(Nil nat=>rat)MVs"))
(use "Rcomp")
(use "RealVectorCompatibleElim2")
(use "Rcomp")
(assume "as" "vVs" "Ih")
(cases)
(assume "yy" "zz")
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(assume "M" "MVs")
(cases)
(cases)
(assume "MVs0" "zz")
(assume "Rcomp")
(use "Efq")
(cut "(RealVecConstr(as::vVs)(M::MVs)) dim =(RealVecConstr(Nil nat=>rat)MVs0) dim")
(simp (pf "Lh (as::vVs)=Lh(M::MVs)"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(Nil nat=>rat)MVs0)"))
(use "Rcomp")
(use "RealVectorCompatibleElim2")
(auto)
(assume "as0" "vVs0")
(cases)
(assume "zz" "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as0::vVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "Rcomp")
(assume "M0" "MVs0")
(cases)
(cases)
(ng #t)
(assume "MVs1")
(assume "Rcomp1" "Rcomp2")
(use "Efq")
(cut "(RealVecConstr(as0::vVs0)(M0::MVs0)) dim = (RealVecConstr(Nil nat=>rat)MVs1) dim")
(simp (pf "Lh(as0::vVs0)=Lh(M0::MVs0)"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "(RealVecConstr(Nil nat=>rat)MVs1)"))
(use "Rcomp2")
(use "RealVectorCompatibleElim2")
(use "Rcomp2")
(assume "as1" "vVs1")
(cases)
(assume "Rcomp1" "Rcomp2")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as1::vVs1"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(use "Rcomp2")
(assume "M1" "MVs1" "Rcomp1" "Rcomp2")
(cut "Real(RealConstr as M)")
(assume "Ras")
(cut "Real(RealConstr as0 M0)")
(assume "Ras0")
(cut "Real(RealConstr as1 M1)")
(assume "Ras1")
(cut "Real(RealVecConstr(as::vVs)(M::MVs)*(RealVecConstr(as0::vVs0)(M0::MVs0)+RealVecConstr(as1::vVs1)(M1::MVs1)))")
(assume "RInst0")
(cut "Real(RealVecConstr(as::vVs)(M::MVs)*RealVecConstr(as0::vVs0)(M0::MVs0))")
(assume "RInst1")
(cut "Real(RealVecConstr(as::vVs)(M::MVs)*RealVecConstr(as1::vVs1)(M1::MVs1))")
(assume "RInst2")
(simpreal "RealVectorDTimesStep")
(cut "Real(RealVecConstr vVs MVs*RealVecConstr vVs0 MVs0)")
(assume "RInst3")
(simpreal "RealVectorDTimesStep")
(simp "RealVectorPlus0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "SeqsPlus3CompRule")
(simp "ModsPlus3CompRule")
(cut "Real(RealVecConstr vVs MVs*RealVecConstr vVs1 MVs1)")
(assume "RInst4")
(simpreal "RealVectorDTimesStep")
(simp "<-" "RealPlus0CompRule")
(use "RealEqTrans" (pt "RealConstr as M*RealConstr as0 M0+RealConstr as M*RealConstr as1 M1+RealVecConstr vVs MVs*RealVecConstr vVs0 MVs0+RealVecConstr vVs MVs*RealVecConstr vVs1 MVs1"))
(use "RealEqTrans" (pt "RealConstr as M*RealConstr as0 M0+RealConstr as M*RealConstr as1 M1+(RealVecConstr vVs MVs*RealVecConstr vVs0 MVs0+RealVecConstr vVs MVs*RealVecConstr vVs1 MVs1)"))
(use "RealPlusCompat")
(use "RealTimesPlusDistr")
(autoreal)
(inst-with-to "Ih" (pt "MVs") (pt "RealVecConstr vVs0 MVs0") (pt "RealVecConstr vVs1 MVs1") "IhInst")
(use "IhInst")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp1")
(use "RealVectorCompatibleElim4Elem" (pt "as0") (pt "M0") (pt "as1") (pt "M1"))
(use "Rcomp2")
(simpreal "RealPlusAssoc")
(use "RealEqRefl")
(autoreal)
(simpreal "RealPlusAssoc")
(use "RealPlusCompat")
(simpreal "RealPlusComm")
(simpreal "RealPlusAssoc")
(use "RealPlusCompat")
(use "RealPlusComm")
(autoreal)
(use "RealEqRefl")
(autoreal)
(use "RealEqRefl")
(autoreal)
(simp (pf "RealVecConstr(vVs0 sqpl vVs1)(MVs0 mpl MVs1) eqd (RealVecConstr vVs0 MVs0) + (RealVecConstr vVs1 MVs1)"))
(use "RealVectorCompatibleTrans" (pt "RealVecConstr vVs0 MVs0"))
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp1")
(use "RealPlusRealVectorCompatible")
(use "RealVectorCompatibleElim4Elem" (pt "as0") (pt "M0") (pt "as1") (pt "M1"))
(use "Rcomp2")
(use "InitEqD")
(simp "<-" "RealPlus0CompRule")
(realproof)
(realproof)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as1") (pt "M1"))
(use "RealVectorCompatibleTrans" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as1") (pt "M1"))
(use "RealVectorCompatibleTrans" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(auto)
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(auto)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleTrans" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "RealVectorDTimesRealCompatible")
(auto)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleTrans" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "RealPlusRealVectorCompatible")
(auto)
(simp (pf "RealConstr as1 M1 eqd RealVecConstr(as1::vVs1)(M1::MVs1)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(simp (pf "Lh(as1::vVs1)=Lh((M1::MVs1))"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "InitEqD")
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(auto)
(simp (pf "Lh(as0::vVs0)=Lh((M0::MVs0))"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(auto)
(use "InitEqD")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(simp (pf "Lh(as::vVs)=Lh((M::MVs))"))
(auto)
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "InitEqD")
(save "RealVectorDTimesPlusDistr")




(set-goal "all xx,yy,zz(RealVectorCompatible xx yy -> RealVectorCompatible yy zz -> (xx+yy)*zz===xx*zz+yy*zz )")
(assume "xx" "yy" "zz" "Rcomp1" "Rcomp2") 
(use "RealEqTrans" (pt "zz*(xx+yy)"))
(use "RealVectorDTImesComm")
(use "RealVectorCompatibleSym")
(use "RealVectorCompatibleTrans" (pt "xx"))
(use "RealVectorCompatibleTrans" (pt "yy"))
(use "RealVectorCompatibleSym")
(auto)
(use "RealVectorCompatibleSym")
(auto)
(use "RealPlusRealVectorCompatible")
(auto)
(use "RealEqTrans" (pt "zz*xx+zz*yy"))
(use "RealVectorDTimesPlusDistr")
(use "RealVectorCompatibleSym")
(use "RealVectorCompatibleTrans" (pt "yy"))
(auto)
(use "RealPlusCompat")
(use "RealVectorDTImesComm")
(use "RealVectorCompatibleSym")
(use "RealVectorCompatibleTrans" (pt "yy"))
(auto)
(use "RealVectorDTImesComm")
(use "RealVectorCompatibleSym")
(auto)
(save "RealVectorDTimesPlusDistrLeft")

(set-goal "all xx,yy,zz,zz1(RealVectorCompatible xx yy -> RealVectorCompatible yy zz -> RealVectorCompatible zz zz1 -> (xx+yy)*(zz+zz1)===xx*zz+xx*zz1 + yy*zz + yy*zz1 )")
(assume "xx" "yy" "zz" "zz1")
(assume "Rcomp1" "Rcomp2" "Rcomp3")
(use "RealEqTrans" (pt "(xx+yy)*zz + (xx+yy)*zz1"))
(use "RealVectorDTimesPlusDistr")
(use "RealVectorCompatibleSym")
(use "RealVectorCompatibleTrans" (pt "yy"))
(use "RealVectorCompatibleSym")
(auto)
(use "RealVectorCompatibleTrans" (pt "xx"))
(use "RealVectorCompatibleSym")
(auto)
(use "RealPlusRealVectorCompatible")
(auto)
(use "RealEqTrans" (pt "xx*zz+yy*zz + (xx*zz1 + yy*zz1)"))
(use "RealPlusCompat")
(use "RealVectorDTimesPlusDistrLeft")
(auto)
(use "RealVectorDTimesPlusDistrLeft")
(auto)
(use "RealVectorCompatibleTrans" (pt "zz"))
(auto)
(cut "Real(yy*zz1)")
(assume "Rcut")
(cut "Real(yy*zz)")
(assume "Rcut2")
(cut "Real(xx*zz1)")
(assume "Rcut3")
(cut "Real(xx*zz)")
(assume "Rcut4")
(simpreal "RealPlusAssoc")
(use "RealPlusCompat")
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(use "RealPlusCompat")
(use "RealEqRefl")
(auto)
(use "RealPlusComm")
(auto)
(use "RealEqRefl")
(auto)
(realproof)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleTrans" (pt "yy"))
(auto)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleTrans" (pt "yy"))
(auto)
(use "RealVectorCompatibleTrans" (pt "zz"))
(auto)
(use "RealVectorDTimesRealCompatible")
(auto)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleTrans" (pt "zz"))
(auto)
(save "RealVectorDTimesPlusDistrDouble")




;; add RealVectorCompatible
(set-goal "all xx,yy(RealVectorCompatible xx yy  -> (xx*yy)*(xx*yy) <<= (RealVectorTwoNormSqr xx)*(RealVectorTwoNormSqr yy))")
(cases)
(ind)
(ng #t)
(assume "MVs")
(cases)
(cases)
(ng #t)
(strip)
(use "RealLeReflNC")
(use "RealEqSToEq")
(autoreal)
(use "RealEqSIntro")
(auto)
(assume "as" "vVs")
(ng #t)
(assume "MVs0")
(assume "Rcomp")
(use "RealLeTrans" (pt "ReaRat 0*ReaRat 0"))
(ng #t)
(use "RealLeReflNC")
(use "RealEqIntro")
(autoreal)
(auto)
(use "RealLeMonTimesTwo")
(ng #t)
(use "RealZeroNNeg")
(use "RealZeroNNeg")
(ng #t)
(use "RealLeReflNC")
(use "RealEqIntro")
(autoreal)
(auto)
(simp "ReaRat0CompRule")
(simp (pf "RealVectorTwoNormSqrAux(as::vVs)MVs0 eqd RealVectorTwoNormSqr(RealVecConstr (as::vVs)MVs0)"))
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(Nil nat=>rat)MVs"))
(use "Rcomp")
(use "InitEqD")
(assume "as" "vVs" "Ih")
(cases)
(assume "yy")
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(assume "M" "MVs")
(cases)
(cases)
;;(ng #t)
(assume "MVs0")
(assume "rcomp")
(use "Efq")
(use "RealVectorCompatibleInvalid1" (pt "(as)") (pt "vVs") (pt "M") (pt "MVs") (pt "MVs0"))
(use "rcomp")
(assume "as0" "vVs0")
(cases)
(assume "Rcomp")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as0::vVs0"))
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)"))
(use "Rcomp")
(assume "M0" "MVs0" "Rcomp")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(cut "Real(RealConstr as M)")
(assume "cut1")
(cut "Real(RealConstr as0 M0)")
(assume "cut2")
(cut "0<<=RealVectorTwoNormSqrAux vVs MVs")
(assume "cut3")
(cut "0<<=RealVectorTwoNormSqrAux vVs0 MVs0")
(assume "cut4")
(cut "all x (0<<=x -> Real(Rsqrt x))")
(assume "cut5")
(cut "Real(RealVecConstr(as::vVs)(M::MVs)*RealVecConstr(as0::vVs0)(M0::MVs0))")
(assume "cut6")
(cut "Real(RealVecConstr vVs MVs*RealVecConstr vVs0 MVs0)")
(assume "cut7")
(use "RealSqrtAntiInc")
(use "SqrNNeg")
(use "cut6")
(use "RealNNegToRealLe")
(use "RealNNegTimesNNeg")
(use "RealNNegPlusNNeg")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealLeToRealNNeg")
(auto)
(use "RealNNegPlusNNeg")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(auto)
(use "RealLeToRealNNeg")
(auto)
(cut "Real(Rsqrt((RealConstr as M*RealConstr as M+RealVectorTwoNormSqrAux vVs MVs)*(RealConstr as0 M0*RealConstr as0 M0+RealVectorTwoNormSqrAux vVs0 MVs0)))")
(assume "Rcut")
(simpreal "RealSqrtProp4")
;;(use "RealLeTrans" (pt ""))
;;(inst-with-to "RealPlusTimesDistrDouble" (pt "RealConstr as M*RealConstr as M") (pt "RealVectorTwoNormSqrAux vVs MVs") (pt "RealConstr as0 M0*RealConstr as0 M0") (pt "RealVectorTwoNormSqrAux vVs0 MVs0") "Inst2")
;;(use "RealLeTrans" (pt "Rsqrt(RealConstr as M*RealConstr as M*(RealConstr as0 M0*RealConstr as0 M0)+RealConstr as M*RealConstr as M*RealVectorTwoNormSqrAux vVs0 MVs0+RealVectorTwoNormSqrAux vVs MVs*(RealConstr as0 M0*RealConstr as0 M0)+RealVectorTwoNormSqrAux vVs MVs*RealVectorTwoNormSqrAux vVs0 MVs0)"))
(use "RealLeTrans" (pt "abs(RealConstr as M*RealConstr as0 M0)+ Rsqrt(RealVectorTwoNormSqrAux vVs MVs*RealVectorTwoNormSqrAux vVs0 MVs0)"))
(cut "Real(Rsqrt(RealVectorTwoNormSqrAux vVs MVs*RealVectorTwoNormSqrAux vVs0 MVs0))")
(assume "cutx3")
(simpreal "RealVectorDTimesStep")
(use "RealLeTrans" (pt "abs(RealConstr as M*RealConstr as0 M0)+abs(RealVecConstr vVs MVs*RealVecConstr vVs0 MVs0)"))
(use "RealLeAbsPlus")
(autoreal)
(use "RealLeMonPlus")
(use "RealLeRefl")
(realproof)
(simpreal "<-" "RealSqrtProp4")
(use "RealSqrtInc")
(use "SqrNNeg")
(realproof)
(simp (pf "RealVectorTwoNormSqrAux vVs MVs eqd RealVectorTwoNormSqr(RealVecConstr vVs MVs)"))
(simp (pf "RealVectorTwoNormSqrAux vVs0 MVs0 eqd RealVectorTwoNormSqr(RealVecConstr vVs0 MVs0)"))
(use "Ih")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp")
(use "InitEqD")
(ng #t)
(use "InitEqD")
(auto)
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp")
(realproof)
(realproof)
(use "RealSqrtReal")
(realproof)
(use "RealSqrAntiInc")
(use "RealNNegToRealLe")
(use "RealNNegPlusNNeg")
(use "RealLeToRealNNeg")
(use "RealAbsNNeg")
(realproof)
(use "RealLeToRealNNeg")
(use "RsqrtNNeg")
(use "RealNNegToRealLe")
(use "RealNNegTimesNNeg")
(use "RealLeToRealNNeg")
(auto)
(use "RealLeToRealNNeg")
(auto)
(use "RsqrtNNeg")
(use "RealNNegToRealLe")
(use "RealNNegTimesNNeg")
(use "RealNNegPlusNNeg")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealLeToRealNNeg")
(auto)
(use "RealNNegPlusNNeg")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealLeToRealNNeg")
(auto)
;;(use "RealLeTrans" (pt "RealConstr as M*RealConstr as M*(RealConstr as0 M0*RealConstr as0 M0)+RealConstr as M*RealConstr as M*RealVectorTwoNormSqrAux vVs0 MVs0+RealVectorTwoNormSqrAux vVs MVs*(RealConstr as0 M0*RealConstr as0 M0)+RealVectorTwoNormSqrAux vVs MVs*RealVectorTwoNormSqrAux vVs0 MVs0"))
;;(use "RealLeTrans" (pt "(RealConstr as M*RealConstr as M+RealVectorTwoNormSqrAux vVs MVs)*(RealConstr as0 M0*RealConstr as0 M0+RealVectorTwoNormSqrAux vVs0 MVs0)"))
(inst-with-to "CauchySchwartzBaseStep" (pt "Rsqrt(RealVectorTwoNormSqrAux vVs MVs)") (pt "Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)") (pt "RealConstr as M") (pt "RealConstr as0 M0") "Inst3")
(use "RealLeTrans" (pt "(Rsqrt(RealVectorTwoNormSqrAux vVs MVs)*Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)+abs(RealConstr as M*RealConstr as0 M0))*(Rsqrt(RealVectorTwoNormSqrAux vVs MVs)*Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)+abs(RealConstr as M*RealConstr as0 M0))"))
(use "RealLeReflNC")
(use "RealTimesCompat")
; (cut "Real(RealConstr as0 M0)")
; (assume "Rcut1")
; (cut "Real(RealConstr as M)")
; (assume "Rcut2")
(cut "Real(Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0))")
(assume "Rcut3")
(cut "Real(Rsqrt(RealVectorTwoNormSqrAux vVs MVs))")
(assume "Rcut4")
(simpreal "RealPlusComm")
(use "RealPlusCompat")
(use "RealSqrtProp3")
(use "cut3")
(use "cut4")
(use "RealAbsCompat")
(use "RealEqRefl")
(realproof)
(use "RealSqrtReal")
(realproof)
(realproof)
(use "RealSqrtReal")
(realproof)
(use "RealSqrtReal")
(realproof)
(use "RealEqTrans" (pt "abs(RealConstr as M*RealConstr as0 M0)+Rsqrt(RealVectorTwoNormSqrAux vVs MVs)*Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)"))
(use "RealPlusCompat")
(use "RealEqRefl")
(realproof)
(use "RealSqrtProp3")
(use "cut3")
(use "cut4")
(use "RealPlusComm")
(realproof)
(use "RealTimesReal")
(use "RealSqrtReal")
(realproof)
(use "RealSqrtReal")
(realproof)
(use "RealLeTrans" (pt "(Rsqrt(RealVectorTwoNormSqrAux vVs MVs)*Rsqrt(RealVectorTwoNormSqrAux vVs MVs)+RealConstr as M*RealConstr as M)*(Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)*Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)+RealConstr as0 M0*RealConstr as0 M0)"))
(use "Inst3")
(use "RealSqrtReal")
(realproof)
(use "RealSqrtReal")
(realproof)
(autoreal)
(use "RealLeReflNC")
(cut "Real(Rsqrt(RealVectorTwoNormSqrAux vVs MVs))")
(assume "Rcut6")
(simpreal (pf "Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)*Rsqrt(RealVectorTwoNormSqrAux vVs0 MVs0)=== RealVectorTwoNormSqrAux vVs0 MVs0"))
(simpreal (pf "Rsqrt(RealVectorTwoNormSqrAux vVs MVs)*Rsqrt(RealVectorTwoNormSqrAux vVs MVs)===RealVectorTwoNormSqrAux vVs MVs"))
(simpreal (pf "Rsqrt((RealConstr as M*RealConstr as M+RealVectorTwoNormSqrAux vVs MVs)*(RealConstr as0 M0*RealConstr as0 M0+RealVectorTwoNormSqrAux vVs0 MVs0))*Rsqrt((RealConstr as M*RealConstr as M+RealVectorTwoNormSqrAux vVs MVs)*(RealConstr as0 M0*RealConstr as0 M0+RealVectorTwoNormSqrAux vVs0 MVs0))===(RealConstr as M*RealConstr as M+RealVectorTwoNormSqrAux vVs MVs)*(RealConstr as0 M0*RealConstr as0 M0+RealVectorTwoNormSqrAux vVs0 MVs0)"))
(use "RealTimesCompat")
(use "RealPlusComm")
(realproof)
(realproof)
(use "RealPlusComm")
(realproof)
(realproof)
(use "RealSqrtProp")
(use "RealNNegToRealLe")
(use "RealNNegTimesNNeg")
(use "RealNNegPlusNNeg")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealLeToRealNNeg")
(use "cut3")
(use "RealNNegPlusNNeg")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(autoreal)
(use "RealLeToRealNNeg")
(use "cut4")
(use "RealSqrtProp")
(use "cut3")
(use "RealSqrtProp")
(use "cut4")
(use "RealSqrtReal")
(realproof)
(use "RealVectorDTimesRealCompatible")
(use "Rcomp")
(use "RealSqrtReal")
(realproof)
(use "RealVectorDTimesRealCompatible")
(use "RealVectorCompatibleElim4Elem" (pt "as") (pt "M") (pt "as0") (pt "M0"))
(use "Rcomp")
(use "RealVectorDTimesRealCompatible")
(use "Rcomp")
(assume "x0" "0lex0")
(use "RealSqrtReal")
(realproof)
(simp (pf "RealVectorTwoNormSqrAux vVs0 MVs0 eqd RealVectorTwoNormSqr (RealVecConstr vVs0 MVs0)"))
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorIntro")
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)") )
(ng #t)
(use "Rcomp")
(ng #t)
(use "MonVectorElim4Elem" (pt "M0"))
(use "RealVectorConstrElim1" (pt "as0::vVs0"))
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)") )
(ng #t)
(use "Rcomp")
(use "InitEqD")
(simp (pf "RealVectorTwoNormSqrAux vVs MVs eqd RealVectorTwoNormSqr (RealVecConstr vVs MVs)"))
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorIntro")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") )
(ng #t)
(use "Rcomp")
(ng #t)
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") )
(ng #t)
(use "Rcomp")
(use "InitEqD")
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)") )
(ng #t)
(use "Rcomp")
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as0") (pt "M0"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim1" (pt "RealVecConstr(as::vVs)(M::MVs)") )
(ng #t)
(use "Rcomp")
(use "InitEqD")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") )
(ng #t)
(use "Rcomp")
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "RealVectorCompatibleElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)") )
(ng #t)
(use "Rcomp")
(use "InitEqD")
(save "CauchySchwartzInequality")


(set-goal "all xx,yy(RealVectorCompatible xx yy  -> (xx*yy) <<= (RealVectorTwoNorm xx)*(RealVectorTwoNorm yy))")
(assume "xx" "yy" "Rcomp")
(use "RealLeTrans" (pt "abs(xx*yy)"))
(use "RealLeAbsId")
(use "RealVectorDTimesRealCompatible")
(auto)
(use "RealSqrAntiInc")
(use "RealAbsNNeg")
(use "RealVectorDTimesRealCompatible")
(auto)
(use "RealNNegToRealLe")
(use "RealNNegTimesNNeg")
(simp "RealVectorTwoNorm0CompRule")
(use "RealLeToRealNNeg")
(use "RsqrtNNeg")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealLeToRealNNeg")
(use "RsqrtNNeg")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(use "RealLeTrans" (pt "(xx*yy)*(xx*yy)"))
(use "RealLeTrans" (pt "abs((xx*yy)*(xx*yy))"))
(use "RealLeReflNC")
(use "RealEqSym")
(use "RealAbsTimes")
(use "RealVectorDTimesRealCompatible")
(use "Rcomp")
(use "RealVectorDTimesRealCompatible")
(use "Rcomp")
(use "RealLeReflNC")
(use "RealEqAbs")
(use "RealLeToRealNNeg")
(use "SqrNNeg")
(use "RealVectorDTimesRealCompatible")
(use "Rcomp")
(use "RealLeTrans" (pt "(RealVectorTwoNormSqr xx)*(RealVectorTwoNormSqr yy)"))
(use "CauchySchwartzInequality")
(use "Rcomp")
(use "RealLeReflNC")
(use "RealEqTrans" (pt "RealVectorTwoNorm xx*RealVectorTwoNorm xx*RealVectorTwoNorm yy*RealVectorTwoNorm yy"))
(use "RealEqTrans" (pt "RealVectorTwoNorm xx*RealVectorTwoNorm xx*(RealVectorTwoNorm yy*RealVectorTwoNorm yy)"))
(use "RealTimesCompat")
(use "RealEqSym")
(use "RealSqrtProp")
(simp "<-" "RealVectorTwoNormSqr0CompRule")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealEqSym")
(use "RealSqrtProp")
(simp "<-" "RealVectorTwoNormSqr0CompRule")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(cut "Real(RealVectorTwoNorm yy)")
(assume "Rcut1")
(cut "Real(RealVectorTwoNorm xx)")
(assume "Rcut2")
(simpreal "RealTimesAssoc")
(use "RealEqRefl")
(realproof)
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(realproof)
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(cut "Real(RealVectorTwoNorm yy)")
(assume "Rcut1")
(cut "Real(RealVectorTwoNorm xx)")
(assume "Rcut2")
(simpreal "RealTimesAssoc")
(use "RealTimesCompat")
(simpreal "RealTimesComm")
(simpreal "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealTimesComm")
(realproof)
(realproof)
(use "RealEqRefl")
(autoreal)
(use "RealEqRefl")
(realproof)
(realproof)
(realproof)
(realproof)
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(save "CauchySchwartzInequalitySqrt")




