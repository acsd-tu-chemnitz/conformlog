(display "loading vectornorm.scm")(newline)


(add-var-name "norm" (py "realVec=>rea"))



(add-ids (list ( list "VectorNorm" (make-arity (py "realVec=>rea"))))
    '("allnc norm( 
    all xx (RealVector xx -> Real(norm xx)) 
    -> all xx,yy(xx === yy -> norm xx === norm yy)
    -> all x,xx ( Real x -> RealVector xx -> (norm (RealVectorSTimes x xx))=== abs(x)*(norm xx)) 
    -> all xx (RealVector xx -> norm xx===0 -> xx === ZerosRealVector (xx dim) )
    -> all xx (xx === ZerosRealVector (xx dim) -> norm xx===0 )
    -> all xx,yy (RealVectorCompatible xx yy ->norm (xx +yy) <<= norm(xx) + norm(yy) )
    -> VectorNorm norm)" "VectorNormIntro")
   )

;; (remove-idpc-name "VectorNorm")



(set-goal "VectorNorm norm -> all x,xx ( Real x -> RealVector xx -> (norm (RealVectorSTimes x xx))=== abs(x)*(norm xx))")
(assume "norm")
(elim)
(auto)
(save "VectorNormElim1STimes")

(set-goal "all xx (RealVector xx -> (RealVectorSTimes (0) xx) === ZerosRealVector (xx dim))")
(cases)
(ind)
(cases)
(ng #t)
(assume "Rx")
(use "RealVectorEqNilElim")
(assume "M" "MVs" "Rxx")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M::MVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "Rxx")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "M" "MVs" "Rxx")
(simp "RealVectorSTimes0CompRule")
(simp "ZerosRealVector0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "CauchyVectorElim2")
(simp (pf "[if True (Succ((ListLength nat=>rat)vVs)) Zero] eqd (Succ((ListLength nat=>rat)vVs))"))
(simp "ZerosRealVectorSeqs1CompRule")
(simp "ZerosRealVectorMods1CompRule")
(use "RealVectorEqHeadElim")
(simp (pf "(ListLength nat=>rat)vVs eqd (RealVecConstr vVs MVs)dim"))
(use "Ih")
(use "RealVectorIntro")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rxx")
(ng #t)
(simp (pf "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs"))
(ng #t)
(use "InitEqD")
(use "CauchyVectorElim2")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(use "RealEqIntro")
(use "RealEqSToRealElimDiffMod" (pt "ReaRat 0"))
(use "RealEqSIntro")
(ng #t)
(assume "n")
(use "RatEqvSym")
(ng #t)
(use "Truth")
(assume "p")
(ng #t)
(use "Truth")
(ng #t)
(use "MonIntro")
(ng #t)
(assume "p" "q")
(assume "pleq")
(use "MonElim")
(use "RealConstrToMon" (pt "as"))
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "Rxx")
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(use "InitEqD")
(ng #t)
(use "pleq")
(simp "ReaRat0CompRule")
(autoreal)
(ng #t)
(assume "p")
(animate "RatLeAbsBound")
(ng #t)
(simprat (pf "0*as(M(PosS(PosS(p+cNatPos(Succ(Succ Zero))))))==0"))
(auto)
(ng #t)
(use "InitEqD")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(save "RealVectorSTimesZero")

(deanimate "RatLeAbsBound")




(set-goal "all xx (RealVector xx -> (RealVectorSTimes (~1) xx) === ~xx )")
(cases)
(ind)
(cases)
(ng #t)
(assume "Rv")
(use "RealVectorEqNilElim")
(assume "M")
(assume "MVs")
(assume "Rv")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "(M::MVs)"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "Rv")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "(as::vVs)"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "M" "MVs")
(assume "Rv")
(simp "RealVectorSTimes0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "SeqsSTimes1CompRule")
(simp "ModsSTimes3CompRule")
(simp "RealVectorUMinus0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "SeqsUMinus1CompRule")
(use "RealVectorEqHeadElim")
(use "Ih")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(use "RealEqSToEq")
(use "RealIntro")
(use "CauchyDiffModAuxCauchy" (pt "M"))
(ng #t)
(use "RealConstrToCauchy")
(simp "<-" "RealUMinus0CompRule")
(use "RealUMinusReal")
(simp (pf "RealConstr as M eqd RealConstr((as::vVs)__Zero)((M::MVs)__Zero)"))
(use "RealVectorRealVecConstrRealComponentWise")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(ng #t)
(use "InitEqD")
(ng #t)
(assume "p")
(use "MonElim")
(use "RealConstrToMon" (pt "as"))
(simp (pf "RealConstr as M eqd RealConstr((as::vVs)__Zero)((M::MVs)__Zero)"))
(use "RealVectorRealVecConstrRealComponentWise")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(ng #t)
(use "InitEqD")
(use "PosLeTrans" (pt "PosS(p)"))
(auto)
(use "MonIntro")
(ng #t)
(assume "p" "q")
(assume "pleq")
(use "MonElim")
(use "RealConstrToMon" (pt "as"))
(simp (pf "RealConstr as M eqd RealConstr((as::vVs)__Zero)((M::MVs)__Zero)"))
(use "RealVectorRealVecConstrRealComponentWise")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(ng #t)
(use "InitEqD")
(ng #t)
(auto)
(simp "<-" "RealUMinus0CompRule")
(use "RealUMinusReal")
(simp (pf "RealConstr as M eqd RealConstr((as::vVs)__Zero)((M::MVs)__Zero)"))
(use "RealVectorRealVecConstrRealComponentWise")
(auto)
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "RealVectorConstrElim0")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(use "InitEqD")
(use "RealEqSIntro")
(ng #t)
(auto)
(save "RealVectorSTimesToMinus")




(set-goal "VectorNorm norm -> all xx (RealVector xx -> Real(norm xx))")
(assume "norm")
(elim)
(auto)
(save "VectorNormElim0")

(set-goal "VectorNorm norm -> all xx (RealVector xx -> norm xx===0 -> xx === ZerosRealVector (xx dim) )")
(assume "norm")
(elim)
(auto)
(save "VectorNormElim3Zero")


(set-goal "VectorNorm norm -> all xx ( xx === ZerosRealVector (xx dim) -> norm xx===0 )")
(assume "norm")
(elim)
(auto)
(save "VectorNormElim4Zero")

(set-goal "VectorNorm norm -> all xx,yy (RealVectorCompatible xx yy->norm (xx +yy) <<= norm(xx) + norm(yy) )")
(assume "norm")
(elim)
(auto)
(save "VectorNormElim5Triangle")


(set-goal "all norm (VectorNorm norm -> all xx,yy(xx === yy -> norm xx === norm yy))")
(assume "norm")
(elim)
(auto)
(save "VectorNormCompat")




;; (set-goal "VectorNorm norm -> all xx,yy(RealVectorCompatible xx yy -> abs(norm(xx) + ~(norm yy)) <<= norm(xx + ~yy))")




(set-goal "all norm (VectorNorm norm ->  all xx (RealVector xx -> 0<<=(norm xx) ))")
(assume "norm")
(assume "Vnorm")
(assume "xx" "Rxx")
(use "RealLeTimesCancelL" (pt "ReaRat 2") (pt "One"))
(ng #t)
(realproof)
(realproof)
(use "VectorNormElim0")
(auto)
(use "RealLeTrans" (pt "ReaRat 0"))
(ng #t)
(use "RealLeRefl")
(realproof)
(ng #t)
(use "RealLeTrans" (pt "norm xx + norm(~ xx)"))
(use "RealLeTrans" (pt "norm (xx + ~xx)"))
(use "RealLeReflNC")
(use "RealEqSym")
(use "VectorNormElim4Zero")
(auto)
(use "RealVectorPlusMinusZero")
(auto)
(use "VectorNormElim5Triangle")
(auto)
(use "RealVectorUMinusCompatible")
(auto)
(inst-with-to "RealSuccDistr" (pt "norm xx") (pt "Succ Zero") "Inst")
(ng "Inst")
(cut "Real(norm ~xx)")
(assume "Rcut1")
(cut "Real(norm xx)")
(assume "Rcut2")
(simpreal "<-" "Inst")
(use "RealLeMonPlus")
(use "RealLeReflNC")
(simpreal "RealTimesComm")
(use "RealEqSym")
(use "RealTimesOne")
(realproof)
(realproof)
(realproof)
(use "RealLeTrans" (pt "norm(RealVectorSTimes (ReaRat ~1) xx)"))
(use "RealLeReflNC")
(use "VectorNormCompat")
(auto)
(use "RealVectorEqSym")
(use "RealVectorSTimesToMinus")
(auto)
(use "RealLeTrans" (pt "abs(ReaRat ~1)*(norm xx)"))
(use "RealLeReflNC")
(use "VectorNormElim1STimes")
(auto)
(ng #t)
(realproof)
(auto)
(ng #t)
(simpreal "RealOneTimes")
(use "RealLeRefl")
(auto)
(use "VectorNormElim0")
(auto)
(use "VectorNormElim0")
(auto)
(use "RealVectorUMinusReal")
(auto)
(save "VectorNormNonNeg")
;; compatibility
(save "NormNNeg")


(define MATCH-TREE-BOUND 1000)

(set-goal "all xx (RealVectorTwoNorm xx eqd Rsqrt(RealVectorTwoNormSqr xx))")
(assume "xx")
(simp "RealVectorTwoNorm0CompRule")
(use "InitEqD")
(save "RealVectorTwoNormCompRule")



(set-goal "all x (exnc as,M (x eqd RealConstr as M))")
(cases)
(assume "as" "M")
(intro 0 (pt "as"))
(intro 0 (pt "M"))
(use "InitEqD")
(save "RealDeconstr")


(set-goal "all xx(RealVector xx -> Real(RealVectorTwoNorm xx))")
(assume "xx" "Rxx")
(simp "RealVectorTwoNorm0CompRule")
(assert "all xx (RealVector xx ->Real(Rsqrt(RealVectorTwoNormSqr xx)))")
(cases)
(ind)
(assume "MVs" "Rv") 
(ng #t)
(realproof)
(assume "as" "vVs" "Ih")
(cases)
(assume "Rv")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(use "Rv")
(assume "M" "MVs") 
(assume "Rv")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "Rv")
(assume "Assertion")
(use "Assertion")
(use "Rxx")
(save "RealVectorTwoNormReal")

(set-goal "all xx,yy(xx===yy -> RealVectorTwoNormSqr xx===RealVectorTwoNormSqr yy)")
(cases)
(ind)
(ng #t)
(assume "MVs")
(cases)
(cases)
(ng #t)
(assume "MVs0")
(assume "x=y")
(use "RealEqRefl")
(realproof)
(assume "as" "vVs" "MVs0") 
(assume "Rx")
(use "Efq")
(use "RealVectorEqInvalid0" (pt "MVs") (pt "RealVecConstr(as::vVs)MVs0"))
(ng #t)
(simp (pf "(Succ((ListLength nat=>rat)vVs)=(ListLength pos=>nat)MVs0)"))
(auto)
(simp (pf "Succ((ListLength nat=>rat)vVs)=(Lh(as::vVs))"))
(use "CauchyVectorElim2")
(use "RealVectorConstrElim0")
(use "RealVectorEqElim1" (pt "RealVecConstr(Nil nat=>rat)MVs"))
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "yy" "Req")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(ng #t)
(use "Truth")
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "yy"))
(use "Req")
(assume "M" "MVs") 
(cases)
(cases)
(assume "MVs0" "Rxx")
(use "Efq")
(use "RealVectorEqInvalid0" (pt "MVs0") (pt "RealVecConstr(as::vVs)(M::MVs)"))
(ng #t)
(simp (pf "(ListLength nat=>rat)vVs=(ListLength pos=>nat)MVs"))
(auto)
(use "CauchyVectorElim2")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M")) 
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr(Nil nat=>rat)MVs0"))
(auto)
(use "RealVectorEqSym")
(auto)
(assume "as0" "vVs0")
(cases)
(assume "Rxx")
(use "Efq")
(use "RealVectorEqInvalid1" (pt "(as0::vVs0)") (pt "RealVecConstr(as::vVs)(M::MVs)"))
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M")) 
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(Nil pos=>nat)"))
(auto)
(use "RealVectorEqSym")
(auto)
(assume "M0" "MVs0")
(assume "RVecEq")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(use "RealPlusCompat")
(use "RealTimesCompat")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorEqComponentsElim1")
(use "RVecEq")
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M")) 
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "InitEqD")
(use "InitEqD")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(simp (pf "RealConstr as0 M0 eqd RealVecConstr(as0::vVs0)(M0::MVs0)__Zero"))
(use "RealVectorEqComponentsElim1")
(use "RVecEq")
(ng #t)
(simp "CauchyVectorElim2")
(auto)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M")) 
(use "RealVectorConstrElim0")
(use "RealVectorEqElim0" (pt "RealVecConstr(as0::vVs0)(M0::MVs0)"))
(auto)
(use "InitEqD")
(use "InitEqD")
(simp (pf "RealVectorTwoNormSqrAux vVs MVs eqd RealVectorTwoNormSqr(RealVecConstr vVs MVs)"))
(simp (pf "RealVectorTwoNormSqrAux vVs0 MVs0 eqd RealVectorTwoNormSqr(RealVecConstr vVs0 MVs0)"))
(use "Ih")
(use "RealVectorConstrEqElim3Elem" (pt "M") (pt "M0") (pt "as") (pt "as0"))
(use "RVecEq")
(use "InitEqD")
(use "InitEqD")
(save "RealVectorTwoNormSqrCompat")

(set-goal "all xx,yy(xx===yy -> RealVectorTwoNorm xx===RealVectorTwoNorm yy)")
(assume "xx" "yy")
(assume "xx===yy")
(simp "RealVectorTwoNorm0CompRule")
(simp "RealVectorTwoNorm0CompRule")
(simp "Rsqrt0CompRule")
(simp "Rsqrt0CompRule")
(use "UCFallApplicationCompat")
(use "UCFallsqrt")
(use "RealVectorTwoNormSqrCompat")
(use "xx===yy")
(save "RealVectorTwoNormCompat")

(set-goal "(Real y -> RealVector xx -> (RealVectorTwoNormSqr(RealVectorSTimes y xx))===(abs y*abs y*RealVectorTwoNormSqr(xx)))")
(assume "y")
(cases)
(ind)
(assume "MVs")
(ng #t)
(strip)
(simpreal "RealTimesZero")
(use "RealEqRefl")
(realproof)
(autoreal)
(assume "as" "vVs" "Ih") 
(cases)
(ng #t)
(strip)
(simpreal "RealTimesZero")
(use "RealEqRefl")
(autoreal)
(assume "M" "MVs")
(assume "Ry" "Rv")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVectorSTimes0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVecMods0CompRule")
(simp "SeqsSTimes1CompRule")
(simp "ModsSTimes3CompRule")
(use "RealEqTrans" (pt "abs y*abs y*(RealConstr as M)*(RealConstr as M) + abs y*abs y*(RealVectorTwoNormSqrAux vVs MVs)"))
(simp "RealVectorTwoNormSqrAux3CompRule")
(use "RealPlusCompat")
(simp "<-" "RealTimes0CompRule")
(cut "Real(RealConstr as M)")
(assume "CutInst")
(cut "Real(RealConstr y seq y mod)")
(assume "CutInst2")
(simpreal "RealTimesAssoc")
(simpreal (pf "RealConstr y seq y mod*RealConstr as M*RealConstr y seq y mod===RealConstr y seq y mod*RealConstr y seq y mod*RealConstr as M"))
(simpreal (pf "RealConstr y seq y mod*RealConstr y seq y mod*RealConstr as M*RealConstr as M===RealConstr y seq y mod*RealConstr y seq y mod*(RealConstr as M*RealConstr as M)"))
(simpreal (pf "abs y*abs y*RealConstr as M*RealConstr as M===abs y*abs y*(RealConstr as M*RealConstr as M)"))
(use "RealTimesCompat")
(simpreal "<-" "RealAbsTimes")
(simp "<-" "TotalReaToEqD")
(use "RealSquarToAbs")
(auto)
(use "ReaTotalVar")
(auto)
(use "RealEqRefl")
(realproof)
(simpreal "RealTimesAssoc")
(use "RealEqRefl")
(autoreal)
(simpreal "RealTimesAssoc")
(use "RealEqRefl")
(autoreal)
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(auto)
(use "RealTimesComm")
(auto)
(realproof)
(simp "<-" "TotalReaToEqD")
(auto)
(use "ReaTotalVar")
(use "RealIntro")
(ng #t)
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(use "RealVectorConstrElim0")
(auto)
(use "MonVectorHeadElim" (pt "MVs"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(use "Ih")
(auto)
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp "RealVectorTwoNormSqrAux3CompRule")
(cut "Real(RealVectorTwoNormSqrAux vVs MVs)")
(assume "rCut")
(cut "Real(RealConstr as M)")
(assume "rCut2")
(simpreal "RealTimesPlusDistr")
(use "RealPlusCompat")
(simpreal "RealTimesAssoc")
(use "RealEqRefl")
(autoreal)
(use "RealEqRefl")
(realproof)
(simp (pf "RealVectorTwoNormSqrAux vVs MVs eqd RealVectorTwoNormSqr (RealVecConstr vVs MVs) "))
(use "RealRealVectorTwoNormSqr")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(ng #t)
(use "InitEqD")
(realproof)
(realproof)
(use "RealIntro")
(use "CauchyVectorHeadElim" (pt "vVs") (pt "MVs"))
(use "RealVectorConstrElim0")
(auto)
(use "MonVectorHeadElim" (pt "MVs"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(auto)
(simp (pf "RealVectorTwoNormSqrAux vVs MVs eqd RealVectorTwoNormSqr (RealVecConstr vVs MVs) "))
(use "RealRealVectorTwoNormSqr")
(use "RealVectorConstrElim4Elem" (pt "as") (pt "M"))
(auto)
(ng #t)
(use "InitEqD")
(save "RealVectorTwoNormSqrStep")

(set-goal "all x,xx(Real x -> RealVector xx -> RealVectorTwoNorm(RealVectorSTimes x xx)===abs x*RealVectorTwoNorm xx)")
(cases)
(assume "as" "M")
(assume "xx" "RasM")
(assume "Rxx")
(inst-with-to "RealSubVarEqd" (pt "RealConstr as M") "InstSub")
(by-assume "InstSub" "y" "InstSubProp")
(assert "Real y")
(simp "<-" "InstSubProp")
(use "RasM")
(assume "Ry")
(simp "InstSubProp")
(simp "RealVectorTwoNormCompRule")
(simp "RealVectorTwoNormCompRule")
(use "SqrRevCompat")
(use "RsqrtNNeg")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorSTimesReal")
(auto)
(cut "Real(Rsqrt(RealVectorTwoNormSqr xx))")
(assume "Rcut")
(simpreal (pf "0===ReaRat 0*ReaRat 0"))
(inst-with-to "RealLeMonTimesTwo" (pt "ReaRat 0")  (pt "abs(y)") (pt "ReaRat 0") (pt "Rsqrt(RealVectorTwoNormSqr xx)") "Inst")
(use "Inst")
(ng #t)
(use "RealLeToRealNNeg")
(use "RealLeRefl")
(realproof)
(use "RealLeToRealNNeg")
(use "RealLeRefl")
(realproof)
(simp "ReaRat0CompRule")
(use "RealAbsNNeg")
(auto)
(simp "ReaRat0CompRule")
(use "RsqrtNNeg")
(use "RealVectorTwoNormSqrNNeg")
(auto)
(ng #t)
(use "RealEqRefl")
(realproof)
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "Rxx")
(cut "Real(Rsqrt(RealVectorTwoNormSqr xx))")
(assume "Rcut")
(simpreal "RealSqrtProp")
(inst-with-to "RealSubVarEqd" (pt "Rsqrt(RealVectorTwoNormSqr xx)") "InstSub2")
(by-assume "InstSub2" "y2" "InstSub2Prop")
(simp "InstSub2Prop")
(cut "Real(RealVectorTwoNormSqr(RealVectorSTimes y xx))")
(assume "Rcut2")
(simpreal (pf "abs y*y2*(abs y*y2)===abs y*abs y*y2*y2"))
(simpreal "<-" "RealTimesAssoc")
(simpreal (pf "y2*y2===RealVectorTwoNormSqr xx"))
(use "RealVectorTwoNormSqrStep")
(auto)
(simp "<-" "InstSub2Prop")
(use "RealSqrtProp")
(use "RealVectorTwoNormSqrNNeg")
(auto)
(simp "<-" "InstSub2Prop")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(auto)
(simp "<-" "InstSub2Prop")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(auto)
(autoreal)
(cut "Real y2")
(assume "Rcut4")
(simpreal "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(realproof)
(simpreal "RealTimesComm")
(simpreal "RealTimesAssoc")
(use "RealEqRefl")
(realproof)
(simp "<-" "InstSub2Prop")
(use "Rcut")
(simp "<-" "InstSub2Prop")
(use "Rcut")
(realproof)
(realproof)
(simp "<-" "InstSub2Prop")
(use "Rcut")
(simp "<-" "InstSub2Prop")
(realproof)
(realproof)
(realproof)
(simp "<-" "InstSub2Prop")
(realproof)
(simp "<-" "InstSub2Prop")
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(simp "<-" "InstSub2Prop")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(auto)
(use "RealRealVectorTwoNormSqr")
(use "RealVectorSTimesReal")
(auto)
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorSTimesReal")
(auto)
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(auto)
(save "RealVectorTwoNormHom")


(set-goal "all xx(RealVector xx -> RealVectorTwoNorm xx===0 -> xx===ZerosRealVector xx dim)")
(cases)
(ind)
(ng #t)
(cases)
(assume "Rx")
(assume "0=0")
(use "RealVectorEqNilElim")
(assume "M" "MVs")
(assume "Rx")
(use "Efq")
(use "CauchyVectorInvalid1" (pt "M::MVs"))
(auto)
(use "RealVectorConstrElim0")
(auto)
(assume "as" "vVs" "Ih")
(cases)
(assume "Rx")
(use "Efq")
(use "CauchyVectorInvalid0" (pt "as::vVs"))
(auto)
(use "RealVectorConstrElim0")
(use "Rx")
(assume "M" "MVs")
(assume "Rxx" "0=0")
(simp "ZerosRealVector0CompRule")
(simp (pf "(RealVecConstr(as::vVs)(M::MVs))dim=Succ((RealVecConstr(vVs)(MVs))dim)"))
(simp "ZerosRealVectorSeqs1CompRule")
(simp "ZerosRealVectorMods1CompRule")
(cut "Real(RealConstr as M)")
(assume "Rcut1")
(cut "RealVector(RealVecConstr vVs MVs)")
(assume "Rcut2")
(use "RealVectorEqHeadElim")
(use "Ih")
(use "RealVectorIntro")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rxx")
;;(cut "RealVectorTwoNorm(RealVecConstr(as::vVs)(M::MVs))===0")
(simp "RealVectorTwoNorm0CompRule")
(cut "Real(Rsqrt(RealVectorTwoNormSqr(RealVecConstr vVs MVs)))")
(assume "cutX")
(simpreal (pf "0===Rsqrt(0)"))
(simp "Rsqrt0CompRule")
(simp "Rsqrt0CompRule")
(use "UCFallApplicationCompat")
(use "UCFallsqrt")
(simp "RealVectorTwoNormSqr0CompRule")
(use "RealPlusInjZero" (pt "(RealConstr as M)*(RealConstr as M)"))
(use "SqrNNeg")
(autoreal)
(simp "<-" "RealVectorTwoNormSqr0CompRule")
(use "RealVectorTwoNormSqrNNeg")
(use "Rcut2")
(simp "<-" "RealVectorTwoNormSqrAux3CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(simp (pf "RealVectorTwoNormSqrAux(as::vVs)(M::MVs) eqd RealVectorTwoNormSqr(RealVecConstr(as::vVs)(M::MVs))"))
(use "RSqrtCompatRev")
(use "RealVectorTwoNormSqrNNeg")
(use "Rxx")
(use "RealLeRefl")
(realproof)
(use "RealEqTrans" (pt "ReaRat 0"))
(simp "ReaRat0CompRule")
(use "0=0")
(ng #t)
(use "RealEqIntro")
(autoreal)
(ng #t)
(assume "p")
(use "Truth")
(simp "RealVectorTwoNormSqr0CompRule")
(simp "RealVecSeqs0CompRule")
(simp "RealVecMods0CompRule")
(use "InitEqD")
(ng #t)
(use "RealEqIntro")
(autoreal)
(ng #t)
(assume "p")
(use "Truth")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "Rcut2")
(use "RealSqrZeroIsZero")
(use "Rcut1")
(use "RealPlusInjZero" (pt "RealVectorTwoNormSqrAux vVs MVs"))
(simp (pf "RealVectorTwoNormSqrAux vVs MVs eqd RealVectorTwoNormSqr (RealVecConstr vVs MVs)"))
(use "RealVectorTwoNormSqrNNeg")
(use "Rcut2")
(use "InitEqD")
(use "SqrNNeg")
(use "Rcut1")
(simpreal "RealPlusComm")
(simp "<-" "RealVectorTwoNormSqrAux3CompRule")
(simp (pf "RealVectorTwoNormSqrAux (as::vVs) (M::MVs) eqd RealVectorTwoNormSqr (RealVecConstr (as::vVs) (M::MVs))"))
(use "RSqrtCompatRev")
(use "RealVectorTwoNormSqrNNeg")
(use "Rxx")
(use "RealLeRefl")
(realproof)
(use "RealEqTrans" (pt "ReaRat 0"))
(simp "ReaRat0CompRule")
(simp "<-" "RealVectorTwoNorm0CompRule")
(use "0=0")
(simp "ReaRat0CompRule")
(ng #t)
(use "RealEqIntro")
(autoreal)
(assume "p")
(ng #t)
(use "Truth")
(use "InitEqD")
(realproof)
(simp (pf "RealVectorTwoNormSqrAux vVs MVs eqd RealVectorTwoNormSqr (RealVecConstr vVs MVs)"))
(use "RealRealVectorTwoNormSqr")
(use "Rcut2")
(use "InitEqD")
(use "RealVectorIntro")
(ng #t)
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(use "MonVectorElim4Elem" (pt "M"))
(use "RealVectorConstrElim1" (pt "as::vVs"))
(use "Rxx")
(simp (pf "RealConstr as M eqd RealVecConstr(as::vVs)(M::MVs)__Zero"))
(use "RealVectorRealComponentWise")
(use "Rxx")
(ng #t)
(simp "CauchyVectorElim2")
(use "Truth")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(use "InitEqD")
(simp "CauchyVectorElim2")
(ng #t)
(use "Truth")
(use "CauchyVectorElim4Elem" (pt "as") (pt "M"))
(use "RealVectorConstrElim0")
(use "Rxx")
(save "RealVectorTwoNormVecZero")

(set-goal "all xx(xx===ZerosRealVector xx dim -> RealVectorTwoNorm xx===0)")
(assume "xx" "x=0")
(use "RealEqTrans" (pt "abs(0)*RealVectorTwoNorm(xx)"))
(use "RealEqTrans" (pt "RealVectorTwoNorm(RealVectorSTimes (ReaRat 0) xx)"))
(use "RealEqTrans" (pt "RealVectorTwoNorm(ZerosRealVector xx dim)"))
(use "RealVectorTwoNormCompat")
(use "x=0")
(use "RealVectorTwoNormCompat")
(use "RealVectorEqSym")
(use "RealVectorSTimesZero")
(use "RealVectorEqElim0" (pt "ZerosRealVector xx dim"))
(use "x=0")
(simp "ReaRat0CompRule")
(inst-with-to "RealVectorTwoNormHom" (pt "ReaRat 0") (pt "xx") "Inst")
(use "Inst")
(simp "ReaRat0CompRule")
(realproof)
(use "RealVectorEqElim0" (pt "ZerosRealVector xx dim"))
(use "x=0")
(cut "Real(RealVectorTwoNorm xx)")
(assume "Rcut")
(simpreal (pf "abs 0 === 0"))
(use "RealZeroTimes")
(use "Rcut")
(ng #t)
(use "RealEqRefl")
(realproof)
(use "RealVectorTwoNormReal")
(use "RealVectorEqElim0" (pt "ZerosRealVector xx dim"))
(use "x=0")
(save "RealVectorTwoNormNormZero")





(set-goal "all xx,yy(RealVectorCompatible xx yy -> RealVectorTwoNorm(xx+yy)<<=RealVectorTwoNorm xx+RealVectorTwoNorm yy)")
(assume "xx" "yy")
(assume "Rcomp")
(use "RealSqrAntiInc")
(simp "RealVectorTwoNorm0CompRule")
(use "RsqrtNNeg")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorPlusReal")
(use "Rcomp")
(use "RealNNegToRealLe")
(use "RealNNegPlusNNeg")
(simp "RealVectorTwoNorm0CompRule")
(use "RealLeToRealNNeg")
(use "RsqrtNNeg")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealLeToRealNNeg")
(simp "RealVectorTwoNorm0CompRule")
(use "RsqrtNNeg")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(use "RealLeTrans" (pt "(xx+yy)*(xx+yy)"))
(simp "RealVectorTwoNorm0CompRule")
(use "RealLeTrans" (pt "RealVectorTwoNormSqr(xx+yy)"))
(use "RealLeReflNC")
(use "RealSqrtProp")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorPlusReal")
(use "Rcomp")
(use "RealLeReflNC")
(use "RealEqSym")
(use "RealVectorDTimesSqr")
(use "RealVectorPlusReal")
(use "Rcomp")
(use "RealLeTrans" (pt "xx*xx + xx*yy+yy*xx+yy*yy"))
(use "RealLeReflNC")
(use "RealVectorDTimesPlusDistrDouble")
(use "Rcomp")
(use "RealVectorCompatibleSym")
(use "Rcomp")
(use "Rcomp")
(use "RealLeTrans" (pt "(RealVectorTwoNorm xx*RealVectorTwoNorm xx) + (RealVectorTwoNorm xx*RealVectorTwoNorm yy) + RealVectorTwoNorm yy*RealVectorTwoNorm xx + RealVectorTwoNorm yy*RealVectorTwoNorm yy"))
(use "RealLeMonPlus")
(use "RealLeMonPlus")
(use "RealLeMonPlus")
(use "RealLeReflNC")
(use "RealEqSym")
(simp "RealVectorTwoNorm0CompRule")
(use "RealEqTrans" (pt "RealVectorTwoNormSqr xx"))
(use "RealSqrtProp")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealEqSym")
(use "RealVectorDTimesSqr")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "CauchySchwartzInequalitySqrt")
(use "Rcomp")
(use "CauchySchwartzInequalitySqrt")
(use "RealVectorCompatibleSym")
(use "Rcomp")
(use "RealLeReflNC")
(simp "RealVectorTwoNorm0CompRule")
(use "RealEqTrans" (pt "RealVectorTwoNormSqr yy"))
(use "RealVectorDTimesSqr")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(use "RealEqSym")
(use "RealSqrtProp")
(use "RealVectorTwoNormSqrNNeg")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(use "RealLeReflNC")
(use "RealEqSym")
(use "RealPlusTimesDistrDouble")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim0" (pt "yy"))
(use "Rcomp")
(use "RealSqrtReal")
(use "RealRealVectorTwoNormSqr")
(use "RealVectorCompatibleElim1" (pt "xx"))
(use "Rcomp")
(save "RealVectorTwoNormSqrTriangle")






(set-goal "VectorNorm RealVectorTwoNorm")
(use "VectorNormIntro")
(use "RealVectorTwoNormReal")
(use "RealVectorTwoNormCompat")
(use "RealVectorTwoNormHom")
(use "RealVectorTwoNormVecZero")
(use "RealVectorTwoNormNormZero")
(use "RealVectorTwoNormSqrTriangle")
(save "TwoNormVectorNorm")

