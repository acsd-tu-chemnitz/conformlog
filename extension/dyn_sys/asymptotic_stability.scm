
(display "loading asymptotic_stability.scm")(newline)


(add-ids
    (list (list "SolutionConvergentToZeroInInfIntNorm" (make-arity (py "xxseq") (py "norm"))))
    '("all xxseq,norm( VectorNorm norm -> 
        all k (ex m all n (m<=n -> norm (xxseq n) <<= (1#2)**k)) -> SolutionConvergentToZeroInInfIntNorm xxseq norm )"
      "SolutionConvergentToZeroInInfIntNormIntro"))



(add-ids
    (list (list "AttractiveEq" (make-arity (py "xxseq") (py "FF") (py "realVec") (py "norm"))))
    '("all xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 -> VectorNorm norm ->
        ex repsilon,p (RealLt 0 repsilon p -> norm xx0<<=repsilon ->  SolutionConvergentToZeroInInfIntNorm xxseq norm) -> AttractiveEq xxseq FF xx0 norm )"
      "AttractiveEqIntro"))



(add-ids
    (list (list "PDVDiffStrongNorm" (make-arity (py "realVec=>rea") (py "rea=>rea") (py "realVecseq") (py "FF") (py "realVec") (py "norm"))))
    '("all V,kapp3,xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 -> VectorNorm norm -> ClassKappaConfiguration kapp3 -> all n ( (V (xxseq (Succ n))))+ ~(V (xxseq n)) <<= ~(kapp3(norm((xxseq n)))) ->  PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm)"
      "PDVDiffStrongNormIntro"))



(set-goal "all V,kapp3,xxseq,FF,xx0,norm( PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm -> SolutionSim xxseq FF xx0) ")
(assume "V" "kapp3" "xxseq" "FF" "xx0" "norm")
(elim)
(auto)
(save "PDVDiffStrongNormElim0")

(set-goal "all V,kapp3,xxseq,FF,xx0,norm( PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm ->  VectorNorm norm ) ")
(assume "V" "kapp3" "xxseq" "FF" "xx0" "norm")
(elim)
(auto)
(save "PDVDiffStrongNormElim1")

(set-goal "all V,kapp3,xxseq,FF,xx0,norm( PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm ->  ClassKappaConfiguration kapp3 ) ")
(assume "V" "kapp3" "xxseq" "FF" "xx0" "norm")
(elim)
(auto)
(save "PDVDiffStrongNormElim2")

(set-goal "all V,kapp3,xxseq,FF,xx0,norm( PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm ->  all n ( (V (xxseq (Succ n))))+ ~(V (xxseq n)) <<= ~(kapp3(norm((xxseq n)))) ) ")
(assume "V" "kapp3" "xxseq" "FF" "xx0" "norm")
(elim)
(auto)
(save "PDVDiffStrongNormElim3")




(set-goal "all V,kapp3,xxseq,FF,xx0,norm,rdelta( PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm ->  all n ( kapp3(rdelta) <<=kapp3(norm (xxseq n)) -> V (xxseq (Succ n))+ ~(V (xxseq n)) <<= ~(kapp3(rdelta))) ) ")
(assume "V" "kapp3" "xxseq" "FF" "xx0" "norm" "rdelta")
(assume "PDVDiffStrong V")
(assume "n" "cond")
(use "RealLeTrans" (pt "~(kapp3(norm(xxseq n))) "))
(use "PDVDiffStrongNormElim3" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeUMinus")
(use "cond")
(save "VSuccAssertion1")

(set-goal "all V,kapp3,xxseq,FF,xx0,norm,rdelta,m( ProperRHS FF (xx0 dim) -> LyapunovConfig V (xx0 dim) xx0 -> Real rdelta ->PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm ->  all n ( n<=m -> kapp3(rdelta) <<=kapp3(norm (xxseq n))) -> V (xxseq (m))+ ~(V (xxseq Zero)) <<= ~(m*kapp3(rdelta)))  ")
(assume "V" "kapp3" "xxseq" "FF" "xx0" "norm" "rdelta")
(ind)
(assume "PRHS")
(assume "LyapunovConfig V")
(assume "Rdelta")
(assume "PDVDiffStrong V")
(assume "cond")
(cut "Real(~(Zero*kapp3 rdelta))")
(assume "cutInst")
(simpreal (pf "V(xxseq Zero)+ ~(V(xxseq Zero))===0"))
(use "RealLeReflNC")
(simpreal "RealTimesComm")
(ng #t)
(simpreal "RealTimesZero")
(ng #t)
(use "RealEqRefl")
(realproof)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(autoreal)
(use "RealPlusMinusZero")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm") )
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm") )
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "RealUMinusReal")
(use "RealTimesReal")
(realproof)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(assume "m" "Ih")
(assume "PRHS" "LyapunovConfig V" "Rdelta" "cond1" "cond2")
(assert "all n (Real(V (xxseq n)))")
(assume "n")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm")) 
(auto)
(assume "RAssertion")
(inst-with-to "RAssertion" (pt "m") "realp1")
(inst-with-to "RAssertion" (pt "Succ m") "realp2")
(inst-with-to "RAssertion" (pt "Zero") "realp3")
(use "RealLeTrans" (pt "V(xxseq(Succ m)) + ~(V(xxseq(m))) + V(xxseq(m)) + ~(V(xxseq Zero))"))
(use "RealLePlusCancelR" (pt "V(xxseq Zero)"))
(autoreal)
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(simpreal "<-" "RealPlusAssoc")
(use "RealLeMonPlus")
(use "RealLeRefl")
(autoreal)
(simpreal "RealPlusAssoc")
(simpreal (pf "~(V(xxseq m))+V(xxseq m)===0"))
(simpreal (pf "0+(~(V(xxseq Zero))+V(xxseq Zero))===(~(V(xxseq Zero))+V(xxseq Zero))"))
(use "RealLeRefl")
(autoreal)
(simpreal "RealPlusComm")
(use "RealPlusZero")
(autoreal)
(simpreal "RealPlusComm")
(use "RealPlusMinusZero")
(autoreal)
(use "RealLeTrans" (pt "~ (kapp3 rdelta) + ~(m*(kapp3 rdelta))"))
(cut "Real(~(kapp3 rdelta)+ ~(m*kapp3 rdelta))")
(assume "cut1")
(simpreal "<-" "RealPlusAssoc")
(use "RealLeMonPlus")
(use "RealLeTrans" (pt "~(kapp3(norm(xxseq m)))"))
(use "PDVDiffStrongNormElim3" (pt "FF") (pt "xx0"))
(use "cond1")
(use "RealLeUMinusInv")
(cut "Real(~ ~(kapp3(norm(xxseq m)))) ")
(assume "cut2")
(simpreal "RealUMinusUMinus")
(cut "Real(kapp3 rdelta)")
(assume "cut3")
(simpreal "RealUMinusUMinus")
(use "cond2")
(use "Truth")
(use "RealUMinusRealInv")
(use "RealLeElim1" (pt "(V(xxseq(Succ m))+ ~(V(xxseq m)))"))
(use "PDVDiffStrongNormElim3" (pt "FF") (pt "xx0"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(use "RealUMinusReal")
(use "RealLeElim1" (pt "(V(xxseq(Succ m))+ ~(V(xxseq m)))"))
(use "PDVDiffStrongNormElim3" (pt "FF") (pt "xx0"))
(auto)
(use "Ih")
(auto)
(assume "n" "n<=m")
(use "cond2")
(use "NatLeTrans" (pt "m"))
(use "n<=m")
(auto)
(use "RealUMinusReal")
(use "RAssertion")
(use "RAssertion")
(use "RealPlusReal")
(use "RAssertion")
(use "RealUMinusReal")
(use "RAssertion")
(use "RealPlusReal")
(use "RealUMinusReal")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(use "RealUMinusReal")
(use "RealTimesReal")
(realproof)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(cut "Real(kapp3 rdelta)")
(assume "cutInst0")
(use "RealLeReflNC")
(simpreal "<-" "RealSuccDistr")
(simpreal "RealPlusComm")
(simpreal "RealUMinusPlus")
(use "RealEqRefl")
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(save "LyapunovUASAux")
(save "PRBTFOO1")



(set-goal "all V,kapp3,xxseq,FF,xx0,norm( LyapunovConfig V (xx0 dim) xx0 -> ProperRHS FF (xx0 dim) -> PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm -> PDVDiff V xxseq FF xx0)")
(assume "V" "kapp3" "xxseq" "FF" "xx0" "norm")
(assume "LyapunovConfig V" "PRHS")
(assume "PDVDiffStrong V")
(use "PDVDiffIntro")
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(assume "n")
(assert "all n Real(V(xxseq n))")
(assume "n0")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp "SolutionSimElim4" (pt "xx0") (pt "FF"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(simp "SolutionSimElim4" (pt "FF"))
(auto)
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(assume "RealAssertion")
(inst-with-to "PDVDiffStrongNormElim3" (pt "V") (pt "kapp3") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm") "PDVDiffInst")
(assert "V(xxseq(Succ n))+ ~(V(xxseq n))<<= ~(kapp3(norm(xxseq n)))")
(use "PDVDiffInst")
(auto)
(assume "PDVDiffInst2")
(use "RealLePlusCancelR" (pt "~(V(xxseq n))"))
(auto)
(use "RealUMinusReal")
(auto)
(simpreal (pf "V(xxseq n)+ ~(V(xxseq n))===0"))
(use "RealLeTrans" (pt " ~(kapp3(norm(xxseq n)))"))
(use "PDVDiffInst2")
(use "RealLeUMinusInv")
(simpreal "RealUMinusUMinus")
(use "RealLeTrans" (pt "ReaRat 0"))
(ng #t)
(use "RealLeRefl")
(use "RealRat")
(use "ClassKappaConfigurationElim4")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(use "NormNNeg")
(use "PDVDiffStrongNormElim1" (pt "V") (pt "kapp3") (pt "xxseq") (pt "FF") (pt "xx0"))
(use "PDVDiffStrong V")
(use "RealVectorEqElim0" (pt " (Simulation n xx0 FF)"))
(use "SolutionSimElim0")
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "PDVDiffStrongNormElim2" (pt "V") (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(use "VectorNormElim0")
(use "PDVDiffStrongNormElim1" (pt "V") (pt "kapp3") (pt "xxseq") (pt "FF") (pt "xx0"))
(auto)
(use "RealVectorEqElim0" (pt " (Simulation n xx0 FF)"))
(use "SolutionSimElim0")
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "RealPlusMinusZero")
(auto)
(save "PDVDiffStrongNormElim4")


; (set-goal "all k exl p (1#2**p)<=(1#2)**k ")
; (cases)
; (assume "p")
; (intro 0 (pt "p"))
; (use "Truth")
; (intro 0 (pt "One"))
; (ng #t)
; (use "Truth")
; (assume "p")
; (intro 0 (pt "One"))
; (ng #t)
; (use "Truth")
; (save "EpsPosBoundEpsInt")

; (set-goal "all k exl p RealLt 0((1#2)**k) p ")
; (cases)
; (assume "p")
; (intro 0 (pt "p"))
; (use "Truth")
; (intro 0 (pt "One"))
; (ng #t)
; (use "Truth")
; (assume "p")
; (intro 0 (pt "One"))
; (ng #t)
; (use "Truth")
; (save "EpsPosBoundEpsIntTwo")



(add-program-constant "SequenceSimShift" (py "realVecseq=>nat=>realVecseq"))

(add-computation-rule "SequenceSimShift xxseq n0" "RealVecSeqConstr( [n] xxseq (n+n0))")

(set-totality-goal "SequenceSimShift")
(use "AllTotalElim")
(assume "xxseq")
(use "AllTotalElim")
(assume "n")
(ng #t)
(use "TotalRealVecseqRealVecSeqConstr")
(use "AllTotalElim")
(assume "n0")
(use "RealVecTotalVar")
(save "SequenceSimShiftTotal")

(set-goal "all xxseq,FF,xx0 (ProperRHS FF (xx0 dim) -> SolutionSim xxseq FF xx0-> SolutionSim xxseq FF(xxseq Zero))")
(assume "xxseq" "FF" "xx0")
(assume "PRHS")
(assume "SolSim")
(use "SolutionSimIntro")
(ind)
(ng #t)
(use "RealVectorEqRefl")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(auto)
(assume "n" "Ih")
(inst-with-to "SolutionSimElim0" (pt "xxseq") (pt "FF") (pt "xx0") "SolSimInst")
(assert "all n xxseq n===Simulation n xx0 FF")
(use "SolSimInst")
(auto)
(assume "SolSimInst1")
(inst-with-to "SolSimInst1" (pt "Succ n") "SolSimInstFinal")
(use "RealVectorEqTrans" (pt "Simulation(Succ n)xx0 FF"))
(use "SolSimInstFinal")
(simp "Simulation1CompRule")
(simp "Simulation1CompRule")
(use "ProperRHSElim2" (pt "xx0 dim"))
(auto)
(use "ProperSimulationDim")
(auto)
(simp (pf "(Simulation n(xxseq Zero)FF)dim=(Simulation n(xx0)FF)dim"))
(use "ProperSimulationDim")
(auto)
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "RealVectorEqTrans" (pt "xxseq n"))
(use "RealVectorEqSym")
(use "Ih")
(use "SolSimInst1")
(use "RealVectorEqTrans" (pt "xxseq n"))
(use "RealVectorEqSym")
(use "SolSimInst1")
(use "Ih")
(save "SolutionSimStartCompat")

(set-goal "all xxseq,FF,xx0,n(ProperRHS FF (xx0 dim) -> SolutionSim xxseq FF xx0->SolutionSim(RealVecSeqConstr([n0]xxseq(n0+n)))FF(xxseq n))")
(assume "xxseq" "FF" "xx0")
(assume "n")
(assume "PRHS")
(assume "SolutionSim1")
(use "SolutionSimIntro")
(ng #t)
(ind)
(ng #t)
(use "RealVectorEqRefl")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(auto)
(assume "n0")
(assume "Ih")
(ng #t)
(use "RealVectorEqTrans" (pt "Simulation (Succ(n0+n)) xx0 FF") )
(use "SolutionSimElim0")
(auto)
(simp "Simulation1CompRule")
(use "ProperRHSElim2" (pt "xx0 dim"))
(auto)
(use "ProperSimulationDim")
(auto)
(simp (pf "(Simulation n0(xxseq n)FF)dim=(xxseq(n0+n)) dim"))
(simp (pf "(xxseq(n0+n)) dim=(Simulation (n0+n) xx0 FF) dim"))
(use "ProperSimulationDim")
(auto)
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "SolutionSimElim0")
(auto)
(simp "NatEqSym")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "Ih")
(use "RealVectorEqTrans" (pt "xxseq(n0+n)") )
(use "RealVectorEqSym")
(use "SolutionSimElim0")
(auto)
(save "SolutionSimShiftCompat")

(set-goal "all xxseq,FF,xx0(SolutionSim xxseq FF xx0 -> ProperRHS FF (xx0 dim) -> all n ProperRHS FF ((xxseq n) dim))")
(assume "xxseq" "FF" "xx0")
(assume "SolSim")
(assume "PRHS")
(ind)
(use "ProperRHSIntro")
(assume "xx" "xx dim")
(inst-with-to "ProperRHSElim0" (pt "FF") (pt "xx0 dim") "RHS1")
(use "RHS1")
(auto)
(simp "xx dim")
(use "SolutionSimElim4" (pt "FF"))
(auto)
(assume "xx" "xx dim")
(assume "Rxx")
(use "ProperRHSElim1" (pt "xx0 dim"))
(auto)
(simp "xx dim")
(use "SolutionSimElim4" (pt "FF"))
(auto)
(assume "xx" "yy" "dim1" "dim2" "eqcond")
(use "ProperRHSElim2" (pt "xx0 dim"))
(auto)
(simp "dim1")
(use "SolutionSimElim4" (pt "FF"))
(auto)
(simp "dim2")
(use "SolutionSimElim4" (pt "FF"))
(auto)
(assume "n" "Ih")
(use "ProperRHSIntro")
(assume "xx" "cond")
(use "ProperRHSElim0" (pt "(xxseq n) dim"))
(use "Ih")
(simp (pf "xx dim =(xxseq(Succ n))dim"))
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "SolutionSimElim4" (pt "FF"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(auto)
(assume "xx" "xx dim" "Rxx")
(use "ProperRHSElim1" (pt "xx0 dim"))
(auto)
(simp "xx dim")
(use "SolutionSimElim4" (pt "FF"))
(auto)
(assume "xx" "yy" "dim1" "dim2" "eqcond")
(use "ProperRHSElim2" (pt "xx0 dim"))
(auto)
(simp "dim1")
(use "SolutionSimElim4" (pt "FF"))
(auto)
(simp "dim2")
(use "SolutionSimElim4" (pt "FF"))
(auto)
(save "ProperRHSCompat")



(set-goal "all V,xxseq,FF,xx0,n( ProperRHS FF (xx0 dim) ->LyapunovConfig V (xx0 dim) xx0 -> PDVDiff V xxseq FF(xx0)  -> PDVDiff V ( SequenceSimShift xxseq n) FF(xxseq n) ) ")
(assume "V" "xxseq" "FF" "xx0")
(assume "n")
(assume "PRHS")
(assume "LyapunovConfig V xx0")
(assume "PDVDiff V")
(use "PDVDiffIntro")
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimIntro")
(assume "n0")
(ng #t)
(inst-with-to "SolutionSimElim0" (pt "xxseq") (pt "FF") (pt "xx0") "SimInst")
(assert "all n xxseq n===Simulation n xx0 FF")
(use "SimInst")
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "EqInst")
(use "RealVectorEqTrans" (pt "Simulation (n0+n) xx0 FF"))
(use "EqInst")
(assert "all n0 Simulation(n0+n)xx0 FF===Simulation n0(xxseq n)FF")
(ind)
(ng #t)
(use "RealVectorEqSym")
(use "EqInst")
(assume "n1" "Ih")
(simp "Simulation1CompRule")
(simp (pf "Succ n1+n=Succ(n1+n)"))
(simp "Simulation1CompRule")
(use "ProperRHSElim2" (pt "xx0 dim"))
(use "PRHS")
(use "ProperSimulationDim")
(auto)
(simp (pf "(Simulation n1(xxseq n)FF)dim=(Simulation(n1+n)xx0 FF) dim"))
(use "ProperSimulationDim")
(auto)
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "RealVectorEqSym")
(use "Ih")
(use "Ih")
(ng #t)
(use "Truth")
(auto)
(assume "n0")
(simp "SequenceSimShift0CompRule")
(use "RealLeTrans" (pt "V (xxseq(Succ(n0+n)))"))
(use "RealLeReflNC")
(use "CmapContmvElim1" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp "RealVectorCompatibleElim2" (pt "xxseq(Succ(n0+n))"))
(simp "SolutionSimElim4" (pt "xx0") (pt "FF"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealVectorEqComponentsElim0")
(ng #t)
(use "RealVectorEqRefl")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(simp (pf "(RealVecSeqConstr([n1]xxseq(n1+n))(Succ n0))dim=(xxseq(Succ(n0+n))) dim"))
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(ng #t)
(use "RealVectorEqRefl")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PDVDiffElim0" (pt "FF") (pt "xx0"))
(auto)
(save "LyapunovSequenceSimShift")



; (set-goal "all n,n0 ( n0<=n -> exl m n=m+n0)")
; (ind)
; (ng #t)
; (assume "n" "n=Zero")
; (intro 0 (pt "Zero"))
; (simp "n=Zero")
; (use "Truth")
; (assume "n" "Ih")
; (cases)
; (assume "T")
; (ng #t)
; (intro 0 (pt "Succ n"))
; (use "Truth")
; (assume "n0" "n0len")
; (ng #t)
; (assert " exl m n=m+n0")
; (use "Ih")
; (use "n0len")
; (assume "ExInst")
; (by-assume "ExInst" "m0" "ExInstProp")
; (intro 0 (pt "m0"))
; (use "ExInstProp")
; (save "NatLeExShift")


; (set-goal "all n n=NatToInt(n)")
; (ind)
; (auto)
; (save "NatToIntAux")

; (set-goal "all p ex n RatLe p n")
; (assert "all n0 n0+n0=IntPlus n0 n0")
; (ind)
; (auto)
; (assume "n" "Ih0")
; (ng #t)
; (use "IntPredInj")
; (ng #t)
; (use "IntPredInj")
; (ng #t)
; (use "Ih0")
; (assume "Assertion")
; (ind)
; (ex-intro (pt "Succ Zero")) 
; (auto)
; (assume "p" "Ih")
; (by-assume "Ih" "n0" "NoProp")
; (ex-intro "(n0 + n0)")
; (use "RatLeTrans" (pt "RatPlus p p"))
; (simp "IntPSZero")
; (auto)
; (simprat (pf "n0+n0==RatPlus n0 n0"))
; (use "RatLeMonPlus")
; (use "NoProp")
; (use "NoProp")
; (simp "NatToIntAux")
; (ng #t)
; (use "Assertion")
; (assume "p" "Ih")
; (by-assume "Ih" "n0" "NoProp")
; (ex-intro "1+n0 + n0")
; (use "RatLeTrans" (pt "RatPlus One (RatPlus p p)"))
; (ng #t)
; (use "Truth")
; (simp "<-" "RatPlusAssoc")
; (simp "<-" "RatPlusAssoc")
; (use "RatLeTrans" (pt "(1#1)+(n0+n0)"))
; (use "RatLeMonPlus")
; (auto)
; (simprat (pf "n0+n0==RatPlus n0 n0"))
; (use "RatLeMonPlus")
; (auto)
; (save "PosToNatBound")

; (set-goal "all x (Real x -> ex n x<<= n)")
; (cases)
; (assume "as" "M")
; (assume "Rx")
; (inst-with-to "RealBound" "RealBoundInst")
; (assert "exl m all n abs(as n)<=2**m")
; (use "RealBoundInst" (pt "M"))
; (use "RealConstrToCauchy")
; (use "Rx")
; (assume "ExInst")
; (by-assume "ExInst" "n0" "ExInstProp")
; (inst-with-to "PosToNatBound" (pt "2**n0") "PosToNatBoundInst")
; (by-assume "PosToNatBoundInst" "n1" "PosToNatBoundProp")
; (ex-intro "n1")
; (use "RealLeTrans" (pt "abs(RealConstr as M)"))
; (use "RealLeAbsId")
; (use "Rx")
; (use "RealLeSToLe")
; (realproof)
; (use "RealRat")
; (use "RealLeSIntro")
; (use "RealNNegSIntro")
; (ng #t)
; (assume "n")
; (use "RatLePlusCancelR" (pt "abs(as n)"))
; (simp "<-" "RatPlusAssoc")
; (simprat (pf "~abs(as n)+abs(as n)==0"))
; (ng #t)
; (use "RatLeTrans" (pt "(2**n0)#1"))
; (use "ExInstProp")
; (use "PosToNatBoundProp")
; (ng #t)
; (use "Truth")
; (save "RealNatBound")



(deanimate "RealBoundX")

(set-goal "all V,kapp1,kapp2,norm,xx ( ClassKappaConfiguration kapp1 -> ClassKappaConfiguration kapp2 ->   RealVector xx -> LyapunovConfig V (xx dim) xx -> PDVNorm V (xx dim) kapp1 kapp2 norm-> exl p RealLt (V xx) 0 p -> F)")
(assume "V" "kapp1" "kapp2" "norm")
(assume "xx")
(assume "classkapp1"  "classkapp2" "Rxx")
(assume "LyapunovConfig V")
(assume "PDVNorm V")
(assume "exlPos")
(by-assume "exlPos" "p" "exlPosProp")
(use "LeIsNotGt" (pt "ReaRat 0") (pt "(V xx)")  (pt "p"))
(ng #t)
(use "RealRat")
(use "RealLeElim1" (pt "kapp1 (norm xx)"))
(use "PDVNormElim0" (pt "xx dim") (pt "kapp2"))
(auto)
(use "RealLeTrans" (pt "kapp1 (norm xx)"))
(use "ClassKappaConfigurationElim4" (pt "kapp1"))
(auto)
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx dim") (pt "kapp1") (pt "kapp2") )
(auto)
(use "PDVNormElim0" (pt "xx dim") (pt "kapp2"))
(auto)
(save "LyapunovNonNNeg0")


;; Lyapunov asymptotic stabilty


(set-goal "all V,kapp1,kapp2,kapp3,kappinv,xxseq,FF,xx0,norm ( ProperRHS FF (xx0 dim) -> LyapunovConfig V (xx0 dim ) xx0 -> exl p RealLt 0(norm xx0)p -> ClassKappaConfiguration kapp1 -> ClassKappaConfiguration kapp2 -> ClassKappaInverse kapp2 kappinv -> ClassKappaConfiguration kapp3 -> PDVNorm V (xx0 dim) kapp1 kapp2 norm -> PDVDiffStrongNorm V kapp3 xxseq FF xx0 norm-> AttractiveEq xxseq FF xx0 norm)")
;; All assumptions go to the context
(assume "V" "kapp1" "kapp2" "kapp3" "kappinv" "xxseq" "FF" "xx0" "norm")
(assume "PRHS")
(assume "ProperLyap")
(assume "ProperInit")
(assume "classkapp1")
(assume "classkapp2")
(assume "classkappInv")
(assume "classkapp3")
(assume "PDVNorm V")
(assume "PDVDiff V")
(assert "all n RealVector (xxseq n)")
(assume "n")
(use "RealVectorEqElim0" (pt "Simulation n xx0 FF"))
(use "SolutionSimElim0")
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(assume "RealSolutionAssertion")
;; Unfolding definition
(use "AttractiveEqIntro")
;; Proving heads 
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "PDVDiffStrongNormElim1" (pt "V") (pt "kapp3") (pt "xxseq") (pt "FF") (pt "xx0"))
(auto)
;; Invoking LyapunovStable
(inst-with-to "StableEqLeReaNormElim3" "StableInst")
(assert "exr rdelta,p( Real rdelta &(RealLt 0 rdelta p)&((norm(xx0)<<=rdelta -> all n norm((xxseq n))<<=norm(xx0))))")
(use "StableInst" (pt "FF"))
(use "UniformLyapunovStableLeAllNorm" (pt "V") (pt "kapp1") (pt "kapp2") (pt "kappinv"))
(auto)
(use "PDVDiffStrongNormElim4" (pt "kapp3") (pt "norm"))
(auto)
(use "VectorNormElim0")
(use "PDVDiffStrongNormElim1" (pt "V") (pt "kapp3") (pt "xxseq") (pt "FF") (pt "xx0"))
(auto)
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "ProperInit")
(assume "StableInst2")
;; delta
(by-assume "StableInst2" "rdelta" "StableInstProp")
(ex-intro "rdelta")
(by-assume "StableInstProp" "q" "StableInstProp2")
(ex-intro "q")
(assume "RdeltaPos")
(assume "RdeltaProp")
;; Unfolding definition of limit
(use "SolutionConvergentToZeroInInfIntNormIntro")
(use "PDVDiffStrongNormElim1" (pt "V") (pt "kapp3") (pt "xxseq") (pt "FF") (pt "xx0"))
(auto)
;; Cauchyness
(assume "k")
(inst-with-to "StableEqLeReaNormWitElim2" (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm") (pt "([repsilon]kappinv(kapp1 repsilon))") "StableInstWit")
(assert "all repsilon(Real repsilon -> exl p RealLt 0 repsilon p -> Real(([repsilon0]kappinv(kapp1 repsilon0))repsilon) & (norm xx0<<=([repsilon0]kappinv(kapp1 repsilon0))repsilon -> all n norm(xxseq n)<<=repsilon))")
(use "StableInstWit")
(use "LyapunovStableAllNormWit" (pt "V") (pt "kapp2"))
(auto)
(use "PDVDiffStrongNormElim4" (pt "kapp3") (pt "norm"))
(auto)
(assume "StableInstWitAll")
(assert "ex y ([repsilon0]kappinv(kapp1 repsilon0))((1#2)**k)===y")
(use "RealSubVar")
(use "StableInstWitAll")
(autoreal)
(use "EpsPosBoundEpsInt")
(assume "EpsSub")
(by-assume "EpsSub" "rdelta1" "EpsSubProp")
(inst-with-to "StableInstWitAll" (pt "ReaRat((1#2)**k)") "StableInstWitFinalProp")
(drop "StableInstWitAll")
(drop "StableInstWit")
(drop "StableInst")
(cut "exr p RealPos (kapp3 rdelta1) p")
(assume "DivisionWellDefined")
(by-assume "DivisionWellDefined" "p0" "DivisionWellDefinedProp")
(inst-with-to "RealNatBound" (pt "(RealDivision (kapp2 rdelta) (kapp3 rdelta1) p0)+1") "RealNatBoundInst")
;; Division step
(assert " ex n (RealDivision (kapp2 rdelta) (kapp3 rdelta1) p0)+1<<=n")
(use "RealNatBoundInst")
(simp "RealDivision0CompRule")
(use "RealPlusReal")
(use "RealTimesReal")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp2")
(use "StableInstProp2")
(use "RealUDivReal")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(use "RealEqElim1" (pt "([repsilon]kappinv(kapp1 repsilon))((1#2)**k)"))
(use "EpsSubProp")
(use "RealPosAbs")
(use "DivisionWellDefinedProp")
(use "RealRat")
(assume "DivInst")
(by-assume "DivInst" "n0" "DivInstProp") ;; reaching time N(eps)
(inst-with-to "StableEqLeReaNormElim1" (pt "ReaRat((1#2)**k)") (pt "SequenceSimShift xxseq n0") (pt "FF") (pt "xxseq n0") (pt "norm") "StableInst4")
(ng "StableInst4")
(assert "exr rdelta(Real rdelta & (norm(xxseq n0)<<=rdelta -> all n norm(xxseq (n+n0))<<=ReaRat((1#2)**k)))")
(use "StableInst4")
(use "UniformLyapunovStableLeAllNorm" (pt "V") (pt "kapp1") (pt "kapp2") (pt "kappinv"))
(use "ProperRHSCompat" (pt "xx0"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "PRHS")
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "PRHS")
(use "ProperLyap")
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(auto)
(simp (pf "(xxseq n0)dim=xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(auto)
; (use "LyapunovConfigIntro")
; (simp (pf "(xxseq n0)dim=xx0 dim"))
; (use "LyapunovConfigElim0" (pt "V"))
; (use "ProperLyap")
; (use "SolutionSimElim4" (pt "FF"))
; (use "PDVDiffStrongNormElim1" (pt "V") (pt "kapp3") (pt "norm"))
; (use "PDVDiff V")
; (use "PRHS")
; (simp (pf "(xxseq n0)dim=xx0 dim"))
; (use "LyapunovConfigElim1")
; (use "ProperLyap")
; (use "SolutionSimElim4" (pt "FF"))
; (use "PDVDiffStrongNormElim1" (pt "V") (pt "kapp3") (pt "norm"))
; (use "PDVDiff V")
; (use "PRHS")
(use "LyapunovSequenceSimShift" (pt "xx0"))
(use "PRHS")
(use "ProperLyap")
(use "PDVDiffStrongNormElim4" (pt "kapp3") (pt "norm"))
(use "ProperLyap")
(use "PRHS")
(use "PDVDiff V")
(use "RealRat")
(use "EpsPosBoundEpsInt")
(assume "ExInstDelta2")
(by-assume "ExInstDelta2" "rdelta2" "DeltaProp")
(ex-intro "n0") ;; introducing reaching time N(eps)
(assume "n" "n0<=n")
(cut "exca m (m<=n0 & norm(xxseq m) <<= ([repsilon]kappinv(kapp1 repsilon))((1#2)**k) )") ;; Introduce Cut
(assume "exInst1")
(by-assume "exInst1" "m1" "ExInstProp")
(inst-with-to "StableEqLeReaNormWitElim2" (pt "SequenceSimShift xxseq m1") (pt "FF") (pt "xxseq m1") (pt "norm") "StableInst5") 
(assert "exl m n=m+m1")
(use "NatLeExShift")
(use "NatLeTrans" (pt "n0"))
(use "ExInstProp")
(use "n0<=n")
(assume "ExInst2")
(by-assume "ExInst2" "m0" "ExInst2Prop")
(simp "ExInst2Prop")
(use "StableInst5" (pt "([repsilon] (kappinv (kapp1 repsilon)))"))
(use "LyapunovStableAllNormWit" (pt "V") (pt "kapp2"))
(use "ProperRHSCompat" (pt "xx0"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "PRHS")
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "PRHS")
(use "ProperLyap")
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(simp (pf "(xxseq m1)dim=(xx0)dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(auto)
(use "LyapunovSequenceSimShift" (pt "xx0"))
(use "PRHS")
(use "ProperLyap")
(use "PDVDiffStrongNormElim4" (pt "kapp3") (pt "norm"))
(use "ProperLyap")
(use "PRHS")
(use "PDVDiff V")
(use "RealRat")
(use "EpsPosBoundEpsInt")
(use "ExInstProp") ;; Cut Applied
;; Now we prove the cut
(assume "Hyp0")
(assert "all m (m<=n0 -> exca p RealLt (([repsilon]kappinv(kapp1 repsilon))((1#2)**k)) (norm(xxseq m)) p)") ;; Rewrite Hyp0
(assume "m" "m<=n0")
(use "ClassicalComparison")
(use "VectorNormElim0")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(use "PDVNorm V")
(use "RealSolutionAssertion")
(use "StableInstWitFinalProp")
(use "RealRat")
(use "EpsPosBoundEpsInt")
(assume "Contr")
(use "Hyp0" (pt "m"))
(split)
(use "m<=n0")
(use "Contr")
(assume "H1")
(cut "exl p RealLt (V (xxseq n0)) 0 p -> F") ;; Forcing contradiction by LyapunovNonNNeg0 
(assume "cutInst")
(use "cutInst")
(intro 0 (pt "(PosS(PosS(PosS(PosS(PosS(PosS(PosS(PosS(PosS(PosS(PosS(PosS p0))))))))))))"))
(cut "Real(V(xxseq n0))")
(assume "RV")
(inst-with-to "RealSubVar" (pt "([repsilon]kappinv(kapp1 repsilon))((1#2)**k)") "sub1")
(assert "ex y ([repsilon]kappinv(kapp1 repsilon))((1#2)**k)===y")
(use "sub1")
(use "StableInstWitFinalProp")
(ng #t)
(use "RealRat")
(use "EpsPosBoundEpsInt")
(assume "sub1Inst")
(by-assume "sub1Inst" "rdelta3" "sub1Prop")
(cut "Real(n0*kapp3 rdelta3)")
(assume "cutRkapp3")
(cut "Real(kapp2 rdelta)")
(assume "cutRkapp2")
;;(assume "cutR")
(use "RealLeLtTrans" (pt "(kapp2 rdelta) + ~(n0*(kapp3 rdelta3))"))
(use "RV")
(realproof)
(use "RealRat")
(use "RealLeTrans" (pt "kapp2 (norm xx0) + ~(n0*(kapp3 rdelta3))"))
(use "RealLeTrans" (pt "(V (xxseq Zero)) + ~(n0*(kapp3 rdelta3))"))
(cut "Real(V(xxseq Zero))")
(assume "RVxx0")
(simpreal "RealPlusComm")
(use "RealLePlusCancelR" (pt "~(V(xxseq Zero))"))
(use "RV")
(use "RealUMinusReal")
(use "RVxx0")
(autoreal)
(use "RealLeTrans" (pt " ~(n0*kapp3 rdelta3)"))
(use "PRBTFOO1" (pt "FF") (pt "xx0") (pt "norm"))
(use "PRHS")
(use "ProperLyap")
(autoreal)
(use "PDVDiff V")
(assume "n3" "n3<=n0")
(use "ClassKappaConfigurationElim3")
(use "classkapp3")
(simpreal "<-" "sub1Prop")
(use "RealLeTrans" (pt "(kappinv(kapp1 ((1#2)**k)))"))
(use "ClassKappaInverseElim4" (pt "kapp2"))
(use "classkappInv")
(use "ClassKappaConfigurationElim4")
(use "classkapp1")
(use "RatLeToRealLe")
(ng #t)
(use "Truth")
(use "RealLeReflNC")
(use "RealEqSToEq")
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(use "classkappInv")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp1")
(autoreal)
(use "RealEqSIntro")
(ng #t)
(assume "n2")
(use "Truth")
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(use "PDVNorm V")
(use "RealSolutionAssertion")
(assert "all n Real(norm(xxseq n))")
(assume "n1")
(use "VectorNormElim0")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(use "PDVNorm V")
(use "RealSolutionAssertion")
(assume "RealNormAssertion")
(cut "Real(norm(xxseq n3))")
(assume "cutNorm")
(simpreal "<-" "sub1Prop")
(use "RealLtToLeClass")
(autoreal)
(use "H1")
(use "n3<=n0")
(use "RealNormAssertion")
(simpreal "<-" "RealPlusAssoc")
(simpreal (pf "V(xxseq Zero)+ ~(V(xxseq Zero))===0"))
(use "RealLeReflNC")
(simpreal "RealPlusZero")
(use "RealEqRefl")
(autoreal)
(use "RealPlusMinusZero")
(auto)
(realproof)
(auto)
(realproof)
(realproof)
(auto)
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq Zero)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(auto)
(use "RealLeMonPlus")
(use "RealLeTrans" (pt "V xx0"))
(use "RealLeReflNC")
(use "CmapContmvElim1" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq Zero)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(auto)
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(auto)
(use "PDVNormElim1" (pt "xx0 dim") (pt "kapp1"))
(use "PDVNorm V")
(use "RealVectorEqElim1" (pt "xxseq Zero"))
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "ProperLyap")
(use "RealLeRefl")
(realproof)
(cut "RealVector xx0")
(assume "Rxx")
(use "RealLeMonPlus")
(use "ClassKappaConfigurationElim3")
(use "classkapp2")
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(use "PDVNorm V")
(use "Rxx")
(use "RealLeTrans" (pt "norm xx0"))
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(use "PDVNorm V")
(use "Rxx")
(use "RdeltaProp")
(use "RdeltaProp")
(use "RealLeRefl")
(realproof)
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(use "PDVDiffStrongNormElim4" (pt "kapp3") (pt "norm"))
(use "ProperLyap")
(use "PRHS")
(use "PDVDiff V")
(cut "Real(kapp3 rdelta1)")
(assume "cutkapp3rdelta1")
(cut "Real(RealUDiv (kapp3 rdelta1) p0)")
(assume "cutRealUDivkapp3")
(cut "Real(kapp3 rdelta3)")
(assume "cutkapp3rdelta3")
(use "RealLeLtTrans" (pt "kapp2 rdelta+ ~((kapp2 rdelta)*(RealUDiv (kapp3 rdelta1) p0) +1 )*kapp3 rdelta3")) ; #!
(autoreal)
(use "RealLeMonPlus")
(use "RealLeRefl")
(autoreal)
(use "RealLeTrans" (pt "(~(n0))*(kapp3 rdelta3)"))
(simpreal "<-" "RealTimesUMinusId")
(use "RealLeReflNC")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(use "RealEqRefl")
(autoreal)
(use "RealLeMonTimesL")
(use "RealNNegLeToNNeg" (pt "ReaRat 0"))
(use "RealNNegIntro")
(ng #t)
(autoreal)
(ng #t)
(assume "p")
(use "Truth")
(use "ClassKappaConfigurationElim4")
(use "classkapp3")
(simpreal "<-" "sub1Prop")
(use "RealLeTrans" (pt "(kappinv(kapp1 ((1#2)**k)))"))
(use "ClassKappaInverseElim4" (pt "kapp2"))
(use "classkappInv")
(use "ClassKappaConfigurationElim4")
(use "classkapp1")
(use "RatLeToRealLe")
(ng #t)
(use "Truth")
(use "RealLeReflNC")
(use "RealEqSToEq")
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(use "classkappInv")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp1")
(autoreal)
(use "RealEqSIntro")
(ng #t)
(assume "n2")
(use "Truth")
(use "RealLeUMinusInv")
(simpreal "RealUMinusUMinus")
(use "RealLeTrans" (pt "ReaRat(n0)"))
(use "DivInstProp")
(ng #t)
(use "RealLeRefl")
(autoreal)
(use "RealLtCompatRealConstrFree" (pt "~(kapp3 rdelta3)") (pt "ReaRat 0"))
(use "RealEqTrans" (pt "~(kapp3 rdelta1)"))
(use "RealUMinusCompat")
(use "CfmapContElim1Compat")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(simpreal "<-" "sub1Prop")
(simpreal "<-" "EpsSubProp")
(use "RealEqRefl")
(autoreal)
(use "RealEqTrans" (pt "kapp2 rdelta+ ~(kapp2 rdelta*RealUDiv(kapp3 rdelta1)p0+1)*kapp3 rdelta1"))
(assert "all x,y,p ( Real x -> Real y -> RealPos x p -> ~x===y + ~(y*RealUDiv x p +1)*x)")
(assume "x" "y" "p")   
(assume "Rx" "Ry" "Rxp")
(cut "Real(RealUDiv x p)")
(assume "cutAuxUDiv")
(use "RealEqPlusCancelR" (pt "(y*RealUDiv x p+1)*x"))
(autoreal)
(simpreal "<-" "RealPlusAssoc")
(simpreal (pf "~(y*RealUDiv x p+1)*x+(y*RealUDiv x p+1)*x===0"))
(simpreal "RealTimesPlusDistrLeft")
(simpreal "RealPlusAssoc")
(simpreal (pf "y*RealUDiv x p*x===y*1"))
(simpreal "RealPlusComm")
(simpreal "RealPlusAssoc")
(simpreal (pf "1*x+ ~x===0"))
(simpreal "RealPlusZero")
(simpreal "RealPlusComm")
(simpreal "RealPlusZero")
(use "RealTimesOne")
(autoreal)
(simpreal "RealTimesComm")
(simpreal "RealTimesOne")
(use "RealPlusMinusZero")
(autoreal)
(simpreal "<-" "RealTimesAssoc")
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(simpreal "RealTimesComm")
(use "RealTimesUDiv")
(autoreal)
(use "Rxp")
(autoreal)
(simpreal "RealPlusComm")
(simpreal "RealTimesUMinusId")
(use "RealPlusMinusZero")
(use "RealTimesReal")
(use "RealPlusReal")
(use "RealTimesReal")
(realproof)
(auto)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(realproof)
(use "RealUDivReal")
(autoreal)
(use "RealPosAbs")
(use "Rxp")
(assume "Assertion")
(use "Assertion")
(autoreal)
(use "DivisionWellDefinedProp")
(use "RealPlusCompat")
(use "RealEqRefl")
(autoreal)
(use "RealTimesCompat")
(use "RealEqRefl")
(autoreal)
(use "CfmapContElim1Compat")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(simpreal "<-" "sub1Prop")
(simpreal "<-" "EpsSubProp")
(use "RealEqRefl")
(autoreal)
(ng #t)
(use "RealEqRefl")
(autoreal)
(use "RealLtToGtNegReaRat")
(use "RealPosLtCompat")
(autoreal)
(use "RealPosCompatRealConstrFree" (pt "kapp3 rdelta1"))
(use "CfmapContElim1Compat")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(simpreal "<-" "sub1Prop")
(simpreal "<-" "EpsSubProp")
(use "RealEqRefl")
(autoreal)
(use "DivisionWellDefinedProp")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(realproof)
(use "RealUDivReal")
(realproof)
(use "RealPosAbs")
(use "DivisionWellDefinedProp")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(realproof)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp2")
(realproof)
(use "RealTimesReal")
(realproof)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(realproof)
(use "RealLeElim1" (pt "V(xxseq (Succ n0))"))
(use "PDVDiffElim0" (pt "FF") (pt "xx0"))
(use "PDVDiffStrongNormElim4" (pt "kapp3") (pt "norm"))
(use "ProperLyap")
(use "PRHS")
(use "PDVDiff V")
(use "LyapunovNonNNeg0" (pt "kapp1") (pt "kapp2") (pt "norm"))
(use "classkapp1")
(use "classkapp2")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(use "PDVDiffStrongNormElim4" (pt "kapp3") (pt "norm"))
(use "ProperLyap")
(use "PRHS")
(use "PDVDiff V")
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0") )
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "PRHS")
(use "ProperLyap")
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "PRHS")
(simp (pf "(xxseq n0)dim=xx0 dim"))
(use "PDVNorm V")
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffStrongNormElim0" (pt "V") (pt "kapp3") (pt "norm"))
(use "PDVDiff V")
(use "PRHS")
(use "RealLtRealPosExR")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp3")
(autoreal)
(inst-with-to "ClassKappaConfigurationElim5" (pt "kapp3") "ElimInst") ;; 0<kapp(x)
(assert "all x(Real x -> exr p RealLt 0 x p -> exr p RealLt 0(kapp3 x)p)")
(use "ElimInst")
(use "classkapp3")
(assume "ElimInst2")
(inst-with-to "ElimInst2"  (pt "rdelta1") "ElimInst3")
(use "ElimInst3")
(autoreal)
(cut "exr p RealLt(ReaRat 0)(kappinv(kapp1 ((1#2)**k))) p")
(assume "ExElim1")
(by-assume "ExElim1" "p0" "ExElim1Prop")
(intro 0 (pt "PosS(PosS p0)"))
(use "RealLtCompatRealConstrFree" (pt "ReaRat 0") (pt "kappinv(kapp1((1#2)**k))") )
(ng #t)
(use "RealEqRefl")
(autoreal)
(cut "Real(kappinv(kapp1((1#2)**k)))")
(assume "cutInst")
(simpreal "<-" "EpsSubProp")
(use "RealEqSToEq")
(use "cutInst")
(autoreal)
(use "RealEqSIntro")
(ng #t)
(assume "n")
(use "Truth")
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(use "classkappInv")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp1")
(autoreal)
(use "ExElim1Prop")
(use "ClassKappaInverseElim5Aux" (pt "kapp2"))
(use "classkappInv")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(autoreal)
(inst-with-to "ClassKappaConfigurationElim5" (pt "kapp1") "Elim2Inst1")
(assert "all x(Real x -> exr p RealLt 0 x p -> exr p RealLt 0(kapp1 x)p)")
(use "Elim2Inst1")
(use "classkapp1")
(assume "Elim2Inst2")
(inst-with-to "Elim2Inst2" (pt "ReaRat((1#2)**k)") "Elim2Inst3")
(assert "exr p RealLt 0(kapp1(ReaRat((1#2)**k)))p")
(inst-with-to "EpsPosBoundEpsIntTwo" (pt "k") "EpsInst")
(by-assume "EpsInst" "p1" "EpsInstProp")
(use "Elim2Inst3")
(simp "ReaRat0CompRule")
(autoreal)
(intro 0 (pt "p1"))
(simp "ReaRat0CompRule")
(use "EpsInstProp")
(assume "ExAssertionMain")
(by-assume "ExAssertionMain" "p1" "ExAssertionMainProp")
(intro 0 (pt "PosS(PosS(p1))"))
(use "RealLtCompatRealConstrFree" (pt "ReaRat 0") (pt "kapp1(ReaRat((1#2)**k))") )
(use "RealEqRefl")
(autoreal)
(use "CfmapContElim1Compat")
(use "ClassKappaConfigurationElim0")
(use "classkapp1")
(ng #t)
(use "RealEqRefl")
(autoreal)
(use "ExAssertionMainProp")
(save "LyapunovAsymptoticallyStable")




(add-ids
    (list (list "ClassKappaRho" (make-arity (py "rea=>rea"))))
    '("all kapp(ClassKappaConfiguration kapp ->  ClassKappaConfiguration ([x] x - kapp x) -> ClassKappaRho kapp)"
      "ClassKappaRhoIntro"))

(set-goal "all kapp(ClassKappaRho kapp -> ClassKappaConfiguration kapp)")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaRhoElim0")

(set-goal "all kapp(ClassKappaRho kapp -> ClassKappaConfiguration ([x] x - kapp x))")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaRhoElim1")


; (set-goal "all kapp(ClassKappaRho kapp -> all x (Real x -> exr p RealLt 0 x p -> exr p RealLt (kapp x) (x) p))")
; (assume "kapp")
; (elim)
; (assume "kapp1")
; (assume "classq")
; (assume "le")
; (assume "cond")
; (assume "x" "Rx")
; (assume "0ltx")
; (cut "exl p RealLt(kapp1 x)x p")
; (assume "cutI")
; (by-assume "cutI" "p0" "cutIProp")
; (intro 0 (pt "p0"))
; (use "cutIProp")
; (use "cond")
; (use "Rx")
; (by-assume "0ltx" "p" "0ltxprop")
; (intro 0 (pt "p"))
; (use "0ltxprop")
; (save "ClassKappaRhoElim2")

(add-var-name "rho" (py "rea=>rea"))

(add-ids
    (list (list "PDVDiffRho" (make-arity (py "realVec=>rea") (py "rea=>rea") (py "realVecseq") (py "FF") (py "realVec") (py "norm"))))
    '("all V,rho,xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 -> VectorNorm norm -> ClassKappaRho rho -> all n ( (V (xxseq (Succ n)))) <<= rho((V (xxseq n))) ->  PDVDiffRho V rho xxseq FF xx0 norm)"
      "PDVDiffRhoIntro"))
  
(set-goal "all V,rho,xxseq,FF,xx0,norm(PDVDiffRho V rho xxseq FF xx0 norm -> SolutionSim xxseq FF xx0 & VectorNorm norm & ClassKappaRho rho & all n ( (V (xxseq (Succ n)))) <<= rho((V (xxseq n))))")
(assume "V" "rho" "xxseq" "FF" "xx0" "norm")
(elim)
(auto)
(save "PDVDiffRhoElimAll")

(set-goal "all kapp1,kapp2(ClassKappaConfiguration kapp1 -> ClassKappaConfiguration kapp2 -> ClassKappaConfiguration ([x] kapp1(kapp2 x)))")
(assume "kapp1" "kapp2")
(assume "kappa1" "kappa2")
(use "ClassKappaConfigurationIntro")
(use "CfmapContIntro")
(assume "x" "Rx")
(ng #t)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(assume "x" "y" "x==y")
(ng #t)
(use "CfmapContElim1Compat")
(use "ClassKappaConfigurationElim0")
(auto)
(use "CfmapContElim1Compat")
(use "ClassKappaConfigurationElim0")
(auto)
(assume "x" "0<<=x")
(ng #t)
(use "ClassKappaConfigurationElim4")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(assume "x" "x===0")
(ng #t)
(use "ClassKappaConfigurationElim1")
(auto)
(use "ClassKappaConfigurationElim1")
(auto)
(assume "x" "y" "0lex" "0ley" "xley")
(ng #t)
(use "ClassKappaConfigurationElim3")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(use "ClassKappaConfigurationElim3")
(auto)
(ng #t)
(assume "x" "y")
(assume "xley" "xlex")
(assume "cond")
(use "ClassKappaConfigurationElim2" (pt "kapp2"))
(auto)
(use "ClassKappaConfigurationElim2" (pt "kapp1"))
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(assume "x" "Rx" "exl1")
(cut "exr p RealLt 0 (kapp2 x) p")
(assume "cutAux")
(by-assume "cutAux" "p0" "cutAuxProp")
(inst-with-to "ClassKappaConfigurationElim5" (pt "kapp1") "Inst")
(cut "all x(Real x -> exr p RealLt 0 x p -> exr p RealLt 0(kapp1 x)p)")
(assume "cutInst")
(inst-with-to "cutInst" (pt "kapp2 x") "cutInstProp")
(assert "exr p RealLt 0(kapp1(kapp2 x))p")
(use "cutInstProp")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(assume "Assertion")
(by-assume "Assertion" "p1" "AssertionProp")
(intro 0 (pt "p1"))
(use "AssertionProp")
(use "Inst")
(auto)
(use "ClassKappaConfigurationElim5")
(auto)
(by-assume "exl1" "p" "exl1Prop")
(intro 0 (pt "p"))
(auto)
(save "ClassKappaCompose")



(set-goal "all V,kapp1,kapp2,rho,kappinv,xxseq,FF,xx0,norm ( ProperRHS FF (xx0 dim) -> LyapunovConfig V (xx0 dim ) xx0 -> exl p RealLt 0(norm xx0)p -> ClassKappaConfiguration kapp1 -> ClassKappaConfiguration kapp2 -> ClassKappaInverse kapp2 kappinv -> ClassKappaRho rho -> PDVNorm V (xx0 dim) kapp1 kapp2 norm -> PDVDiffRho V rho xxseq FF xx0 norm-> AttractiveEq xxseq FF xx0 norm)")
(assume "V" "kapp1" "kapp2" "rho" "kappinv" "xxseq" "FF" "xx0" "norm")
(assume "PRHS")
(assume "ProperLyap")
(assume "ProperInit")
(assume "classkapp1")
(assume "classkapp2")
(assume "classkappInv")
(assume "classkapp3")
(assume "PDVNorm V")
(assume "PDVDiff V")
(use "LyapunovAsymptoticallyStable" (pt "V") (pt "kapp1") (pt "kapp2") (pt "([x] ([x0] x0 - rho x0)(kapp1 x))") (pt "kappinv")) 
(auto)
(use "ClassKappaCompose")
(use "ClassKappaRhoElim1")
(auto)
(use "PDVDiffStrongNormIntro")
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "xxseq") (pt "FF") (pt "xx0"))
(auto)
(use "ClassKappaCompose")
(use "ClassKappaRhoElim1")
(auto)
(assume "n")
(cut "all n RealVector(xxseq n)")
(assume "Rxx")
(cut "all n Real(V(xxseq n))")
(assume "Rv")
(use "RealLeTrans" (pt "~( (([x0]x0-rho x0)(V(xxseq n))))"))
(ng #t)
(inst-with-to "Rv" (pt "n") "cutAux1")
(inst-with-to "Rv" (pt "Succ n") "cutAux2")
(simpreal "<-" "RealUMinusPlus1")
(use "RealLeTrans" (pt " ~(V(xxseq n)) +V(xxseq(Succ n))"))
(simpreal "RealPlusComm")
(use "RealLeRefl")
(realproof)
(realproof)
(realproof)
(use "RealLeMonPlus")
(use "RealLeUMinus")
(use "RealLeRefl")
(auto)
(use "PDVDiffRhoElimAll" (pt "FF") (pt "xx0") (pt "norm"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "ClassKappaRhoElim0")
(auto)
(use "RealLeTrans" (pt "~(([x]x-rho x)( kapp1 (norm(xxseq n)) ))"))
(use "RealLeUMinus")
(use "ClassKappaConfigurationElim3")
(use "ClassKappaRhoElim1")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(use "PDVNorm V")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(use "NotGtIsLt")
(realproof)
(auto)
(use "LyapunovNonNNeg0" (pt "kapp1") (pt "kapp2") (pt "norm"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(use "PDVNormElim0" (pt "xx0 dim") (pt "kapp2"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(use "RealLeRefl")
(use "RealUMinusReal")
(use "RealPlusReal")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "VectorNormElim0")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "RealUMinusReal")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "ClassKappaRhoElim0")
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "VectorNormElim0")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(assume "n0")
(use "RealLeElim1" (pt "kapp1(norm(xxseq n0))"))
(use "PDVNormElim0" (pt "xx0 dim") (pt "kapp2"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(assume "n0")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffRhoElimAll" (pt "V") (pt "rho") (pt "norm"))
(auto)
(save "LyapunovRhoAS")

;;  global finite-time Lyapunov functions (not implemented yet)
;; https://doi.org/10.1016/j.sysconle.2014.05.007

(add-ids
    (list (list "PDVDiffM" (make-arity (py "realVec=>rea") (py "nat") (py "xxseq") (py "FF") (py "realVec"))))
    '("all V,m,xxseq,FF,xx0( CmapContmv  V (xx0 dim) ->  SolutionSim xxseq FF xx0 -> all n ( (V (xxseq (n+m))) <<=(V (xxseq n))) ->  PDVDiffM V m xxseq FF xx0)"
      "PDVDiffMIntro"))

(set-goal "all V,m,xxseq,FF,xx0( PDVDiffM V m xxseq FF xx0 -> CmapContmv  V (xx0 dim) & SolutionSim xxseq FF xx0 & all n ( (V (xxseq (n+m))) <<=(V (xxseq n))) )")
(assume "V" "m" "xxseq" "FF" "xx0")
(elim)
(auto)
(save "PDVDiffMElimAll")

(set-goal "all V,m,xxseq,FF,xx0,m0( LyapunovConfig V (xx0 dim) xx0  -> ProperRHS FF(xx0 dim) -> PDVDiffM V m xxseq FF xx0 -> PDVDiffM V (m*m0) xxseq FF xx0)")
(assume "V" "m" "xxseq" "FF" "xx0")
(ind)
(assume "LyapConfig")
(assume "PRHS")
(assume "PDVDiff V")
(use "PDVDiffMIntro")
(use "PDVDiffMElimAll" (pt "m") (pt "xxseq") (pt "FF"))
(auto)
(use "PDVDiffMElimAll" (pt "V") (pt "m"))
(auto)
(ng #t)
(assume "n")
(use "RealLeRefl")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "PDVDiffMElimAll" (pt "m") (pt "xxseq") (pt "FF"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffMElimAll" (pt "V") (pt "m"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffMElimAll" (pt "V") (pt "m"))
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffMElimAll" (pt "V") (pt "m"))
(auto)
(assume "m0")
(assume "Ih")
(assume "LyapConfig" "PRHS" "PDVDiff V")
(ng #t)
(use "PDVDiffMIntro")
(use "PDVDiffMElimAll" (pt "m") (pt "xxseq") (pt "FF"))
(auto)
(use "PDVDiffMElimAll" (pt "V") (pt "m"))
(auto)
(assume "n")
(simp (pf "n+(m*m0+m)=n+m+m*m0"))
(use "RealLeTrans" (pt "V(xxseq(n+m))"))
(use "PDVDiffMElimAll" (pt "FF") (pt "xx0"))
(use "Ih")
(auto)
(use "PDVDiffMElimAll" (pt "FF") (pt "xx0")) 
(auto)
(ng #t)
(simp "NatPlusComm")
(ng #t)
(simp (pf "m+n=n+m"))
(ng #t)
(auto)
(simp "NatPlusComm")
(auto)
(save "PDVDiffMElim1")


; (set-goal "all n,m (Succ Zero <= m -> exl m0,m1 n=m0*m+m1)")
; (cases)
; (assume "m")
; (assume "cond")
; (intro 0 (pt "Zero"))
; (intro 0 (pt "Zero"))
; (ng #t)
; (auto)
; (assume "n" "m" "cond")
; (inst-with-to "PosQRCorr" (pt "(NatToPos (Succ n))") (pt "(NatToPos m)") "PosQRInst")
; (intro 0 (pt "IntToNat(lft(PosQR(NatToPos(Succ n))(NatToPos m)))"))
; (intro 0 (pt "IntToNat(rht(PosQR (NatToPos (Succ n)) (NatToPos m)))"))
; (ng #t)
; (admit)
; (save "NatQRCorr")




; (set-goal "all V,m,kapp1,kapp2,kappinv,xxseq,FF,xx0,norm( ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0 -> ClassKappaConfiguration kapp1 -> ClassKappaConfiguration kapp2 -> ClassKappaInverse kapp2 kappinv ->  PDVNorm V (xx0 dim) kapp1 kapp2 norm -> PDVDiffM V m xxseq FF xx0 -> StableEqLeReaNorm xxseq FF xx0 norm)")
; (assume "V" "m" "kapp1" "kapp2" "kappinv" "xxseq" "FF" "xx0" "norm")
; (assume "PRHS")
; (assume "LyapunovConfig V")
; (assume "classkapp1")
; (assume "classkapp2")
; (assume "classkappInv")
; (assume "PDVNorm V")
; (assume "PDVDiff V")
; (use "StableEqLeReaNormIntro")
; (use "PDVDiffMElimAll" (pt "V") (pt "m"))
; (auto)
; (use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
; (auto)
; (assume "repsilon" "Reps" "0<eps")
; (intro 0 (pt "(kappinv (kapp1 repsilon))"))
; (split)
; (use "CfmapContElim0Real")
; (use "ClassKappaInverseElim1" (pt "kapp2"))
; (auto)
; (use "CfmapContElim0Real")
; (use "ClassKappaConfigurationElim0")
; (use "classkapp1")
; (use "Reps")
; (assume "nx_0<=delta")
; (assume "n")
; (cut "all n RealVector( (xxseq n) )")
; (assume "AuxRealCutInst")
; (use "ClassKappaConfigurationElim2" (pt "kapp1"))
; (auto)
; (use "NormNNeg")
; (auto)
; (by-assume  "0<eps" "p0" "epswit")
; (use "RealLtToLe" (pt "p0"))
; (use "RealRat")
; (auto)
; (use "RealLeTrans" (pt "V (xxseq n)"))
; (use "PDVNormElim0" (pt "xx0 dim") (pt "kapp2"))
; (auto)
; (admit)
; (inst-with-to "NatQRCorr" (pt "n") (pt "m") "NatQRCorrInst")
; (assert "exl m0,m1 n=m0*m+m1")
; (use "NatQRCorrInst")
; (admit)
; (assume "ExCorr")
; (by-assume "ExCorr" "n0" "Propn")
; (by-assume "Propn" "m0" "Propnm")
; (simp "Propnm")
; (simp (pf "n0*m+m0=m0+n0*m"))
; (use "RealLeTrans" (pt "V(xxseq(m0))"))
; (use "PDVDiffMElimAll" (pt "FF") (pt "xx0"))
; (simp (pf "n0*m=m*n0"))
; (use "PDVDiffMElim1")
; (auto)
; (simp "NatTimesComm")
; (auto)
; (use "RealLeTrans" (pt "kapp2(norm(xxseq m0))"))
; (use "PDVNormElim1" (pt "xx0 dim") (pt "kapp1"))
; (auto)
; (admit)




; (use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))

; (use "PDVDiffElim2" (pt "V"))
; (auto)

; (use "RealLeTrans" (pt "V(xxseq Zero)"))
; (use "PDVDiffElim1" (pt "FF") (pt "xx0"))
; (auto)
; (use "RealLeTrans" (pt "kapp2(kappinv( kapp1 (repsilon)))"))
; (use "RealLeTrans" (pt "kapp2( norm (xxseq Zero))"))
; (use "PDVNormElim1" (pt "xx0 dim") (pt "kapp1"))
; (use "PDVNorm V")
; (auto)
; (use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
; (use "PDVDiffElim2" (pt "V"))
; (auto)
; (use "ClassKappaConfigurationElim3")
; (use "classkapp2")
; (use "NormNNeg")
; (auto)
; (use "RealLeTrans" (pt "norm (xx0)"))
; (use "NormNNeg")
; (use "RealVectorEqElim1" (pt "(xxseq Zero)"))
; (use "SolutionSimElim1" (pt "FF"))
; (use "PDVDiffElim2" (pt "V"))
; (auto)
; (use "RealLeTrans" (pt "norm (xx0)"))
; (use "RealLeReflNC")
; (use "VectorNormCompat")
; (use "SolutionSimElim1" (pt "FF"))
; (use "PDVDiffElim2" (pt "V"))
; (use "PDVDiff V")
; (use "nx_0<=delta")
; (use "RealLeReflNC")
; (use "ClassKappaInverseElim3")
; (auto)
; (use "ClassKappaConfigurationElim4")
; (auto)
; (by-assume  "0<eps" "p0" "epswit")
; (use "RealLtToLe" (pt "p0"))
; (use "RealRat")
; (auto)
; (assume "n0")
; (use "RealVectorEqElim0" (pt " (Simulation n0 xx0 FF)"))
; (use "SolutionSimElim0")
; (use "PDVDiffElim2" (pt "V"))
; (auto)
; (save "LyapunovStableAllNorm")



; (add-ids
;     (list (list "PDVDiffRhoM" (make-arity (py "realVec=>rea") (py "nat") (py "rea=>rea") (py "realVecseq") (py "FF") (py "realVec") (py "norm"))))
;     '("all V,m,rho,xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 -> VectorNorm norm -> ClassKappaRho rho -> all n ( (V (xxseq (n+m)))) <<= rho((V (xxseq n))) ->  PDVDiffRhoM V m rho xxseq FF xx0 norm)"
;       "PDVDiffRhoMIntro"))

; (set-goal "all V,m,rho,xxseq,FF,xx0,norm( PDVDiffRhoM V m rho xxseq FF xx0 norm -> SolutionSim xxseq FF xx0 & VectorNorm norm & ClassKappaRho rho & all n ( (V (xxseq (n+m)))) <<= rho((V (xxseq n))))")
; (assume "V" "m" "rho" "xxseq" "FF" "xx0" "norm")
; (elim)
; (auto)
; (save "PDVDiffRhoMElimAll")

; (add-ids
;     (list (list "KBoundedRHS" (make-arity (py "FF") (py "nat") (py "kapp") (py "norm"))))
;     '("all FF,m,kapp,norm(ProperRHS FF m -> ClassKappaConfiguration kapp -> all xx (RealVector xx -> norm(FF xx) <<= kapp(norm xx)) -> KBoundedRHS FF m kapp norm)"
;       "KBoundedRHSIntro"))

; (set-goal "all FF,m,kapp,norm(KBoundedRHS FF m kapp norm -> ProperRHS FF m & ClassKappaConfiguration kapp & all xx (RealVector xx -> norm(FF xx) <<= kapp(norm xx)))")
; (assume "FF" "m" "kapp" "norm")
; (elim)
; (auto)
; (save "KBoundedRHSElimAll")


; (add-program-constant "KappaPower" (py "(rea=>rea)=>rea=>nat=>rea"))
; (add-computation-rules "KappaPower (kapp) (x) (Zero)" "x"
;         "KappaPower (kapp) (x) (Succ n)" "kapp(KappaPower kapp x n)"
; )

; (set-totality-goal "KappaPower")
; (assume "Cfmap^")
; (assume "Tmap")
; (assume "x^" "Tx")
; (assume "n^")
; (elim)
; (ng #t)
; (use "Tx")
; (assume "n^0" "Tn" "Ih")
; (ng #t)
; (use "Tmap")
; (use "Ih")
; (save-totality)

; (set-goal "all FF,m,kapp,norm,xxseq,xx0(VectorNorm norm -> KBoundedRHS FF m kapp norm-> SolutionSim xxseq FF xx0  ->all n norm(xxseq n) <<= KappaPower kapp (norm(xx0)) (n))")
; (assume "FF" "m" "kapp" "norm" "xxseq" "xx0")
; (assume "vNorm")
; (assume "Kb")
; (assume "SolInst")
; (ind)
; (ng #t)
; (use "RealLeReflNC")
; (use "VectorNormCompat")
; (use "SolutionSimElim1" (pt "FF"))
; (auto)
; (assume "n")
; (assume "Ih")
; (ng #t)
; (use "RealLeTrans" (pt "norm(Simulation (Succ n) xx0 FF)"))
; (use "RealLeReflNC")
; (use "VectorNormCompat")
; (use "SolutionSimElim0")
; (auto)
; (simp "Simulation1CompRule")
; (use "RealLeTrans" (pt "kapp(norm(xxseq n))"))
; (use "RealLeTrans" (pt "norm(FF(xxseq n))"))
; (admit)
; (use "KBoundedRHSElimAll" (pt "m"))
; (auto)
; (admit)
; (use "ClassKappaConfigurationElim3")
; (auto)
; (use "KBoundedRHSElimAll" (pt "FF") (pt "m") (pt "norm"))
; (auto)
; (use "NormNNeg")
; (admit)
; (admit) ;; additional prop
; (use "Ih")
; (save "KBoundedRHSElim1")
 

 








