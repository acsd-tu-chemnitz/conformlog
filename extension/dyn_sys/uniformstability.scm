

(display "loading uniformstability.scm")(newline)


;; FF... system dynamics


;; (remove-idpc-name "ProperRHS")



(add-ids
    (list (list "ProperRHS" (make-arity (py "FF") (py "nat"))))
    '("all FF,m(all xx( xx dim = m -> xx dim = (FF xx) dim) -> all xx (xx dim = m ->RealVector xx -> RealVector (FF xx))->
    all xx,yy (xx dim = m ->yy dim = m ->xx===yy -> FF xx === FF yy)
    -> ProperRHS FF m)"
      "ProperRHSIntro"))



(set-goal "all FF,m (ProperRHS FF m ->all xx( xx dim = m -> xx dim = (FF xx) dim)) ")
(assume "FF" "m")
(elim)
(auto)
(save "ProperRHSElim0")

(set-goal "all FF,m (ProperRHS FF m ->all xx (xx dim = m ->RealVector xx -> RealVector (FF xx))) ")
(assume "FF" "m")
(elim)
(auto)
(save "ProperRHSElim1")

(set-goal "all FF,m (ProperRHS FF m  ->all xx,yy (xx dim = m ->yy dim = m ->xx===yy -> FF xx === FF yy)) ")
(assume "FF" "m")
(elim)
(auto)
(save "ProperRHSElim2")

(add-program-constant "Simulation" (py "nat=>realVec=>(realVec=>realVec)=>realVec"))

(add-computation-rules "Simulation Zero xx0 FF" "xx0"
                        "Simulation (Succ n) xx0 FF" "FF (Simulation n xx0 FF)"
)


(set-totality-goal "Simulation")
(use "AllTotalElim")
(ind)
(ng #t)
(use "AllTotalElim")
(assume "xx0")
(assume "FF^" "Tf")
(ng #t)
(use "RealVecTotalVar")
(assume "n" "Ih")
(use "AllTotalElim")
(assume "xx0")
(assume "FF^" "Tf")
(ng #t)
(use "Tf")
(use "Ih")
(use "RealVecTotalVar")
(use "Tf")
(save-totality)

(set-goal "all n,xx0,FF ( ProperRHS FF (xx0 dim) ->  (Simulation n xx0 FF)dim=xx0 dim)")
(ind)
(assume "xx0" "FF")
(assume "PRHS")
(ng #t)
(use "Truth")
(assume "n" "Ih")
(assume "xx0" "FF")
(assume "PRHS")
(simp "Simulation1CompRule")
(simp "<-" "ProperRHSElim0" (pt "xx0 dim"))
(use "Ih")
(auto)
(save "ProperSimulationDim")


(set-goal "all n,xx0,FF ( ProperRHS FF (xx0 dim) -> RealVector xx0 -> RealVector(Simulation n xx0 FF))")
(ind)
(assume "xx0" "FF" "Cf"  "Rxx")
(simp "Simulation0CompRule")
(auto)
(assume "n" "Ih")
(assume "xx0")
(assume "FF")
(assume "Cf")
(assume "Rxx")
(use "ProperRHSElim1" (pt "xx0 dim"))
(use "Cf")
(use "ProperSimulationDim")
(auto)
(save "RealVectorSimulation")


(add-alg "realVecseq" (list "RealVecSeqConstr" "(nat=>realVec)=>realVecseq"))

(add-totality "realVecseq")

(add-totalnc "realVecseq")


(add-var-name "xxsn" (py "nat=>realVec"))

(add-var-name "xxseq" "yyseq" "zzseq" (py "realVecseq"))

(set-goal "all xxseq TotalRealVecseq xxseq")
(cases)
(assume "xxsn")
(use "TotalRealVecseqRealVecSeqConstr")
(use "AllTotalElim")
(assume "n")
(use "RealVecTotalVar")
;; Proof finished.
(save "RealVecseqTotalVar")


(add-program-constant "RealSeqxxsn" (py "realVecseq=>nat=>realVec") t-deg-zero 'const 1)
(add-computation-rules "RealSeqxxsn(RealVecSeqConstr xxsn)" "xxsn")

(set-totality-goal "RealSeqxxsn")
(use "AllTotalElim")
(cases)
(assume "xxsn")
(use "AllTotalElim")
(assume "n")
(ng #t)
(use "RealVecTotalVar")
(save-totality)

(add-application (pt "RealSeqxxsn"))
;; (pt "xxseq(n)")


(add-ids
    (list (list "SolutionSim" (make-arity (py "xxseq") (py "FF") (py "realVec"))))
    '("all xxseq,FF,xx0(all n (xxseq n === Simulation n xx0 FF) -> SolutionSim xxseq FF xx0)"
      "SolutionSimIntro"))

;; (remove-idpc-name "SolutionSim")


; (add-ids
;     (list (list "SolutionSimReal" (make-arity (py "xxseq") (py "hfv") (py "realVec"))))
;     '("all xxseq,hfv,xx(
;         all n (xxseq n === SimulationReal n xx hfv) -> SolutionSimReal xxseq hfv xx)"
;       "SolutionSimRealIntro"))

; (set-goal "all xxseq,xx,hfv( SolutionSimReal xxseq hfv xx -> all n ( xxseq n === SimulationReal n xx hfv))")
; (assume "xxseq" "xx" "hfv")
; (elim)
; (auto)
; (save "SolutionSimRealElim0")

(set-goal "all xxseq,FF,xx0 (SolutionSim xxseq FF xx0 -> all n (xxseq n === Simulation n xx0 FF))")
(assume "xxseq" "FF" "xx0")
(elim)
(auto)
(save "SolutionSimElim0")


(set-goal "all xxseq,xx0,FF (SolutionSim xxseq FF xx0 -> (xxseq Zero) === xx0)")
(assume "xxseq" "xx" "FF")
(elim)
(assume "xxseq0" "FF0" "xx0")
(assume "Cond")
(inst-with-to "Cond" (pt "Zero") "Cond1")
(use "Cond1")
(save "SolutionSimElim1")

(set-goal "all xxseq,xx0,FF (SolutionSim xxseq FF xx0 -> all n RealVector(xxseq n))")
(assume "xxseq" "xx0" "FF")
(elim)
(assume "xxseq0" "FF0" "xx1")
(assume "SolElim")
(assume "n")
(use "RealVectorEqElim0" (pt "Simulation n xx1 FF0"))
(use "SolElim")
(save "SolutionSimElim2")

(set-goal "all xxseq,xx0,FF (SolutionSim xxseq FF xx0 -> RealVector(xx0))")
(assume "xxseq" "xx0" "FF")
(assume "SolElim")
(use "RealVectorEqElim0" (pt "(xxseq Zero)"))
(use "RealVectorEqSym")
(use "SolutionSimElim1" (pt "FF"))
(auto)
(save "SolutionSimElim3")

(set-goal "all xxseq,xx0,FF (SolutionSim xxseq FF xx0 -> ProperRHS FF (xx0 dim) ->  all n ((xxseq n) dim = xx0 dim) )")
(assume "xxseq" "xx0" "FF")
(assume "SolElim")
(assume "PRHS")
(ind)
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "SolutionSimElim1" (pt "FF"))
(use "SolElim")
(assume "n")
(assume "Ih")
(simp (pf "(xxseq(Succ n)) dim=(FF(xxseq n)) dim"))
(simp  "<-" "ProperRHSElim0" (pt "xx0 dim"))
(use "Ih")
(use "Ih")
(use "PRHS")
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "RealVectorEqTrans" (pt "Simulation (Succ n) xx0 FF"))
(use "SolutionSimElim0")
(auto)
(simp "Simulation1CompRule")
(use "ProperRHSElim2" (pt "xx0 dim"))
(auto)
(use "ProperSimulationDim")
(auto)
(use "RealVectorEqSym")
(use "SolutionSimElim0")
(auto)
(save "SolutionSimElim4")


(add-var-name "V" (py "realVec=>rea"))

;; (remove-pvar-name "LyapunovConfig")

(add-ids
    (list (list "LyapunovConfig" (make-arity (py "realVec=>rea") (py "n") (py "realVec") )))
    '("all V,n,xx( CmapContmv V n -> Zero < xx dim -> xx dim = n -> LyapunovConfig V n xx)"
      "LyapunovConfigIntro"))

(set-goal "LyapunovConfig V n xx -> CmapContmv V n ")
(assume "V" "n" "xx")
(elim)
(auto)
(save "LyapunovConfigElim0")

(set-goal "LyapunovConfig V n xx -> Zero < xx dim ")
(assume "V" "n" "xx")
(elim)
(auto)
(save "LyapunovConfigElim1")


(set-goal "LyapunovConfig V n xx -> xx dim = n")
(assume "V" "n" "xx")
(elim)
(auto)
(save "LyapunovConfigElim2")

(set-goal "all V,m,xxseq,FF,xx0(SolutionSim xxseq FF xx0 -> ProperRHS FF (xx0 dim) -> LyapunovConfig V (xx0 dim) xx0 -> m=xx0 dim -> all n (LyapunovConfig V (m ) (xxseq n)))")
(assume "V" "m" "xxseq" "FF" "xx0")
(assume "SolSim1")
(assume "PRHS")
(assume "LyapunovConfig1")
(assume "dimcond")
(assume "n")
(use "LyapunovConfigIntro")
(use "LyapunovConfigElim0" (pt "xx0"))
(simp "dimcond")
(use "LyapunovConfig1")
(simp "SolutionSimElim4" (pt "xx0") (pt "FF"))
(use "LyapunovConfigElim1" (pt "V") (pt "m"))
(simp "dimcond")
(auto)
(simp "dimcond")
(simp "SolutionSimElim4" (pt "FF"))
(use "Truth")
(auto)
(save "LyapunovConfigElim3")

(add-var-name "repsilon" (py "rea"))
(add-var-name "rdelta" (py "rea"))


; (add-ids
;     (list (list "StableEqLeReaNorm" (make-arity (py "xxseq") (py "FF") (py "realVec") (py "norm") )))
;     '("all xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 ->  VectorNorm norm ->
;         all repsilon ( Real repsilon -> exl p RealLt 0 repsilon p -> exl rdelta ( Real rdelta &((norm xx0) <<= rdelta ->  all n( (norm (xxseq n)) <<= repsilon )))) -> StableEqLeReaNorm xxseq FF xx0 norm )"
;       "StableEqLeReaNormIntro"))


(add-ids
    (list (list "StableEqLeReaNorm" (make-arity (py "xxseq") (py "FF") (py "realVec") (py "norm") )))
    '("all xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 ->  VectorNorm norm ->
        all repsilon ( Real repsilon -> exl p RealLt 0 repsilon p -> exl rdelta,p ( Real rdelta & RealLt 0 rdelta p &((norm xx0) <<= rdelta ->  all n( (norm (xxseq n)) <<= repsilon )))) -> StableEqLeReaNorm xxseq FF xx0 norm )"
      "StableEqLeReaNormIntro"))





(set-goal "all xxseq,FF,xx0,norm(StableEqLeReaNorm xxseq FF xx0 norm -> Real repsilon -> exl p RealLt 0 repsilon p ->  exr rdelta ( (norm xx0) <<= rdelta ->  all n( (norm (xxseq n)) <<= repsilon )))")
(assume "repsilon" "xxseq" "FF" "xx" "norm")
(elim)
(assume "xxseq0" "FF0" "xx0" "norm0")
(assume "SolSim")
(assume "Vnorm" "Eps1")
(assume "Reps" "0<eps")
(assert "exl rdelta,p(Real rdelta & RealLt 0 rdelta p &(norm0 xx0<<=rdelta -> all n norm0(xxseq0 n)<<=repsilon))")
(use "Eps1")
(auto)
(assume "ExlInst")
(by-assume "ExlInst" "rdelta" "ExlInstProp")
(by-assume "ExlInstProp" "q1" "ExlInstProp2")
(intro 0 (pt "rdelta"))
(auto)
(save "StableEqLeReaNormElim0")

(set-goal "all xxseq,FF,xx0,norm(StableEqLeReaNorm xxseq FF xx0 norm -> Real repsilon -> exl p RealLt 0 repsilon p ->  exr rdelta ( Real rdelta &  ((norm xx0) <<= rdelta ->  all n( (norm (xxseq n)) <<= repsilon ))))")
(assume "repsilon" "xxseq" "FF" "xx" "norm")
(elim)
(assume "xxseq0" "FF0" "xx0" "norm0")
(assume "SolSim")
(assume "Vnorm" "Eps1")
(assume "Reps" "0<eps")
(assert "exl rdelta,p(Real rdelta & RealLt 0 rdelta p &(norm0 xx0<<=rdelta -> all n norm0(xxseq0 n)<<=repsilon))")
(use "Eps1")
(auto)
(assume "ExlInst")
(by-assume "ExlInst" "rdelta" "ExlInstProp")
(by-assume "ExlInstProp" "q1" "ExlInstProp2")
(intro 0 (pt "rdelta"))
(auto)
(save "StableEqLeReaNormElim1")

(set-goal "all xxseq,FF,xx0,norm(StableEqLeReaNorm xxseq FF xx0 norm -> SolutionSim xxseq FF xx0 & VectorNorm norm)")
(assume "xxseq" "FF" "xx0" "norm")
(elim)
(auto)
(save "StableEqLeReaNormElim2")

(set-goal "all xxseq,FF,xx0,norm(StableEqLeReaNorm xxseq FF xx0 norm -> Real repsilon -> exl p RealLt 0 repsilon p ->  exr rdelta,p ( Real rdelta & RealLt 0 rdelta p & ((norm xx0) <<= rdelta ->  all n( (norm (xxseq n)) <<= repsilon ))))")
(assume "repsilon" "xxseq" "FF" "xx" "norm")
(elim)
(assume "xxseq0" "FF0" "xx0" "norm0")
(assume "SolSim")
(assume "Vnorm" "Eps1")
(assume "Reps" "0<eps")
(assert "exl rdelta,p(Real rdelta & RealLt 0 rdelta p &(norm0 xx0<<=rdelta -> all n norm0(xxseq0 n)<<=repsilon))")
(use "Eps1")
(auto)
(assume "ExlInst")
(by-assume "ExlInst" "rdelta" "ExlInstProp")
(by-assume "ExlInstProp" "q1" "ExlInstProp2")
(intro 0 (pt "rdelta"))
(auto)
(intro 0 (pt "q1"))
(auto)
(save "StableEqLeReaNormElim3")


;;(remove-idpc-name "StableEqLtReaNorm")

; (add-ids
;     (list (list "StableEqLtReaNorm" (make-arity (py "xxseq") (py "FF") (py "realVec") (py "norm") )))
;     '("all xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 ->  VectorNorm norm ->
;         all repsilon ( Real repsilon -> exl p RealLt 0 repsilon p -> exl rdelta ( Real rdelta &(exr p RealLt (norm xx0) rdelta p ->  all n( exr p RealLt (norm (xxseq n)) repsilon p )))) -> StableEqLtReaNorm xxseq FF xx0 norm )"
;       "StableEqLtReaNormIntro"))



(add-ids
    (list (list "StableEqLtReaNorm" (make-arity (py "xxseq") (py "FF") (py "realVec") (py "norm") )))
    '("all xxseq,FF,xx0,norm( SolutionSim xxseq FF xx0 ->  VectorNorm norm ->
        all repsilon ( Real repsilon -> exl p RealLt 0 repsilon p -> exl rdelta,p ( Real rdelta & RealLt 0 rdelta p &(exr p RealLt (norm xx0) rdelta p ->  all n( exr p RealLt (norm (xxseq n)) repsilon p )))) -> StableEqLtReaNorm xxseq FF xx0 norm )"
      "StableEqLtReaNormIntro"))

(set-goal "all xxseq,FF,xx0,norm(StableEqLtReaNorm xxseq FF xx0 norm -> Real repsilon -> exl p RealLt 0 repsilon p-> exr rdelta,p ( Real rdelta & RealLt 0 rdelta p & (exr p RealLt (norm xx0) rdelta p ->  all n( exr p RealLt (norm (xxseq n)) repsilon  p))))")
(assume "repsilon" "xxseq" "FF" "xx" "norm")
(elim)
(assume "xxseq0" "FF0" "xx0" "norm0")
(assume "SolSim")
(assume "Vnorm" "Eps1")
(assume "Reps" "0<eps")
(use "Eps1")
(auto)
(save "StableEqLtReaNormElim0")



(add-var-name "rdeltamap" (py "rea=>rea"))



(set-goal "StableEqLeReaNorm xxseq FF xx0 norm -> StableEqLtReaNorm xxseq FF xx0 norm")
(assume "xxseq" "FF" "xx0" "norm")
(elim)
(assume "xxseq0" "FF0" "xx1" "norm0")
(assume "SolSim")
(assume "Vnormnorm")
(assume "cond")
(use "StableEqLtReaNormIntro")
(auto)
(assume "repsilon" "Reps" "0<eps")
(inst-with-to "PosChooseProperAux" (pt "repsilon") "ProperChoice")
(assert "ex y(Real y & exl p RealLt y repsilon p & exl p RealLt 0 y p)")
(use "ProperChoice")
(auto)
(assume "PChoice")
(by-assume "PChoice" "repsilon1" "PChoiceProp")
(inst-with-to "cond" (pt "repsilon1") "condInst")
(assert "exl rdelta,p(Real rdelta & RealLt 0 rdelta p & (norm0 xx1<<=rdelta -> all n norm0(xxseq0 n)<<=repsilon1))")
(use "condInst")
(auto)
(assume "MainInst")
(by-assume "MainInst" "rdelta1" "MainInstProp")
(by-assume "MainInstProp" "q1" "MainInstProp2")
(intro 0 (pt "rdelta1"))
(intro 0 (pt "q1"))
(split)
(auto)
(split)
(auto)
(assume "x0<delta")
(assert "exl p RealLt repsilon1 repsilon p")
(use "PChoiceProp")
(assume "PChoiceProp1")
(by-assume "PChoiceProp1" "p0" "PChoiceProp1Wit")
(assume "n")
(intro 0 (pt "PosS(PosS(PosS(p0)))"))
(use "RealLeLtTrans" (pt "repsilon1"))
(auto)
(use "VectorNormElim0")
(auto)
(use "SolutionSimElim2" (pt "xx1") (pt "FF0")) 
(auto)
(use "MainInstProp2")
(by-assume "x0<delta" "p1" "ProperDeltaWit")
(use "RealLtToLe" (pt "p1"))
(use "VectorNormElim0")
(auto)
(use "SolutionSimElim3" (pt "xxseq0") (pt "FF0")) 
(auto)
(save "StableEqLeToStableEqLt")



(add-ids
    (list (list "StableEqLeReaNormWit" (make-arity (py "xxseq") (py "FF") (py "realVec") (py "norm") (py "rdeltamap") )))
    '("all xxseq,FF,xx0,norm,rdeltamap( SolutionSim xxseq FF xx0 ->  VectorNorm norm ->
        all repsilon ( Real repsilon -> exl p RealLt 0 repsilon p -> Real(rdeltamap repsilon)&((norm xx0) <<= (rdeltamap repsilon) ->  all n( (norm (xxseq n)) <<= repsilon ))) -> StableEqLeReaNormWit xxseq FF xx0 norm rdeltamap)"
      "StableEqLeReaNormWitIntro"))

(set-goal "all xxseq,FF,xx0,norm,rdeltamap(StableEqLeReaNormWit xxseq FF xx0 norm rdeltamap ->  SolutionSim xxseq FF xx0 )")
(assume "xxseq" "FF" "xx" "norm" "rdeltamap")
(elim)
(assume "xxseq0" "FF0" "xx0" "norm0" "rdeltamap0")
(auto)
(save "StableEqLeReaNormWitElim0")

(set-goal "all xxseq,FF,xx0,norm,rdeltamap(StableEqLeReaNormWit xxseq FF xx0 norm rdeltamap ->  VectorNorm norm )")
(assume "xxseq" "FF" "xx" "norm" "rdeltamap")
(elim)
(assume "xxseq0" "FF0" "xx0" "norm0" "rdeltamap0")
(auto)
(save "StableEqLeReaNormWitElim1")

(set-goal "all xxseq,FF,xx0,norm,rdeltamap(StableEqLeReaNormWit xxseq FF xx0 norm rdeltamap ->  all repsilon ( Real repsilon -> exl p RealLt 0 repsilon p -> Real(rdeltamap repsilon)&((norm xx0) <<= (rdeltamap repsilon) ->  all n( (norm (xxseq n)) <<= repsilon ))))")
(assume "xxseq" "FF" "xx" "norm" "rdeltamap")
(elim)
(assume "xxseq0" "FF0" "xx0" "norm0" "rdeltamap0")
(auto)
(save "StableEqLeReaNormWitElim2")




(add-var-name "kapp" (py "(rea=>rea)"))
(add-var-name "kappinv" (py "(rea=>rea)"))


(add-ids
    (list (list "ClassKappaConfiguration" (make-arity (py "rea=>rea"))))
    '("all kapp(CfmapCont kapp -> all x (0<<=x -> 0<<=kapp x) -> all x (x===0 -> kapp x===0)  -> all x,y (0<<=x -> 0<<=y ->x<<=y -> kapp x <<= kapp y) -> all x,y (0<<=x -> 0<<=y ->kapp x<<=kapp y -> x<<=y) -> all x (Real x -> exl p RealLt 0 x p -> exl p RealLt 0 (kapp x) p) -> ClassKappaConfiguration kapp)"
      "ClassKappaConfigurationIntro"))

(set-goal "all kapp (ClassKappaConfiguration kapp -> CfmapCont kapp)")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaConfigurationElim0")


(set-goal "all kapp (ClassKappaConfiguration kapp -> all x (x===0 -> kapp x===0))")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaConfigurationElim1")


(set-goal "all kapp (ClassKappaConfiguration kapp -> all x,y (0<<=x -> 0<<=y ->kapp x<<=kapp y -> x<<=y))")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaConfigurationElim2")


(set-goal "all kapp (ClassKappaConfiguration kapp -> all x,y (0<<=x -> 0<<=y ->x<<=y -> kapp x <<= kapp y))")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaConfigurationElim3")


(set-goal "all kapp (ClassKappaConfiguration kapp -> all x (0<<=x -> 0<<=kapp x))")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaConfigurationElim4")

(set-goal "all kapp (ClassKappaConfiguration kapp ->all x ( Real x -> exr p RealLt 0 x p -> exr p RealLt 0 (kapp x) p))")
(assume "kapp")
(elim)
(assume "kapp1") 
(assume "prop1" "prop2" "prop3" "prop4" "prop5")
(assume "ExProp")
(assume "x")
(assume "Rx")
(assume "ExInst")
(by-assume "ExInst" "p0" "ExInstProp")
(assert "exl p RealLt(0)(kapp1 x)p")
(use "ExProp")
(use "Rx")
(intro 0 (pt "p0"))
(use "ExInstProp")
(assume "exlPos")
(by-assume "exlPos" "p1" "exlPosProp")
(intro 0 (pt "p1"))
(use "exlPosProp")
(save "ClassKappaConfigurationElim5")


;; (remove-idpc-name "ClassKappaConfigurationPos")
(add-ids
    (list (list "ClassKappaConfigurationPos" (make-arity (py "rea=>rea"))))
    '("all kapp( ClassKappaConfiguration kapp -> all x,y (0<<=x -> Real y -> exr p RealLt x y p -> exr p RealLt (kapp x) (kapp y) p) -> all x,y (0<<=x -> 0<<=y -> Real y -> exr p RealLt (kapp x) (kapp y) p -> exr p RealLt x y p ) -> ClassKappaConfigurationPos kapp)"
      "ClassKappaConfigurationPosIntro"))

(set-goal "all kapp (ClassKappaConfigurationPos kapp -> ClassKappaConfiguration kapp)")
(assume "kapp")
(elim)
(auto)
(save "ClassKappaConfigurationPosElim0")

(set-goal "all kapp (ClassKappaConfigurationPos kapp -> all x,y (0<<=x-> Real y -> exr p RealLt x y p -> exr p RealLt (kapp x) (kapp y) p))")
(assume "kapp")
(elim)
(auto)
(assume "kapp0")
(assume "ClKap" "Prop1" "Prop2")
(use "Prop1")
(save "ClassKappaConfigurationPosElim1")

(set-goal "all kapp (ClassKappaConfigurationPos kapp -> all x,y (0<<=x -> 0<<=y -> Real y -> exr p RealLt (kapp x) (kapp y) p -> exr p RealLt x y p ))")
(assume "kapp")
(elim)
(auto)
(assume "kapp0")
(assume "ClKap" "Prop1" "Prop2")
(use "Prop2")
(save "ClassKappaConfigurationPosElim2")



(add-ids
    (list (list "ClassKappaInverse" (make-arity (py "rea=>rea") (py "rea=>rea"))))
'("all kapp,kapp1( ClassKappaConfiguration kapp  -> CfmapCont kapp1  -> all x (0<<=x -> kapp1(kapp x)===x) -> all y (0<<=y -> kapp(kapp1 y)===y) -> all x (0<<=x -> 0<<=kapp1 x) -> all x (Real x -> exr p RealLt 0 x p -> exr p RealLt 0 (kapp1 x) p)  -> ClassKappaInverse kapp kapp1)"
      "ClassKappaInverseIntro"))

;;(set-goal " all x (exr p RealLt 0 x p -> exr p RealLt 0 (kapp1 x) p) ")



(set-goal "all kapp,kapp1(ClassKappaInverse kapp kapp1 -> CfmapCont kapp1)")
(assume "kapp1" "kapp2")
(elim)
(auto)
(save "ClassKappaInverseElim1")


(set-goal "all kapp,kapp1(ClassKappaInverse kapp kapp1 -> all x (0<<=x -> kapp1(kapp x)===x))")
(assume "kapp1" "kapp2")
(elim)
(auto)
(save "ClassKappaInverseElim2")

(set-goal "all kapp,kapp1(ClassKappaInverse kapp kapp1 -> all y (0<<=y -> kapp(kapp1 y)===y))")
(assume "kapp1" "kapp2")
(elim)
(auto)
(save "ClassKappaInverseElim3")


(set-goal "all kapp,kapp1(ClassKappaInverse kapp kapp1 ->  all x (0<<=x -> 0<<=kapp1 x))")
(assume "kapp1" "kapp2")
(elim)
(auto)
(save "ClassKappaInverseElim4")

(set-goal "all kapp,kapp1(ClassKappaInverse kapp kapp1 ->   all x (Real x -> exr p RealLt 0 x p -> exr p RealLt 0 (kapp1 x) p))")
(assume "kapp1" "kapp2")
(elim)
(auto)
(strip)
(use 7)
(use 8)
(auto)
(save "ClassKappaInverseElim5")


(set-goal "all kapp,kapp1(ClassKappaInverse kapp kapp1 ->   all x (Real x -> exr p RealLt 0 x p -> exr p RealLt (ReaRat 0) (kapp1 x) p))")
(assume "kapp1" "kapp2")
(elim)
(auto)
(assume "kapp3" "kapp4")
(strip)
(use 7)
(use 8)
(auto)
(save "ClassKappaInverseElim5Aux")



(set-goal "all kapp,kapp1 ( ClassKappaConfiguration kapp -> ClassKappaInverse kapp kapp1  -> all x,y (0<<= x -> 0<<=y -> kapp x === kapp y -> x === y))")
(assume "kapp" "kapp1")
(assume "classkapp1")
(assume "classkappInv")
(assume "x" "y")
(assume "0lex" "0ley")
(assume "kappx=kappy")
(simpreal  "<-" "ClassKappaInverseElim2" (pt "kapp") (pt "kapp1"))
(inst-with-to  "ClassKappaInverseElim2" (pt "kapp") (pt "kapp1") "ClassKElimInst")
(assert "all x(0<<=x -> kapp1(kapp x)===x)")
(use "ClassKElimInst")
(use "classkappInv")
(assume "ElimInst1")
(inst-with-to "ElimInst1" (pt "y") "ElimInstProp")
(cut "Real(kapp1(kapp x))")
(assume "cutInst")
(simpreal "<-" "ElimInstProp")
(use "CfmapContElim1Compat")
(use "ClassKappaInverseElim1" (pt "kapp"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "RealLeElim1" (pt "ReaRat 0") )
(auto)
(save "ClassKappaInverseCompatRev")

;;(remove-pvar-name "PDVNorm")

(add-ids
    (list (list "PDVNorm" (make-arity (py "realVec=>rea") (py "nat") (py "rea=>rea") (py "rea=>rea") (py "norm"))))
    '("all V,n,kapp1,kapp2,norm( VectorNorm norm ->
      (all xx ( RealVector xx -> LyapunovConfig V n xx  -> (kapp1 (norm xx))<<= (V xx) & (V xx) <<= (kapp2 (norm xx)))) ->  PDVNorm V n kapp1 kapp2 norm)"
      "PDVNormIntro"))

(set-goal "all V,n,kapp1,kapp2,norm( PDVNorm V n kapp1 kapp2 norm ->(all xx ( RealVector xx -> LyapunovConfig V n xx ->(kapp1 (norm xx))<<= (V xx) )))")
(assume "V" "n" "kapp1" "kapp2" "norm")
(elim)
(auto)
(save "PDVNormElim0")

(set-goal "all V,n,kapp1,kapp2,norm( PDVNorm V n kapp1 kapp2 norm ->(all xx ( RealVector xx -> LyapunovConfig V (n) xx ->(V xx) <<= (kapp2 (norm xx)))))")
(assume "V" "n" "kapp1" "kapp2" "norm")
(elim)
(auto)
(save "PDVNormElim1")

(set-goal "all V,n,kapp1,kapp2,norm( PDVNorm V n kapp1 kapp2 norm -> VectorNorm norm)")
(assume "V" "n" "kapp1" "kapp2" "norm")
(elim)
(auto)
(save "PDVNormElim2")

(add-ids
    (list (list "PDVNormSimple" (make-arity (py "realVec=>rea") (py "nat") (py "rea=>rea") (py "norm"))))
    '("all V,n,kapp1,norm( VectorNorm norm ->
      (all xx ( RealVector xx -> LyapunovConfig V n xx  -> (kapp1 (norm xx))<<= (V xx))) ->  PDVNormSimple V n kapp1 norm)"
      "PDVNormSimpleIntro"))

(set-goal "all V,n,kapp1,norm(PDVNormSimple V n kapp1 norm -> VectorNorm norm)")
(assume "V" "n" "kapp1" "norm")
(elim)
(auto)
(save "PDVNormSimpleElim0")

(set-goal "all V,n,kapp1,norm(PDVNormSimple V n kapp1 norm -> (all xx ( RealVector xx -> LyapunovConfig V n xx  -> (kapp1 (norm xx))<<= (V xx))))")
(assume "V" "n" "kapp1" "norm")
(elim)
(auto)
(save "PDVNormSimpleElim1")


(add-ids
    (list (list "PDVDiff" (make-arity (py "realVec=>rea") (py "xxseq") (py "FF") (py "realVec"))))
    '("all V,xxseq,FF,xx0( CmapContmv  V (xx0 dim) ->  SolutionSim xxseq FF xx0 -> all n ( (V (xxseq (Succ n))) <<=(V (xxseq n))) ->  PDVDiff V xxseq FF xx0)"
      "PDVDiffIntro"))

(set-goal "all V,xxseq,FF,xx0(PDVDiff V xxseq FF xx0 -> all n ( (V (xxseq (Succ n))) <<=(V (xxseq n))))")
(assume "V" "xxseq" "FF" "xx0")
(elim)
(auto)
(save "PDVDiffElim0")



(set-goal "all V,xxseq,FF,xx0(PDVDiff V xxseq FF xx0 -> LyapunovConfig V (xx0 dim) xx0  -> all n ( (V (xxseq n)) <<=(V (xxseq Zero))))")
(assume "V" "xxseq" "FF" "xx")
(elim)
(assume "V0" "xxseq0" "FF0" "xx0")
(assume "CV")
(assume "SolSim")
(assume "LyapDecay" )
(assume "LyapunovConfig V")
(ind)
(use "RealLeRefl")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "CV")
(simp (pf "(xxseq0 Zero)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V0") (pt "xx0 dim"))
(auto)
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "SolutionSimElim1" (pt "FF0"))
(auto)
(use "RealVectorCompatibleElim2")
(use "RealVectorEqComponentsElim0")
(use "SolutionSimElim1" (pt "FF0"))
(auto)
(use "RealVectorEqElim0" (pt "xx0"))
(use "SolutionSimElim1" (pt "FF0"))
(auto)
(assume "n" "Ih")
(use "RealLeTrans" (pt "V0 (xxseq0(n))"))
(use "LyapDecay")
(use "Ih")
(save "PDVDiffElim1")

(set-goal "all V,xxseq,FF,xx0(PDVDiff V xxseq FF xx0 -> SolutionSim xxseq FF xx0)")
(assume "V" "xxseq" "FF" "xx0")
(elim)
(auto)
(save "PDVDiffElim2")

(set-goal "all V,xxseq,FF,xx0( PDVDiff V xxseq FF xx0 -> CmapContmv V (xx0 dim))")
(assume "V" "xxseq" "FF" "xx0")
(elim)
(auto)
(save "PDVDiffElim3")

;; UniformLyapunovStableLeAllNorm

(set-goal "all V,kapp1,kapp2,kappinv,xxseq,FF,xx0,norm( ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0 -> ClassKappaConfiguration kapp1 -> ClassKappaConfiguration kapp2 -> ClassKappaInverse kapp2 kappinv ->  PDVNorm V (xx0 dim) kapp1 kapp2 norm -> PDVDiff V xxseq FF xx0 -> StableEqLeReaNorm xxseq FF xx0 norm)")
(assume "V" "kapp1" "kapp2" "kappinv" "xxseq" "FF" "xx0" "norm")
(assume "PRHS")
(assume "LyapunovConfig V")
(assume "classkapp1")
(assume "classkapp2")
(assume "classkappInv")
(assume "PDVNorm V")
(assume "PDVDiff V")
(use "StableEqLeReaNormIntro")
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(assume "repsilon" "Reps" "0<eps")
(intro 0 (pt "(kappinv (kapp1 repsilon))"))
(cut "exr p RealLt 0(kappinv(kapp1 repsilon))p")
(assume "PosCut")
(by-assume "PosCut" "q0" "PosCutProp")
(intro 0 (pt "q0"))
(split)
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp1")
(use "Reps")
(split)
(auto)
(assume "nx_0<=delta")
(assume "n")
(cut "all n RealVector( (xxseq n) )")
(assume "AuxRealCutInst")
(use "ClassKappaConfigurationElim2" (pt "kapp1"))
(auto)
(use "NormNNeg")
(auto)
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(by-assume  "0<eps" "p0" "epswit")
(use "RealLtToLe" (pt "p0"))
(use "RealRat")
(auto)
(use "RealLeTrans" (pt "V (xxseq n)"))
(use "PDVNormElim0" (pt "xx0 dim") (pt "kapp2"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "V(xxseq Zero)"))
(use "PDVDiffElim1" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeTrans" (pt "kapp2(kappinv( kapp1 (repsilon)))"))
(use "RealLeTrans" (pt "kapp2( norm (xxseq Zero))"))
(use "PDVNormElim1" (pt "xx0 dim") (pt "kapp1"))
(use "PDVNorm V")
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "ClassKappaConfigurationElim3")
(use "classkapp2")
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "RealLeTrans" (pt "norm (xx0)"))
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "RealVectorEqElim1" (pt "(xxseq Zero)"))
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "norm (xx0)"))
(use "RealLeReflNC")
(use "VectorNormCompat")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(use "PDVDiff V")
(use "nx_0<=delta")
(use "RealLeReflNC")
(use "ClassKappaInverseElim3")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(by-assume  "0<eps" "p0" "epswit")
(use "RealLtToLe" (pt "p0"))
(use "RealRat")
(auto)
(assume "n0")
(use "RealVectorEqElim0" (pt " (Simulation n0 xx0 FF)"))
(use "SolutionSimElim0")
(use "PDVDiffElim2" (pt "V"))
(auto)
(cut "exr p RealLt 0(kapp1 repsilon)p")
(assume "PosCut2")
(use "ClassKappaInverseElim5Aux" (pt "kapp2")) 
(use "classkappInv")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "ClassKappaConfigurationElim5")
(auto)
(by-assume "0<eps" "p" "PosEps")
(intro 0 (pt "p"))
(auto)
(save "UniformLyapunovStableLeAllNorm")



;; UniformLyapunovStableLtAllNorm
(set-goal "all V,kapp1,kapp2,kappinv,xxseq,FF,xx0,norm( ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0 -> ClassKappaConfigurationPos kapp1 -> ClassKappaConfigurationPos kapp2 -> ClassKappaInverse kapp2 kappinv ->  PDVNorm V (xx0 dim) kapp1 kapp2 norm -> PDVDiff V xxseq FF xx0 -> StableEqLtReaNorm xxseq FF xx0 norm)")
(assume "V" "kapp1" "kapp2" "kappinv" "xxseq" "FF" "xx0" "norm")
(assume "PRHS")
(assume "LyapunovConfig V")
(assume "classkapp1p")
(assume "classkapp2p")
(assume "classkappInv")
(assume "PDVNorm V")
(assume "PDVDiff V")
(cut "ClassKappaConfiguration kapp1")
(assume "classkapp1")
(cut "ClassKappaConfiguration kapp2")
(assume "classkapp2")
(use "StableEqLtReaNormIntro")
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(assume "repsilon" "Reps" "0<eps")
(intro 0 (pt "(kappinv (kapp1 repsilon))"))
(cut "exr p RealLt 0(kappinv(kapp1 repsilon))p")
(assume "PosCut")
(by-assume "PosCut" "q0" "PosCutProp")
(intro 0 (pt "q0"))
(split)
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp1")
(use "Reps")
(split)
(auto)
(assume "nx_0<delta")
(assume "n")
(cut "all n RealVector( (xxseq n) )")
(assume "AuxRealCutInst")
(use "ClassKappaConfigurationPosElim2" (pt "kapp1"))
(auto)
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(by-assume "0<eps" "p2" "PosProp")
(use "RealLtToLe" (pt "p2"))
(autoreal)
(auto)
(assert "exr p RealLt (kapp2(norm xx0)) (kapp2(kappinv(kapp1 repsilon))) p") ;; \kappa_2(x_0)<\kappa_2(\delta(\epsilon))
(use "ClassKappaConfigurationPosElim1")
(auto)
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(assume "ExAssertionPos")
(by-assume "ExAssertionPos" "p0" "ExAssertionPosInst")
(intro 0 (pt "PosS(PosS(PosS(PosS(PosS(PosS(p0))))))"))
(use "RealLtLeTrans" (pt "(kapp2(kappinv(kapp1 repsilon)))"))
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "VectorNormElim0")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "RealLeReflNC")
(use "ClassKappaInverseElim3")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(by-assume "0<eps" "p1" "PosWitX0")
(use "RealLtToLe" (pt "p1"))
(autoreal)
(auto)
(use "RealLeLtTrans" (pt "kapp2(norm xx0)"))
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "VectorNormElim0")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "VectorNormElim0")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "RealLeTrans" (pt "V (xxseq n)"))
(use "PDVNormElim0" (pt "xx0 dim") (pt "kapp2"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "V(xxseq Zero)"))
(use "PDVDiffElim1" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeTrans" (pt "kapp2( norm (xxseq Zero))"))
(use "PDVNormElim1" (pt "xx0 dim") (pt "kapp1"))
(use "PDVNorm V")
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeReflNC")
(use "CfmapContElim1Compat")
(use "ClassKappaConfigurationElim0")
(auto)
(use "VectorNormCompat")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "n0")
(use "RealVectorEqElim1" (pt "Simulation n0 xx0 FF"))
(use "RealVectorEqSym")
(use "SolutionSimElim0")
(use "PDVDiffElim2" (pt "V"))
(auto)
(by-assume "0<eps" "q0" "PosEps")
(cut "exr p RealLt 0(kapp1 repsilon)p")
(assume "cut1")
(use "ClassKappaInverseElim5" (pt "kapp2"))
(auto)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(auto)
(use "ClassKappaConfigurationElim5")
(use "ClassKappaConfigurationPosElim0")
(auto)
(intro 0 (pt "q0"))
(auto)
(use "ClassKappaConfigurationPosElim0")
(auto)
(use "ClassKappaConfigurationPosElim0")
(auto)
(save "UniformLyapunovStableLtAllNorm")


(add-var-name "ralpha" "rbeta" "rgamma" (py "rea"))

;; LyapunovStableLe


(set-goal "all V,kapp1,xxseq,FF,xx0,norm( VectorNorm norm -> ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0 -> ClassKappaConfigurationPos kapp1 -> PDVNormSimple V (xx0 dim) kapp1 norm -> all xx,repsilon,p ( RealVector xx -> Real repsilon -> RealLt 0 repsilon p -> xx dim = xx0 dim -> exl rdelta,p ((Real rdelta)& RealLt 0 rdelta p &(norm(xx)<<=rdelta -> (V xx)<<= repsilon))) ->   PDVDiff V xxseq FF xx0 -> StableEqLeReaNorm xxseq FF xx0 norm)")
(assume "V" "kapp1" "xxseq" "FF" "xx0" "norm")
(assume "Vnorm" "PRHS" "LyapConfig" "ClassKPos" "PDVNormS" "ContCond" "LyapDecay")
(use "StableEqLeReaNormIntro")
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "repsilon" "Reps" "0<eps")
(assert "all x(Real x -> exl p RealLt 0 x p -> exl ralpha (all xx ( RealVector xx->LyapunovConfig V (xx0 dim) xx ->  exl p RealLt x (norm(xx)) p -> ralpha <<= (V xx) )&(Real ralpha)& exl p RealLt 0 ralpha p))")
(assume "x" "Rx" "0<x")
(intro 0 (pt "kapp1 x"))
(split)
(assume "xx")
(assume "Rxx")
(assume "LyapunovConfigAux")
(assume "x<|_xx")
(use "RealLeTrans" (pt "kapp1 (norm xx)"))
(use "ClassKappaConfigurationElim3")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(use "RealLtToLe" (pt "p2"))
(autoreal)
(auto)
(use "NormNNeg")
(use "PDVNormSimpleElim0" (pt "V") (pt "xx0 dim") (pt "kapp1"))
(auto)
(by-assume "x<|_xx" "p1" "PosProp")
(use "RealLtToLe" (pt "p1")) 
(realproof)
(use "VectorNormElim0")
(auto)
(use "PDVNormSimpleElim1" (pt "xx0 dim"))
(auto)
(split)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "ClassKappaConfigurationPosElim0")
(auto)
(use "ClassKappaConfigurationElim5")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(intro 0 (pt "p2"))
(auto)
(assume "AssertionInfCond")
(inst-with-to "AssertionInfCond" (pt "repsilon") "AssertionInfCondInst")
(assert "exl ralpha (all xx ( RealVector xx->LyapunovConfig V (xx0 dim) xx ->  exl p RealLt repsilon (norm(xx)) p -> ralpha <<= (V xx)) & Real ralpha & exl p RealLt 0 ralpha p)")
(use "AssertionInfCondInst")
(auto)
(assume "AssertionInfCondInstM")
(by-assume "AssertionInfCondInstM" "ralpha1" "AssertionInfCondInstMP")
(cut "ex rbeta (Real rbeta &(exl p RealLt rbeta ralpha1 p) & (exl p RealLt 0 rbeta p))")
(assume "Hyp1")
(by-assume "Hyp1" "rbeta1" "Hyp1P")
(inst-with-to "ContCond" (pt "xx0") (pt "rbeta1") "ContCondInst")
(assert "exl rdelta,p(Real rdelta & RealLt 0 rdelta p & (norm xx0<<=rdelta -> V xx0<<=rbeta1))")
(assert "exl p RealLt 0 rbeta1 p")
(use "Hyp1P")
(assume "ExHypBeta")
(by-assume "ExHypBeta" "q2" "ExHypBetaInst")
(use "ContCondInst" (pt "q2"))
(use "SolutionSimElim3" (pt "xxseq") (pt "FF")) 
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "ContCondInst1")
(by-assume "ContCondInst1" "rdelta1" "ContCondProp")
(by-assume "ContCondProp" "q1" "ContCondProp2")
(intro 0 (pt "rdelta1"))
(intro 0 (pt "q1"))
(split)
(auto)
(split)
(auto)
(assume "PropStart")
(cut "all n RealVector (xxseq n)")
(assume "Rcut")
(assume "n")
(use "NotGtIsLt")
(use "VectorNormElim0")
(use "PDVNormSimpleElim0" (pt "V") (pt "xx0 dim") (pt "kapp1"))
(auto)
(assume "eps<xxn")
(inst-with-to "LeIsNotGt"  (pt "V (xxseq n)") (pt "rbeta1") "Inst")
(use "Inst")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "V (xxseq Zero)"))
(use "PDVDiffElim1" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeTrans" (pt "V xx0"))
(use "RealLeReflNC")
(use "CmapContmvElim1" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq Zero) dim = xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim") )
(auto)
(use "LyapunovConfigElim2" (pt "V"))
(use "LyapunovConfigIntro")
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq Zero) dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim1" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(assert "exl p RealLt rbeta1 ralpha1 p")
(use "Hyp1P")
(assume "Hyp1m")
(by-assume "Hyp1m" "p0" "Hyp2m")
(intro 0 (pt "PosS(PosS(PosS p0))"))
(use "RealLtLeTrans" (pt "ralpha1"))
(auto)
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "AssertionInfCondInstMP")
(auto)
(use "LyapunovConfigIntro")
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "n")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PosChooseProperAux")
(use "AssertionInfCondInstMP")
(use "AssertionInfCondInstMP")
(save "LyapunovStableLe")


(set-goal "all V,kapp1,xxseq,FF,xx0,norm( VectorNorm norm -> ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0 -> ClassKappaConfigurationPos kapp1 -> PDVNormSimple V (xx0 dim) kapp1 norm -> all xx,repsilon,p ( RealVector xx -> Real repsilon -> RealLt 0 repsilon p -> xx dim = xx0 dim -> exl rdelta,p ((Real rdelta) & RealLt 0 rdelta p & (norm(xx)<<=rdelta -> (V xx)<<= repsilon))) ->   PDVDiff V xxseq FF xx0 -> StableEqLtReaNorm xxseq FF xx0 norm)")
(assume "V" "kapp1" "xxseq" "FF" "xx0" "norm")
(assume "Vnorm" "PRHS" "LyapConfig" "ClassKPos" "PDVNormS" "ContCond" "LyapDecay")
(use "StableEqLtReaNormIntro")
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "repsilon" "Reps" "0<eps")
(assert "all x(Real x -> exl p RealLt 0 x p -> exl ralpha (all xx ( RealVector xx->LyapunovConfig V (xx0 dim) xx ->   x<<= (norm(xx)) -> ralpha <<= (V xx) )&(Real ralpha)& exl p RealLt 0 ralpha p))")
(assume "x" "Rx" "0<x")
(intro 0 (pt "kapp1 x"))
(split)
(assume "xx")
(assume "Rxx")
(assume "LyapunovConfigAux")
(assume "x<|_xx")
(use "RealLeTrans" (pt "kapp1 (norm xx)"))
(use "ClassKappaConfigurationElim3")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(use "RealLtToLe" (pt "p2"))
(autoreal)
(auto)
(use "NormNNeg")
(use "PDVNormSimpleElim0" (pt "V") (pt "xx0 dim") (pt "kapp1"))
(auto)
(use "PDVNormSimpleElim1" (pt "xx0 dim"))
(auto)
(split)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "ClassKappaConfigurationPosElim0")
(auto)
(use "ClassKappaConfigurationElim5")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(intro 0 (pt "p2"))
(auto)
(assume "AssertionInfCond")
(inst-with-to "AssertionInfCond" (pt "repsilon") "AssertionInfCondInst")
(assert "exl ralpha( all xx( RealVector xx ->LyapunovConfig V(xx0 dim)xx -> repsilon<<=norm xx -> ralpha<<=V xx) & Real ralpha & exl p RealLt 0 ralpha p)")
(use "AssertionInfCondInst")
(realproof)
(use "0<eps")
(assume "AssertionInfCondInstM")
(by-assume "AssertionInfCondInstM" "ralpha1" "AssertionInfCondInstMP")
(cut "ex rbeta (Real rbeta &(exl p RealLt rbeta ralpha1 p) & (exl p RealLt 0 rbeta p))")
(assume "Hyp1")
(by-assume "Hyp1" "rbeta1" "Hyp1P")
(inst-with-to "ContCond" (pt "xx0") (pt "rbeta1") "ContCondInst")
(assert "exl rdelta,p(Real rdelta &  RealLt 0 rdelta p &(norm xx0<<=rdelta -> V xx0<<=rbeta1))")
(assert "exl p RealLt 0 rbeta1 p")
(use "Hyp1P")
(assume "ExHyp1Inst")
(by-assume "ExHyp1Inst" "q2" "ExHyp1InstProp")
(use "ContCondInst" (pt "q2"))
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "ContCondInst1")
(by-assume "ContCondInst1" "rdelta1" "ContCondProp")
(intro 0 (pt "rdelta1"))
(by-assume "ContCondProp" "q1" "ContCondProp2")
(intro 0 (pt "q1"))
(split)
(use "ContCondProp2")
(split)
(use "ContCondProp2")
(assume "PropStart")
(assume "n")
(use "Stab")
(assume "NotLt")
(assert "repsilon<<=norm(xxseq n)")
(use "NotGtIsLt")
(realproof)
(use "VectorNormElim0")
(auto)
(use "SolutionSimElim2" (pt "xx0")  (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "assumption")
(use "NotLt")
(by-assume "assumption" "p5" "assumptionProp")
(intro 0 (pt "p5"))
(use "assumptionProp")
(assume "Assertion")
(inst-with-to "LeIsNotGt"  (pt "V (xxseq n)") (pt "rbeta1") "Inst")
(use "Inst")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "V xx0"))
(use "RealLeTrans" (pt "V(xxseq Zero)"))
(use "PDVDiffElim1" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeReflNC")
(use "CmapContmvElim1" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0")) 
(auto)
(simp (pf"(xxseq Zero)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "ContCondProp2")
(by-assume "PropStart" "p3" "PosProof")
(use "RealLtToLe" (pt "p3"))
(use "VectorNormElim0")
(use "PDVNormSimpleElim0" (pt "V") (pt "xx0 dim") (pt "kapp1"))
(auto)
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assert "exl p RealLt rbeta1 ralpha1 p")
(use "Hyp1P")
(assume "Hyp1PM")
(by-assume "Hyp1PM" "q" "Hyp1PMProp")
(intro 0 (pt "PosS(PosS(PosS(q)))"))
(use "RealLtLeTrans" (pt "ralpha1"))
(auto)
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0")) 
(auto)
(simp (pf"(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "AssertionInfCondInstMP")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PosChooseProperAux")
(auto)
(save "LyapunovStableLt")


;; LyapunovStableLtClass

(set-goal "all V,kapp1,xxseq,FF,xx0,norm( VectorNorm norm -> ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0 -> ClassKappaConfigurationPos kapp1 -> PDVNormSimple V (xx0 dim) kapp1 norm -> all xx,repsilon ,p ( RealVector xx -> Real repsilon -> RealLt 0 repsilon p -> xx dim = xx0 dim -> exl rdelta,p ((Real rdelta) &(RealLt 0 rdelta p) &(norm(xx)<<=rdelta -> (V xx)<<= repsilon))) ->   PDVDiff V xxseq FF xx0 -> StableEqLtReaNorm xxseq FF xx0 norm)")
(assume "V" "kapp1" "xxseq" "FF" "xx0" "norm")
(assume "Vnorm" "PRHS" "LyapConfig" "ClassKPos" "PDVNormS" "ContCond" "LyapDecay")
(use "StableEqLtReaNormIntro")
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "repsilon" "Reps" "0<eps")
(assert "all x(Real x -> exl p RealLt 0 x p -> exl ralpha (all xx ( RealVector xx->LyapunovConfig V (xx0 dim) xx ->   x<<= (norm(xx)) -> ralpha <<= (V xx) )&(Real ralpha)& exl p RealLt 0 ralpha p))")
(assume "x" "Rx" "0<x")
(intro 0 (pt "kapp1 x"))
(split)
(assume "xx")
(assume "Rxx")
(assume "LyapunovConfigAux")
(assume "x<|_xx")
(use "RealLeTrans" (pt "kapp1 (norm xx)"))
(use "ClassKappaConfigurationElim3")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(use "RealLtToLe" (pt "p2"))
(autoreal)
(auto)
(use "NormNNeg")
(use "PDVNormSimpleElim0" (pt "V") (pt "xx0 dim") (pt "kapp1"))
(auto)
(use "PDVNormSimpleElim1" (pt "xx0 dim"))
(auto)
(split)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "ClassKappaConfigurationPosElim0")
(auto)
(use "ClassKappaConfigurationElim5")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(intro 0 (pt "p2"))
(auto)
(assume "AssertionInfCond")
(inst-with-to "AssertionInfCond" (pt "repsilon") "AssertionInfCondInst")
(assert "exl ralpha( all xx( RealVector xx ->LyapunovConfig V(xx0 dim)xx -> repsilon<<=norm xx -> ralpha<<=V xx) & Real ralpha & exl p RealLt 0 ralpha p)")
(use "AssertionInfCondInst")
(realproof)
(use "0<eps")
(assume "AssertionInfCondInstM")
(by-assume "AssertionInfCondInstM" "ralpha1" "AssertionInfCondInstMP")
(cut "ex rbeta (Real rbeta &(exl p RealLt rbeta ralpha1 p) & (exl p RealLt 0 rbeta p))")
(assume "Hyp1")
(by-assume "Hyp1" "rbeta1" "Hyp1P")
(inst-with-to "ContCond" (pt "xx0") (pt "rbeta1") "ContCondInst")
(assert "exl rdelta,p(Real rdelta & RealLt 0 rdelta p & (norm xx0<<=rdelta -> V xx0<<=rbeta1))")
(assert "exl p RealLt 0 rbeta1 p")
(use "Hyp1P")
(assume "Hyp1PEx")
(by-assume "Hyp1PEx" "q" "Hyp1PExProp")
(use "ContCondInst" (pt "q"))
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "ContCondInst1")
(by-assume "ContCondInst1" "rdelta1" "ContCondProp")
(intro 0 (pt "rdelta1"))
(by-assume "ContCondProp" "q0" "ContCondProp2")
(intro 0 (pt "q0"))
(split)
(use "ContCondProp2")
(split)
(use "ContCondProp2")
(assume "PropStart")
(assume "n")
(use "Stab")
(assume "NotLt")
(assert "repsilon<<=norm(xxseq n)")
(use "NotGtIsLt")
(realproof)
(use "VectorNormElim0")
(auto)
(use "SolutionSimElim2" (pt "xx0")  (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "assumption")
(use "NotLt")
(by-assume "assumption" "p5" "assumptionProp")
(intro 0 (pt "p5"))
(use "assumptionProp")
(assume "Assertion")
(inst-with-to "LeIsNotGt"  (pt "V (xxseq n)") (pt "rbeta1") "Inst")
(use "Inst")
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "V xx0"))
(use "RealLeTrans" (pt "V(xxseq Zero)"))
(use "PDVDiffElim1" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeReflNC")
(use "CmapContmvElim1" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0")) 
(auto)
(simp (pf"(xxseq Zero)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "ContCondProp2")
(by-assume "PropStart" "p3" "PosProof")
(use "RealLtToLe" (pt "p3"))
(use "VectorNormElim0")
(auto)
(use "SolutionSimElim3" (pt "xxseq") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(assert "exl p RealLt rbeta1 ralpha1 p")
(use "Hyp1P")
(assume "Hyp1PM")
(by-assume "Hyp1PM" "q" "Hyp1PMProp")
(intro 0 (pt "PosS(PosS(PosS(q)))"))
(use "RealLtLeTrans" (pt "ralpha1"))
(auto)
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0")) 
(auto)
(simp (pf"(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "AssertionInfCondInstMP")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PosChooseProperAux")
(auto)
(save "LyapunovStableLtClass")

;;(remove-theorem "LyapunovStableLtClass")



;; LyapunovStableAllNormWit

(set-goal "all V,kapp1,kapp2,kappinv,xxseq,FF,xx0,norm( ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0-> ClassKappaConfiguration kapp1 -> ClassKappaConfiguration kapp2 -> ClassKappaInverse kapp2 kappinv ->  PDVNorm V (xx0 dim) kapp1 kapp2 norm -> PDVDiff V xxseq FF xx0 -> StableEqLeReaNormWit xxseq FF xx0 norm ([repsilon] (kappinv (kapp1 repsilon)))) ")
(assume "V" "kapp1" "kapp2" "kappinv" "xxseq" "FF" "xx0" "norm")
(assume "PRHS")
(assume "LyapunovConfig V")
(assume "classkapp1")
(assume "classkapp2")
(assume "classkappInv")
(assume "PDVNorm V")
(assume "PDVDiff V")
(use "StableEqLeReaNormWitIntro")
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(assume "repsilon" "Reps" "0<eps")
(split)
(use "RealEqSModEqReal" (pt "kappinv(kapp1 repsilon)"))
(use "CfmapContElim0Real")
(use "ClassKappaInverseElim1" (pt "kapp2"))
(use "classkappInv")
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "classkapp1")
(use "Reps")
(use "RealEqSIntro")
(ng #t)
(auto)
(assume "nx_0<=delta")
(assume "n")
(cut "all n RealVector( (xxseq n) )")
(assume "AuxRealCutInst")
(use "ClassKappaConfigurationElim2" (pt "kapp1"))
(auto)
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(by-assume  "0<eps" "p0" "epswit")
(use "RealLtToLe" (pt "p0"))
(use "RealRat")
(auto)
(use "RealLeTrans" (pt "V (xxseq n)"))
(use "PDVNormElim0" (pt "xx0 dim") (pt "kapp2"))
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "V(xxseq Zero)"))
(use "PDVDiffElim1" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeTrans" (pt "kapp2(kappinv( kapp1 (repsilon)))"))
(use "RealLeTrans" (pt "kapp2( norm (xxseq Zero))"))
(use "PDVNormElim1" (pt "xx0 dim") (pt "kapp1"))
(use "PDVNorm V")
(auto)
(use "LyapunovConfigElim3" (pt "FF") (pt "xx0"))
(use "PDVDiffElim2" (pt "V"))
(use "PDVDiff V")
(use "PRHS")
(use "LyapunovConfig V")
(auto)
(use "ClassKappaConfigurationElim3")
(use "classkapp2")
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "RealLeTrans" (pt "norm (xx0)"))
(use "NormNNeg")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "RealVectorEqElim1" (pt "(xxseq Zero)"))
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "norm (xx0)"))
(use "RealLeReflNC")
(use "VectorNormCompat")
(use "PDVNormElim2" (pt "V") (pt "xx0 dim") (pt "kapp1") (pt "kapp2"))
(auto)
(use "SolutionSimElim1" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(use "PDVDiff V")
(use "nx_0<=delta")
(use "RealLeReflNC")
(use "ClassKappaInverseElim3")
(auto)
(use "ClassKappaConfigurationElim4")
(auto)
(by-assume  "0<eps" "p0" "epswit")
(use "RealLtToLe" (pt "p0"))
(use "RealRat")
(auto)
(assume "n0")
(use "RealVectorEqElim0" (pt " (Simulation n0 xx0 FF)"))
(use "SolutionSimElim0")
(use "PDVDiffElim2" (pt "V"))
(auto)
(save "LyapunovStableAllNormWit")

(set-goal "all xxseq,FF,xx0,norm,rdeltamap( all x ( Real x -> exr p RealLt 0 x p -> exr p RealLt 0 (rdeltamap x) p) -> StableEqLeReaNormWit xxseq FF xx0 norm rdeltamap -> StableEqLeReaNorm xxseq FF xx0 norm)")
(assume "xxseq" "FF" "xx0" "norm" "rdeltamap")
(assume "PosDef")
(assume "StableEqLeReaNormWitProp")
(use "StableEqLeReaNormIntro")
(use "StableEqLeReaNormWitElim0" (pt "norm") (pt "rdeltamap"))
(auto)
(use "StableEqLeReaNormWitElim1" (pt "xxseq") (pt "FF") (pt "xx0") (pt "rdeltamap"))
(auto)
(assume "repsilon")
(assume "Reps")
(assume "PosP")
(intro 0 (pt "rdeltamap repsilon"))
(cut "exr p RealLt 0(rdeltamap repsilon)p")
(assume "cutInst")
(by-assume "cutInst" "q0" "cutInstProp")
(intro 0 (pt "q0"))
(split)
(use "StableEqLeReaNormWitElim2" (pt "xxseq") (pt "FF") (pt "xx0") (pt "norm"))
(use "StableEqLeReaNormWitProp")
(use "Reps")
(use "PosP")
(split)
(use "cutInstProp")
(assume "PropStart")
(use "StableEqLeReaNormWitElim2" (pt "FF") (pt "xx0") (pt "rdeltamap"))
(use "StableEqLeReaNormWitProp")
(auto)
(use "PosDef")
(auto)
(by-assume "PosP" "q0" "PosPProp")
(auto)
(intro 0 (pt "q0"))
(auto)
(save "StableLeWitToStableLe")



(set-goal "all V,kapp1,xxseq,FF,xx0,norm( VectorNorm norm -> ProperRHS FF(xx0 dim)-> LyapunovConfig V (xx0 dim) xx0 -> ClassKappaConfigurationPos kapp1 -> PDVNormSimple V (xx0 dim) kapp1 norm -> all xx,repsilon,p ( RealVector xx -> Real repsilon -> RealLt 0 repsilon p -> xx dim = xx0 dim -> exl rdelta,p ((Real rdelta)& RealLt 0 rdelta p &(norm(xx)<<=rdelta -> (V xx)<<= repsilon))) ->   PDVDiff V xxseq FF xx0 -> StableEqLeReaNorm xxseq FF xx0 norm)")
(assume "V" "kapp1" "xxseq" "FF" "xx0" "norm")
(assume "Vnorm" "PRHS" "LyapConfig" "ClassKPos" "PDVNormS" "ContCond" "LyapDecay")
(use "StableEqLeReaNormIntro")
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "repsilon" "Reps" "0<eps")
(assert "all x(Real x -> exl p RealLt 0 x p -> exl ralpha (all xx ( RealVector xx->LyapunovConfig V (xx0 dim) xx ->  exca p RealLt x (norm(xx)) p -> ralpha <<= (V xx) )&(Real ralpha)& exl p RealLt 0 ralpha p))")
(assume "x" "Rx" "0<x")
(intro 0 (pt "kapp1 x"))
(split)
(assume "xx")
(assume "Rxx")
(assume "LyapunovConfigAux")
(assume "x<|_xx")
(use "RealLeTrans" (pt "kapp1 (norm xx)"))
(use "ClassKappaConfigurationElim3")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(use "RealLtToLe" (pt "p2"))
(autoreal)
(auto)
(use "NormNNeg")
(use "PDVNormSimpleElim0" (pt "V") (pt "xx0 dim") (pt "kapp1"))
(auto)
(by-assume "x<|_xx" "p1" "PosProp")
(use "RealLtToLeClass")
(realproof)
(use "VectorNormElim0")
(auto)
(use "PDVNormSimpleElim1" (pt "xx0 dim"))
(auto)
(split)
(use "CfmapContElim0Real")
(use "ClassKappaConfigurationElim0")
(use "ClassKappaConfigurationPosElim0")
(auto)
(use "ClassKappaConfigurationElim5")
(use "ClassKappaConfigurationPosElim0")
(auto)
(by-assume "0<x" "p2" "PosProof")
(intro 0 (pt "p2"))
(auto)
(assume "AssertionInfCond")
(inst-with-to "AssertionInfCond" (pt "repsilon") "AssertionInfCondInst")
(assert "exl ralpha (all xx ( RealVector xx->LyapunovConfig V (xx0 dim) xx ->  exca p RealLt repsilon (norm(xx)) p -> ralpha <<= (V xx)) & Real ralpha & exl p RealLt 0 ralpha p)")
(use "AssertionInfCondInst")
(auto)
(assume "AssertionInfCondInstM")
(by-assume "AssertionInfCondInstM" "ralpha1" "AssertionInfCondInstMP")
(cut "ex rbeta (Real rbeta &(exl p RealLt rbeta ralpha1 p) & (exl p RealLt 0 rbeta p))")
(assume "Hyp1")
(by-assume "Hyp1" "rbeta1" "Hyp1P")
(inst-with-to "ContCond" (pt "xx0") (pt "rbeta1") "ContCondInst")
(assert "exl rdelta,p(Real rdelta & RealLt 0 rdelta p & (norm xx0<<=rdelta -> V xx0<<=rbeta1))")
(assert "exl p RealLt 0 rbeta1 p")
(use "Hyp1P")
(assume "ExHypBeta")
(by-assume "ExHypBeta" "q2" "ExHypBetaInst")
(use "ContCondInst" (pt "q2"))
(use "SolutionSimElim3" (pt "xxseq") (pt "FF")) 
(use "PDVDiffElim2" (pt "V"))
(auto)
(assume "ContCondInst1")
(by-assume "ContCondInst1" "rdelta1" "ContCondProp")
(by-assume "ContCondProp" "q1" "ContCondProp2")
(intro 0 (pt "rdelta1"))
(intro 0 (pt "q1"))
(split)
(auto)
(split)
(auto)
(assume "PropStart")
(cut "all n RealVector (xxseq n)")
(assume "Rcut")
(assume "n")
(use "Stab")
(assume "Cond")
(inst-with-to "ClassicalComparison2"  (pt "ralpha1")  (pt "V (xxseq n)") "Inst")
(use "Inst")
(auto)
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(cut "exl p RealLt rbeta1 ralpha1 p")
(assume "cutInst")
(by-assume "cutInst" "p0" "cutInstProp")
(assume "Inst2")
(inst-with-to "Inst2" (pt "PosS(PosS(PosS(p0)))") "Inst2Spec")
(use "Inst2Spec")
(use "RealLeLtTrans" (pt "rbeta1"))
(use "CmapContmvElim0" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "RealLeTrans" (pt "V (xxseq Zero)"))
(use "PDVDiffElim1" (pt "FF") (pt "xx0"))
(auto)
(use "RealLeTrans" (pt "V xx0"))
(use "RealLeReflNC")
(use "CmapContmvElim1" (pt "xx0 dim"))
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq Zero) dim = xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim") )
(auto)
(use "LyapunovConfigElim2" (pt "V"))
(use "LyapunovConfigIntro")
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq Zero) dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim1" (pt "FF"))
(auto)
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "AssertionInfCondInstMP")
(auto)
(use "LyapunovConfigIntro")
(use "LyapunovConfigElim0" (pt "xx0"))
(auto)
(simp (pf "(xxseq n)dim=xx0 dim"))
(use "LyapunovConfigElim1" (pt "V") (pt "xx0 dim"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "SolutionSimElim4" (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "ClassicalComparison")
(use "VectorNormElim0")
(auto)
(assume "n")
(use "SolutionSimElim2" (pt "xx0") (pt "FF"))
(use "PDVDiffElim2" (pt "V"))
(auto)
(use "PosChooseProperAux")
(use "AssertionInfCondInstMP")
(use "AssertionInfCondInstMP")
(save "LyapunovStableLeClass")

